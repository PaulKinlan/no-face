var o1 = ((e) =>
  typeof require != 'undefined'
    ? require
    : typeof Proxy != 'undefined'
    ? new Proxy(e, { get: (t, a) => (typeof require != 'undefined' ? require : t)[a] })
    : e)(function (e) {
  if (typeof require != 'undefined') return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + e + '" is not supported');
});
var Ko = Object.create,
  Ba = Object.defineProperty;
var Go = Object.getOwnPropertyDescriptor;
var Xo = Object.getOwnPropertyNames;
var Yo = Object.getPrototypeOf,
  Jo = Object.prototype.hasOwnProperty;
var up = (e) => Ba(e, '__esModule', { value: !0 }),
  cp = ((e) =>
    typeof o1 != 'undefined'
      ? o1
      : typeof Proxy != 'undefined'
      ? new Proxy(e, { get: (t, a) => (typeof o1 != 'undefined' ? o1 : t)[a] })
      : e)(function (e) {
    if (typeof o1 != 'undefined') return o1.apply(this, arguments);
    throw new Error('Dynamic require of "' + e + '" is not supported');
  }),
  At = (e, t) =>
    function () {
      return e && (t = (0, e[Object.keys(e)[0]])((e = 0))), t;
    },
  Re = (e, t) =>
    function () {
      return t || (0, e[Object.keys(e)[0]])((t = { exports: {} }).exports, t), t.exports;
    },
  be = (e, t) => {
    up(e);
    for (var a in t) Ba(e, a, { get: t[a], enumerable: !0 });
  },
  Zo = (e, t, a) => {
    if ((t && typeof t == 'object') || typeof t == 'function')
      for (let r of Xo(t))
        !Jo.call(e, r) &&
          r !== 'default' &&
          Ba(e, r, { get: () => t[r], enumerable: !(a = Go(t, r)) || a.enumerable });
    return e;
  },
  Y1 = (e) =>
    Zo(
      up(
        Ba(
          e != null ? Ko(Yo(e)) : {},
          'default',
          e && e.__esModule && 'default' in e
            ? { get: () => e.default, enumerable: !0 }
            : { value: e, enumerable: !0 }
        )
      ),
      e
    );
var Qo = Re({
    'node_modules/@mediapipe/face_detection/face_detection.js'(e) {
      (function () {
        'use strict';
        var t;
        function a(o) {
          var c = 0;
          return function () {
            return c < o.length ? { done: !1, value: o[c++] } : { done: !0 };
          };
        }
        var r =
          typeof Object.defineProperties == 'function'
            ? Object.defineProperty
            : function (o, c, v) {
                return o == Array.prototype || o == Object.prototype || (o[c] = v.value), o;
              };
        function n(o) {
          o = [
            typeof globalThis == 'object' && globalThis,
            o,
            typeof window == 'object' && window,
            typeof self == 'object' && self,
            typeof global == 'object' && global
          ];
          for (var c = 0; c < o.length; ++c) {
            var v = o[c];
            if (v && v.Math == Math) return v;
          }
          throw Error('Cannot find global object');
        }
        var s = n(this);
        function p(o, c) {
          if (c)
            e: {
              var v = s;
              o = o.split('.');
              for (var w = 0; w < o.length - 1; w++) {
                var E = o[w];
                if (!(E in v)) break e;
                v = v[E];
              }
              (o = o[o.length - 1]),
                (w = v[o]),
                (c = c(w)),
                c != w && c != null && r(v, o, { configurable: !0, writable: !0, value: c });
            }
        }
        p('Symbol', function (o) {
          function c(I) {
            if (this instanceof c) throw new TypeError('Symbol is not a constructor');
            return new v(w + (I || '') + '_' + E++, I);
          }
          function v(I, k) {
            (this.g = I), r(this, 'description', { configurable: !0, writable: !0, value: k });
          }
          if (o) return o;
          v.prototype.toString = function () {
            return this.g;
          };
          var w = 'jscomp_symbol_' + ((1e9 * Math.random()) >>> 0) + '_',
            E = 0;
          return c;
        }),
          p('Symbol.iterator', function (o) {
            if (o) return o;
            o = Symbol('Symbol.iterator');
            for (
              var c =
                  'Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array'.split(
                    ' '
                  ),
                v = 0;
              v < c.length;
              v++
            ) {
              var w = s[c[v]];
              typeof w == 'function' &&
                typeof w.prototype[o] != 'function' &&
                r(w.prototype, o, {
                  configurable: !0,
                  writable: !0,
                  value: function () {
                    return i(a(this));
                  }
                });
            }
            return o;
          });
        function i(o) {
          return (
            (o = { next: o }),
            (o[Symbol.iterator] = function () {
              return this;
            }),
            o
          );
        }
        function d(o) {
          var c = typeof Symbol != 'undefined' && Symbol.iterator && o[Symbol.iterator];
          return c ? c.call(o) : { next: a(o) };
        }
        function l(o) {
          if (!(o instanceof Array)) {
            o = d(o);
            for (var c, v = []; !(c = o.next()).done; ) v.push(c.value);
            o = v;
          }
          return o;
        }
        var m =
            typeof Object.create == 'function'
              ? Object.create
              : function (o) {
                  function c() {}
                  return (c.prototype = o), new c();
                },
          u;
        if (typeof Object.setPrototypeOf == 'function') u = Object.setPrototypeOf;
        else {
          var f;
          e: {
            var g = { a: !0 },
              y = {};
            try {
              (y.__proto__ = g), (f = y.a);
              break e;
            } catch {}
            f = !1;
          }
          u = f
            ? function (o, c) {
                if (((o.__proto__ = c), o.__proto__ !== c))
                  throw new TypeError(o + ' is not extensible');
                return o;
              }
            : null;
        }
        var N = u;
        function T(o, c) {
          if (((o.prototype = m(c.prototype)), (o.prototype.constructor = o), N)) N(o, c);
          else
            for (var v in c)
              if (v != 'prototype')
                if (Object.defineProperties) {
                  var w = Object.getOwnPropertyDescriptor(c, v);
                  w && Object.defineProperty(o, v, w);
                } else o[v] = c[v];
          o.na = c.prototype;
        }
        function O() {
          (this.l = !1),
            (this.i = null),
            (this.h = void 0),
            (this.g = 1),
            (this.u = this.o = 0),
            (this.j = null);
        }
        function B(o) {
          if (o.l) throw new TypeError('Generator is already running');
          o.l = !0;
        }
        O.prototype.s = function (o) {
          this.h = o;
        };
        function M(o, c) {
          (o.j = { da: c, ea: !0 }), (o.g = o.o || o.u);
        }
        O.prototype.return = function (o) {
          (this.j = { return: o }), (this.g = this.u);
        };
        function C(o, c, v) {
          return (o.g = v), { value: c };
        }
        function L(o) {
          (this.g = new O()), (this.h = o);
        }
        function z(o, c) {
          B(o.g);
          var v = o.g.i;
          return v
            ? X(
                o,
                'return' in v
                  ? v.return
                  : function (w) {
                      return { value: w, done: !0 };
                    },
                c,
                o.g.return
              )
            : (o.g.return(c), Y(o));
        }
        function X(o, c, v, w) {
          try {
            var E = c.call(o.g.i, v);
            if (!(E instanceof Object))
              throw new TypeError('Iterator result ' + E + ' is not an object');
            if (!E.done) return (o.g.l = !1), E;
            var I = E.value;
          } catch (k) {
            return (o.g.i = null), M(o.g, k), Y(o);
          }
          return (o.g.i = null), w.call(o.g, I), Y(o);
        }
        function Y(o) {
          for (; o.g.g; )
            try {
              var c = o.h(o.g);
              if (c) return (o.g.l = !1), { value: c.value, done: !1 };
            } catch (v) {
              (o.g.h = void 0), M(o.g, v);
            }
          if (((o.g.l = !1), o.g.j)) {
            if (((c = o.g.j), (o.g.j = null), c.ea)) throw c.da;
            return { value: c.return, done: !0 };
          }
          return { value: void 0, done: !0 };
        }
        function J(o) {
          (this.next = function (c) {
            return B(o.g), o.g.i ? (c = X(o, o.g.i.next, c, o.g.s)) : (o.g.s(c), (c = Y(o))), c;
          }),
            (this.throw = function (c) {
              return B(o.g), o.g.i ? (c = X(o, o.g.i.throw, c, o.g.s)) : (M(o.g, c), (c = Y(o))), c;
            }),
            (this.return = function (c) {
              return z(o, c);
            }),
            (this[Symbol.iterator] = function () {
              return this;
            });
        }
        function Z(o) {
          function c(w) {
            return o.next(w);
          }
          function v(w) {
            return o.throw(w);
          }
          return new Promise(function (w, E) {
            function I(k) {
              k.done ? w(k.value) : Promise.resolve(k.value).then(c, v).then(I, E);
            }
            I(o.next());
          });
        }
        function F(o) {
          return Z(new J(new L(o)));
        }
        p('Promise', function (o) {
          function c(k) {
            (this.h = 0), (this.i = void 0), (this.g = []), (this.s = !1);
            var V = this.j();
            try {
              k(V.resolve, V.reject);
            } catch (P) {
              V.reject(P);
            }
          }
          function v() {
            this.g = null;
          }
          function w(k) {
            return k instanceof c
              ? k
              : new c(function (V) {
                  V(k);
                });
          }
          if (o) return o;
          v.prototype.h = function (k) {
            if (this.g == null) {
              this.g = [];
              var V = this;
              this.i(function () {
                V.l();
              });
            }
            this.g.push(k);
          };
          var E = s.setTimeout;
          (v.prototype.i = function (k) {
            E(k, 0);
          }),
            (v.prototype.l = function () {
              for (; this.g && this.g.length; ) {
                var k = this.g;
                this.g = [];
                for (var V = 0; V < k.length; ++V) {
                  var P = k[V];
                  k[V] = null;
                  try {
                    P();
                  } catch (W) {
                    this.j(W);
                  }
                }
              }
              this.g = null;
            }),
            (v.prototype.j = function (k) {
              this.i(function () {
                throw k;
              });
            }),
            (c.prototype.j = function () {
              function k(W) {
                return function (ee) {
                  P || ((P = !0), W.call(V, ee));
                };
              }
              var V = this,
                P = !1;
              return { resolve: k(this.D), reject: k(this.l) };
            }),
            (c.prototype.D = function (k) {
              if (k === this) this.l(new TypeError('A Promise cannot resolve to itself'));
              else if (k instanceof c) this.H(k);
              else {
                e: switch (typeof k) {
                  case 'object':
                    var V = k != null;
                    break e;
                  case 'function':
                    V = !0;
                    break e;
                  default:
                    V = !1;
                }
                V ? this.A(k) : this.o(k);
              }
            }),
            (c.prototype.A = function (k) {
              var V = void 0;
              try {
                V = k.then;
              } catch (P) {
                this.l(P);
                return;
              }
              typeof V == 'function' ? this.I(V, k) : this.o(k);
            }),
            (c.prototype.l = function (k) {
              this.u(2, k);
            }),
            (c.prototype.o = function (k) {
              this.u(1, k);
            }),
            (c.prototype.u = function (k, V) {
              if (this.h != 0)
                throw Error(
                  'Cannot settle(' + k + ', ' + V + '): Promise already settled in state' + this.h
                );
              (this.h = k), (this.i = V), this.h === 2 && this.G(), this.B();
            }),
            (c.prototype.G = function () {
              var k = this;
              E(function () {
                if (k.C()) {
                  var V = s.console;
                  typeof V != 'undefined' && V.error(k.i);
                }
              }, 1);
            }),
            (c.prototype.C = function () {
              if (this.s) return !1;
              var k = s.CustomEvent,
                V = s.Event,
                P = s.dispatchEvent;
              return typeof P == 'undefined'
                ? !0
                : (typeof k == 'function'
                    ? (k = new k('unhandledrejection', { cancelable: !0 }))
                    : typeof V == 'function'
                    ? (k = new V('unhandledrejection', { cancelable: !0 }))
                    : ((k = s.document.createEvent('CustomEvent')),
                      k.initCustomEvent('unhandledrejection', !1, !0, k)),
                  (k.promise = this),
                  (k.reason = this.i),
                  P(k));
            }),
            (c.prototype.B = function () {
              if (this.g != null) {
                for (var k = 0; k < this.g.length; ++k) I.h(this.g[k]);
                this.g = null;
              }
            });
          var I = new v();
          return (
            (c.prototype.H = function (k) {
              var V = this.j();
              k.M(V.resolve, V.reject);
            }),
            (c.prototype.I = function (k, V) {
              var P = this.j();
              try {
                k.call(V, P.resolve, P.reject);
              } catch (W) {
                P.reject(W);
              }
            }),
            (c.prototype.then = function (k, V) {
              function P(pe, te) {
                return typeof pe == 'function'
                  ? function (oe) {
                      try {
                        W(pe(oe));
                      } catch (ve) {
                        ee(ve);
                      }
                    }
                  : te;
              }
              var W,
                ee,
                se = new c(function (pe, te) {
                  (W = pe), (ee = te);
                });
              return this.M(P(k, W), P(V, ee)), se;
            }),
            (c.prototype.catch = function (k) {
              return this.then(void 0, k);
            }),
            (c.prototype.M = function (k, V) {
              function P() {
                switch (W.h) {
                  case 1:
                    k(W.i);
                    break;
                  case 2:
                    V(W.i);
                    break;
                  default:
                    throw Error('Unexpected state: ' + W.h);
                }
              }
              var W = this;
              this.g == null ? I.h(P) : this.g.push(P), (this.s = !0);
            }),
            (c.resolve = w),
            (c.reject = function (k) {
              return new c(function (V, P) {
                P(k);
              });
            }),
            (c.race = function (k) {
              return new c(function (V, P) {
                for (var W = d(k), ee = W.next(); !ee.done; ee = W.next()) w(ee.value).M(V, P);
              });
            }),
            (c.all = function (k) {
              var V = d(k),
                P = V.next();
              return P.done
                ? w([])
                : new c(function (W, ee) {
                    function se(oe) {
                      return function (ve) {
                        (pe[oe] = ve), te--, te == 0 && W(pe);
                      };
                    }
                    var pe = [],
                      te = 0;
                    do pe.push(void 0), te++, w(P.value).M(se(pe.length - 1), ee), (P = V.next());
                    while (!P.done);
                  });
            }),
            c
          );
        });
        function R(o, c) {
          o instanceof String && (o += '');
          var v = 0,
            w = !1,
            E = {
              next: function () {
                if (!w && v < o.length) {
                  var I = v++;
                  return { value: c(I, o[I]), done: !1 };
                }
                return (w = !0), { done: !0, value: void 0 };
              }
            };
          return (
            (E[Symbol.iterator] = function () {
              return E;
            }),
            E
          );
        }
        var _ =
          typeof Object.assign == 'function'
            ? Object.assign
            : function (o, c) {
                for (var v = 1; v < arguments.length; v++) {
                  var w = arguments[v];
                  if (w)
                    for (var E in w) Object.prototype.hasOwnProperty.call(w, E) && (o[E] = w[E]);
                }
                return o;
              };
        p('Object.assign', function (o) {
          return o || _;
        }),
          p('Object.is', function (o) {
            return (
              o ||
              function (c, v) {
                return c === v ? c !== 0 || 1 / c == 1 / v : c !== c && v !== v;
              }
            );
          }),
          p('Array.prototype.includes', function (o) {
            return (
              o ||
              function (c, v) {
                var w = this;
                w instanceof String && (w = String(w));
                var E = w.length;
                for (v = v || 0, 0 > v && (v = Math.max(v + E, 0)); v < E; v++) {
                  var I = w[v];
                  if (I === c || Object.is(I, c)) return !0;
                }
                return !1;
              }
            );
          }),
          p('String.prototype.includes', function (o) {
            return (
              o ||
              function (c, v) {
                if (this == null)
                  throw new TypeError(
                    "The 'this' value for String.prototype.includes must not be null or undefined"
                  );
                if (c instanceof RegExp)
                  throw new TypeError(
                    'First argument to String.prototype.includes must not be a regular expression'
                  );
                return this.indexOf(c, v || 0) !== -1;
              }
            );
          }),
          p('Array.prototype.keys', function (o) {
            return (
              o ||
              function () {
                return R(this, function (c) {
                  return c;
                });
              }
            );
          });
        var q = this || self;
        function G(o, c) {
          o = o.split('.');
          var v = q;
          o[0] in v || typeof v.execScript == 'undefined' || v.execScript('var ' + o[0]);
          for (var w; o.length && (w = o.shift()); )
            o.length || c === void 0
              ? v[w] && v[w] !== Object.prototype[w]
                ? (v = v[w])
                : (v = v[w] = {})
              : (v[w] = c);
        }
        function ie() {
          throw Error('Invalid UTF8');
        }
        function ne(o, c) {
          return (c = String.fromCharCode.apply(null, c)), o == null ? c : o + c;
        }
        var ye,
          De = typeof TextDecoder != 'undefined',
          Ce,
          Fe = typeof TextEncoder != 'undefined',
          xe = {},
          Oe = null;
        function ke(o) {
          var c;
          c === void 0 && (c = 0), q1(), (c = xe[c]);
          for (
            var v = Array(Math.floor(o.length / 3)), w = c[64] || '', E = 0, I = 0;
            E < o.length - 2;
            E += 3
          ) {
            var k = o[E],
              V = o[E + 1],
              P = o[E + 2],
              W = c[k >> 2];
            (k = c[((k & 3) << 4) | (V >> 4)]),
              (V = c[((V & 15) << 2) | (P >> 6)]),
              (P = c[P & 63]),
              (v[I++] = W + k + V + P);
          }
          switch (((W = 0), (P = w), o.length - E)) {
            case 2:
              (W = o[E + 1]), (P = c[(W & 15) << 2] || w);
            case 1:
              (o = o[E]), (v[I] = c[o >> 2] + c[((o & 3) << 4) | (W >> 4)] + P + w);
          }
          return v.join('');
        }
        function Me(o) {
          var c = o.length,
            v = (3 * c) / 4;
          v % 3
            ? (v = Math.floor(v))
            : '=.'.indexOf(o[c - 1]) != -1 && (v = '=.'.indexOf(o[c - 2]) != -1 ? v - 2 : v - 1);
          var w = new Uint8Array(v),
            E = 0;
          return (
            Ct(o, function (I) {
              w[E++] = I;
            }),
            E !== v ? w.subarray(0, E) : w
          );
        }
        function Ct(o, c) {
          function v(P) {
            for (; w < o.length; ) {
              var W = o.charAt(w++),
                ee = Oe[W];
              if (ee != null) return ee;
              if (!/^[\s\xa0]*$/.test(W)) throw Error('Unknown base64 encoding at char: ' + W);
            }
            return P;
          }
          q1();
          for (var w = 0; ; ) {
            var E = v(-1),
              I = v(0),
              k = v(64),
              V = v(64);
            if (V === 64 && E === -1) break;
            c((E << 2) | (I >> 4)),
              k != 64 && (c(((I << 4) & 240) | (k >> 2)), V != 64 && c(((k << 6) & 192) | V));
          }
        }
        function q1() {
          if (!Oe) {
            Oe = {};
            for (
              var o = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'.split(''),
                c = ['+/=', '+/', '-_=', '-_.', '-_'],
                v = 0;
              5 > v;
              v++
            ) {
              var w = o.concat(c[v].split(''));
              xe[v] = w;
              for (var E = 0; E < w.length; E++) {
                var I = w[E];
                Oe[I] === void 0 && (Oe[I] = E);
              }
            }
          }
        }
        var Sa = typeof Uint8Array == 'function';
        function H1(o) {
          return Sa && o != null && o instanceof Uint8Array;
        }
        var Ne;
        function Ta(o) {
          if (((this.L = o), o !== null && o.length === 0))
            throw Error('ByteString should be constructed with non-empty values');
        }
        var xr = typeof Uint8Array.prototype.slice == 'function',
          vt = 0,
          D = 0;
        function A(o, c) {
          if (o.constructor === Uint8Array) return o;
          if (o.constructor === ArrayBuffer) return new Uint8Array(o);
          if (o.constructor === Array) return new Uint8Array(o);
          if (o.constructor === String) return Me(o);
          if (o.constructor === Ta)
            return !c && (c = o.L) && c.constructor === Uint8Array
              ? c
              : ((c = o.L),
                (c = c == null || H1(c) ? c : typeof c == 'string' ? Me(c) : null),
                (o = o.L = c) ? new Uint8Array(o) : Ne || (Ne = new Uint8Array(0)));
          if (o instanceof Uint8Array) return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
          throw Error(
            'Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, or Array of numbers'
          );
        }
        function j(o, c) {
          return Error('Invalid wire type: ' + o + ' (at position ' + c + ')');
        }
        function H() {
          return Error('Failed to read varint, encoding is invalid.');
        }
        function Q(o, c) {
          (c = c === void 0 ? {} : c),
            (c = c.v === void 0 ? !1 : c.v),
            (this.h = null),
            (this.g = this.i = this.j = 0),
            (this.v = c),
            o && me(this, o);
        }
        function me(o, c) {
          (o.h = A(c, o.v)), (o.j = 0), (o.i = o.h.length), (o.g = o.j);
        }
        Q.prototype.reset = function () {
          this.g = this.j;
        };
        function he(o) {
          if (o.g > o.i) throw Error('Tried to read past the end of the data ' + o.g + ' > ' + o.i);
        }
        function tt(o) {
          var c = o.h,
            v = c[o.g],
            w = v & 127;
          if (128 > v) return (o.g += 1), he(o), w;
          if (((v = c[o.g + 1]), (w |= (v & 127) << 7), 128 > v)) return (o.g += 2), he(o), w;
          if (((v = c[o.g + 2]), (w |= (v & 127) << 14), 128 > v)) return (o.g += 3), he(o), w;
          if (((v = c[o.g + 3]), (w |= (v & 127) << 21), 128 > v)) return (o.g += 4), he(o), w;
          if (((v = c[o.g + 4]), (o.g += 5), (w |= (v & 15) << 28), 128 > v)) return he(o), w;
          if (
            128 <= c[o.g++] &&
            128 <= c[o.g++] &&
            128 <= c[o.g++] &&
            128 <= c[o.g++] &&
            128 <= c[o.g++]
          )
            throw H();
          return he(o), w;
        }
        var nt = [];
        function T1() {
          this.g = [];
        }
        (T1.prototype.length = function () {
          return this.g.length;
        }),
          (T1.prototype.end = function () {
            var o = this.g;
            return (this.g = []), o;
          });
        function i1(o, c) {
          for (; 127 < c; ) o.g.push((c & 127) | 128), (c >>>= 7);
          o.g.push(c);
        }
        function bs(o) {
          var c = {},
            v = c.W === void 0 ? !1 : c.W;
          (this.l = { v: c.v === void 0 ? !1 : c.v }),
            (this.W = v),
            (c = this.l),
            nt.length
              ? ((v = nt.pop()), c && (v.v = c.v), o && me(v, o), (o = v))
              : (o = new Q(o, c)),
            (this.g = o),
            (this.j = this.g.g),
            (this.h = this.i = -1);
        }
        bs.prototype.reset = function () {
          this.g.reset(), (this.j = this.g.g), (this.h = this.i = -1);
        };
        function Ns(o) {
          var c = o.g;
          if (c.g == c.i) return !1;
          o.j = o.g.g;
          var v = tt(o.g) >>> 0;
          if (((c = v >>> 3), (v &= 7), !(0 <= v && 5 >= v))) throw j(v, o.j);
          if (1 > c) throw Error('Invalid field number: ' + c + ' (at position ' + o.j + ')');
          return (o.i = c), (o.h = v), !0;
        }
        function Ea(o) {
          switch (o.h) {
            case 0:
              if (o.h != 0) Ea(o);
              else
                e: {
                  o = o.g;
                  for (var c = o.g, v = c + 10; c < v; )
                    if ((o.h[c++] & 128) == 0) {
                      (o.g = c), he(o);
                      break e;
                    }
                  throw H();
                }
              break;
            case 1:
              (o = o.g), (o.g += 8), he(o);
              break;
            case 2:
              o.h != 2 ? Ea(o) : ((c = tt(o.g) >>> 0), (o = o.g), (o.g += c), he(o));
              break;
            case 5:
              (o = o.g), (o.g += 4), he(o);
              break;
            case 3:
              c = o.i;
              do {
                if (!Ns(o)) throw Error('Unmatched start-group tag: stream EOF');
                if (o.h == 4) {
                  if (o.i != c) throw Error('Unmatched end-group tag');
                  break;
                }
                Ea(o);
              } while (1);
              break;
            default:
              throw j(o.h, o.j);
          }
        }
        var Da = [];
        function mo() {
          (this.i = []), (this.h = 0), (this.g = new T1());
        }
        function E1(o, c) {
          c.length !== 0 && (o.i.push(c), (o.h += c.length));
        }
        function uo(o, c) {
          if ((c = c.ba)) {
            E1(o, o.g.end());
            for (var v = 0; v < c.length; v++) E1(o, c[v]);
          }
        }
        var xa =
          typeof Symbol == 'function' && typeof Symbol() == 'symbol' ? Symbol(void 0) : void 0;
        function _s(o, c) {
          Object.isFrozen(o) ||
            (xa
              ? (o[xa] |= c)
              : o.N !== void 0
              ? (o.N |= c)
              : Object.defineProperties(o, {
                  N: { value: c, configurable: !0, writable: !0, enumerable: !1 }
                }));
        }
        function Ss(o) {
          var c;
          return xa ? (c = o[xa]) : (c = o.N), c ?? 0;
        }
        function W1(o) {
          return _s(o, 1), o;
        }
        function K1(o) {
          return Array.isArray(o) ? !!(Ss(o) & 2) : !1;
        }
        function Ar(o) {
          if (!Array.isArray(o)) throw Error('cannot mark non-array as immutable');
          _s(o, 2);
        }
        function Ts(o) {
          return (
            o !== null && typeof o == 'object' && !Array.isArray(o) && o.constructor === Object
          );
        }
        var Aa = Object.freeze(W1([]));
        function Es(o) {
          if (K1(o.m)) throw Error('Cannot mutate an immutable Message');
        }
        var Ds = typeof Symbol != 'undefined' && typeof Symbol.hasInstance != 'undefined';
        function xs(o) {
          return { value: o, configurable: !1, writable: !1, enumerable: !1 };
        }
        function gt(o, c, v) {
          return c === -1
            ? null
            : c >= o.i
            ? o.g
              ? o.g[c]
              : void 0
            : (v === void 0 ? 0 : v) && o.g && ((v = o.g[c]), v != null)
            ? v
            : o.m[c + o.h];
        }
        function Be(o, c, v, w) {
          (w = w === void 0 ? !1 : w),
            Es(o),
            c < o.i && !w ? (o.m[c + o.h] = v) : ((o.g || (o.g = o.m[o.i + o.h] = {}))[c] = v);
        }
        function As(o, c, v, w) {
          (v = v === void 0 ? !0 : v), (w = w === void 0 ? !1 : w);
          var E = gt(o, c, w);
          return (
            E == null && (E = Aa),
            K1(o.m)
              ? v && (Ar(E), Object.freeze(E))
              : (E === Aa || K1(E)) && ((E = W1(E.slice())), Be(o, c, E, w)),
            E
          );
        }
        function xt(o, c, v) {
          return (o = gt(o, c)), (o = o == null ? o : +o), o ?? (v === void 0 ? 0 : v);
        }
        function ka(o, c, v, w) {
          o.j || (o.j = {});
          var E = K1(o.m),
            I = o.j[v];
          if (!I) {
            (w = As(o, v, !0, w === void 0 ? !1 : w)), (I = []), (E = E || K1(w));
            for (var k = 0; k < w.length; k++) (I[k] = new c(w[k])), E && Ar(I[k].m);
            E && (Ar(I), Object.freeze(I)), (o.j[v] = I);
          }
          return I;
        }
        function ks(o, c, v, w, E) {
          var I = I === void 0 ? !1 : I;
          return (
            Es(o),
            (I = ka(o, v, c, I)),
            (v = w || new v()),
            (o = As(o, c)),
            E != null ? (I.splice(E, 0, v), o.splice(E, 0, v.m)) : (I.push(v), o.push(v.m)),
            v
          );
        }
        function $s(o, c) {
          return (o = gt(o, c)), o ?? 0;
        }
        function Is(o, c) {
          return (o = gt(o, c)), o ?? '';
        }
        function co(o) {
          switch (typeof o) {
            case 'number':
              return isFinite(o) ? o : String(o);
            case 'object':
              if (o && !Array.isArray(o)) {
                if (H1(o)) return ke(o);
                if (o instanceof Ta) {
                  var c = o.L;
                  return (
                    (c =
                      c == null || typeof c == 'string'
                        ? c
                        : Sa && c instanceof Uint8Array
                        ? ke(c)
                        : null),
                    (o.L = c) || ''
                  );
                }
              }
          }
          return o;
        }
        function Os(o) {
          var c = ho;
          return (c = c === void 0 ? fo : c), Cs(o, c);
        }
        function Vs(o, c) {
          if (o != null) {
            if (Array.isArray(o)) o = Cs(o, c);
            else if (Ts(o)) {
              var v = {},
                w;
              for (w in o) v[w] = Vs(o[w], c);
              o = v;
            } else o = c(o);
            return o;
          }
        }
        function Cs(o, c) {
          for (var v = o.slice(), w = 0; w < v.length; w++) v[w] = Vs(v[w], c);
          return Array.isArray(o) && Ss(o) & 1 && W1(v), v;
        }
        function ho(o) {
          return o && typeof o == 'object' && o.toJSON
            ? o.toJSON()
            : ((o = co(o)), Array.isArray(o) ? Os(o) : o);
        }
        function fo(o) {
          return H1(o) ? new Uint8Array(o) : o;
        }
        function $a(o, c, v) {
          o || (o = Fs), (Fs = null);
          var w = this.constructor.h;
          o || (o = w ? [w] : []),
            (this.h = (w ? 0 : -1) - (this.constructor.g || 0)),
            (this.j = void 0),
            (this.m = o);
          e: {
            if (((w = this.m.length), (o = w - 1), w && ((w = this.m[o]), Ts(w)))) {
              (this.i = o - this.h), (this.g = w);
              break e;
            }
            c !== void 0 && -1 < c
              ? ((this.i = Math.max(c, o + 1 - this.h)), (this.g = void 0))
              : (this.i = Number.MAX_VALUE);
          }
          if (v)
            for (c = 0; c < v.length; c++)
              if (((o = v[c]), o < this.i))
                (o += this.h), (w = this.m[o]) ? Array.isArray(w) && W1(w) : (this.m[o] = Aa);
              else {
                w = this.g || (this.g = this.m[this.i + this.h] = {});
                var E = w[o];
                E ? Array.isArray(E) && W1(E) : (w[o] = Aa);
              }
        }
        ($a.prototype.toJSON = function () {
          return Os(this.m);
        }),
          ($a.prototype.toString = function () {
            return this.m.toString();
          });
        var Fs;
        function Ia() {
          $a.apply(this, arguments);
        }
        if ((T(Ia, $a), Ds)) {
          var Bs = {};
          Object.defineProperties(
            Ia,
            ((Bs[Symbol.hasInstance] = xs(function () {
              throw Error('Cannot perform instanceof checks for MutableMessage');
            })),
            Bs)
          );
        }
        function Ps(o, c, v) {
          if (v) {
            var w = {},
              E;
            for (E in v) {
              var I = v[E],
                k = I.ha;
              k ||
                ((w.F = I.la || I.fa.P),
                I.aa
                  ? ((w.U = zs(I.aa)),
                    (k = (function (V) {
                      return function (P, W, ee) {
                        return V.F(P, W, ee, V.U);
                      };
                    })(w)))
                  : I.ca
                  ? ((w.T = js(I.X.g, I.ca)),
                    (k = (function (V) {
                      return function (P, W, ee) {
                        return V.F(P, W, ee, V.T);
                      };
                    })(w)))
                  : (k = w.F),
                (I.ha = k)),
                k(c, o, I.X),
                (w = { F: w.F, U: w.U, T: w.T });
            }
          }
          uo(c, o);
        }
        var Oa = Symbol();
        function Rs(o, c, v) {
          return (
            o[Oa] ||
            (o[Oa] = function (w, E) {
              return c(w, E, v);
            })
          );
        }
        function Ls(o) {
          var c = o[Oa];
          if (!c) {
            var v = Ws(o);
            (c = function (w, E) {
              return Ks(w, E, v);
            }),
              (o[Oa] = c);
          }
          return c;
        }
        function vo(o) {
          var c = o.aa;
          if (c) return Ls(c);
          if ((c = o.ka)) return Rs(o.X.g, c, o.ca);
        }
        function go(o) {
          var c = vo(o),
            v = o.X,
            w = o.fa.O;
          return c
            ? function (E, I) {
                return w(E, I, v, c);
              }
            : function (E, I) {
                return w(E, I, v);
              };
        }
        function Us(o, c, v, w, E, I) {
          o = o();
          var k = 0;
          for (o.length && typeof o[0] != 'number' && (v(c, o[0]), k++); k < o.length; ) {
            v = o[k++];
            for (var V = k + 1; V < o.length && typeof o[V] != 'number'; ) V++;
            var P = o[k++];
            switch (((V -= k), V)) {
              case 0:
                w(c, v, P);
                break;
              case 1:
                w(c, v, P, o[k++]);
                break;
              case 2:
                E(c, v, P, o[k++], o[k++]);
                break;
              case 3:
                V = o[k++];
                var W = o[k++],
                  ee = o[k++];
                Array.isArray(ee) ? E(c, v, P, V, W, ee) : I(c, v, P, V, W, ee);
                break;
              case 4:
                I(c, v, P, o[k++], o[k++], o[k++], o[k++]);
                break;
              default:
                throw Error('unexpected number of binary field arguments: ' + V);
            }
          }
          return c;
        }
        var Va = Symbol();
        function zs(o) {
          var c = o[Va];
          if (!c) {
            var v = qs(o);
            (c = function (w, E) {
              return Gs(w, E, v);
            }),
              (o[Va] = c);
          }
          return c;
        }
        function js(o, c) {
          var v = o[Va];
          return (
            v ||
              ((v = function (w, E) {
                return Ps(w, E, c);
              }),
              (o[Va] = v)),
            v
          );
        }
        var Ms = Symbol();
        function yo(o, c) {
          o.push(c);
        }
        function wo(o, c, v) {
          o.push(c, v.P);
        }
        function bo(o, c, v, w, E) {
          var I = zs(E),
            k = v.P;
          o.push(c, function (V, P, W) {
            return k(V, P, W, w, I);
          });
        }
        function No(o, c, v, w, E, I) {
          var k = js(w, I),
            V = v.P;
          o.push(c, function (P, W, ee) {
            return V(P, W, ee, w, k);
          });
        }
        function qs(o) {
          var c = o[Ms];
          return c || Us(o, (o[Ms] = []), yo, wo, bo, No);
        }
        var Hs = Symbol();
        function _o(o, c) {
          o[0] = c;
        }
        function So(o, c, v, w) {
          var E = v.O;
          o[c] = w
            ? function (I, k, V) {
                return E(I, k, V, w);
              }
            : E;
        }
        function To(o, c, v, w, E, I) {
          var k = v.O,
            V = Ls(E);
          o[c] = function (P, W, ee) {
            return k(P, W, ee, w, V, I);
          };
        }
        function Eo(o, c, v, w, E, I, k) {
          var V = v.O,
            P = Rs(w, E, I);
          o[c] = function (W, ee, se) {
            return V(W, ee, se, w, P, k);
          };
        }
        function Ws(o) {
          var c = o[Hs];
          return c || Us(o, (o[Hs] = {}), _o, So, To, Eo);
        }
        function Ks(o, c, v) {
          for (; Ns(c) && c.h != 4; ) {
            var w = c.i,
              E = v[w];
            if (!E) {
              var I = v[0];
              I && (I = I[w]) && (E = v[w] = go(I));
            }
            if ((!E || !E(c, o, w)) && ((E = c), (w = o), (I = E.j), Ea(E), !E.W)) {
              var k = E.g.h;
              (E = E.g.g),
                (E =
                  I === E
                    ? Ne || (Ne = new Uint8Array(0))
                    : xr
                    ? k.slice(I, E)
                    : new Uint8Array(k.subarray(I, E))),
                (I = w.ba) ? I.push(E) : (w.ba = [E]);
            }
          }
          return o;
        }
        function kr(o, c, v) {
          if (Da.length) {
            var w = Da.pop();
            o && (me(w.g, o), (w.i = -1), (w.h = -1)), (o = w);
          } else o = new bs(o);
          try {
            return Ks(new c(), o, Ws(v));
          } finally {
            (c = o.g),
              (c.h = null),
              (c.j = 0),
              (c.i = 0),
              (c.g = 0),
              (c.v = !1),
              (o.i = -1),
              (o.h = -1),
              100 > Da.length && Da.push(o);
          }
        }
        function Gs(o, c, v) {
          for (var w = v.length, E = w % 2 == 1, I = E ? 1 : 0; I < w; I += 2)
            (0, v[I + 1])(c, o, v[I]);
          Ps(o, c, E ? v[0] : void 0);
        }
        function $r(o, c) {
          var v = new mo();
          Gs(o, v, qs(c)), E1(v, v.g.end()), (o = new Uint8Array(v.h)), (c = v.i);
          for (var w = c.length, E = 0, I = 0; I < w; I++) {
            var k = c[I];
            o.set(k, E), (E += k.length);
          }
          return (v.i = [o]), o;
        }
        function G1(o, c) {
          return { O: o, P: c };
        }
        var yt = G1(
            function (o, c, v) {
              if (o.h !== 5) return !1;
              o = o.g;
              var w = o.h[o.g],
                E = o.h[o.g + 1],
                I = o.h[o.g + 2],
                k = o.h[o.g + 3];
              return (
                (o.g += 4),
                he(o),
                (E = ((w << 0) | (E << 8) | (I << 16) | (k << 24)) >>> 0),
                (o = 2 * (E >> 31) + 1),
                (w = (E >>> 23) & 255),
                (E &= 8388607),
                Be(
                  c,
                  v,
                  w == 255
                    ? E
                      ? NaN
                      : (1 / 0) * o
                    : w == 0
                    ? o * Math.pow(2, -149) * E
                    : o * Math.pow(2, w - 150) * (E + Math.pow(2, 23))
                ),
                !0
              );
            },
            function (o, c, v) {
              if (((c = gt(c, v)), c != null)) {
                i1(o.g, 8 * v + 5), (o = o.g);
                var w = c;
                (w = (v = 0 > w ? 1 : 0) ? -w : w),
                  w === 0
                    ? 0 < 1 / w
                      ? (vt = D = 0)
                      : ((D = 0), (vt = 2147483648))
                    : isNaN(w)
                    ? ((D = 0), (vt = 2147483647))
                    : 34028234663852886e22 < w
                    ? ((D = 0), (vt = ((v << 31) | 2139095040) >>> 0))
                    : 11754943508222875e-54 > w
                    ? ((w = Math.round(w / Math.pow(2, -149))),
                      (D = 0),
                      (vt = ((v << 31) | w) >>> 0))
                    : ((c = Math.floor(Math.log(w) / Math.LN2)),
                      (w *= Math.pow(2, -c)),
                      (w = Math.round(8388608 * w)),
                      16777216 <= w && ++c,
                      (D = 0),
                      (vt = ((v << 31) | ((c + 127) << 23) | (w & 8388607)) >>> 0)),
                  (v = vt),
                  o.g.push((v >>> 0) & 255),
                  o.g.push((v >>> 8) & 255),
                  o.g.push((v >>> 16) & 255),
                  o.g.push((v >>> 24) & 255);
              }
            }
          ),
          Do = G1(
            function (o, c, v) {
              if (o.h !== 0) return !1;
              for (var w = o.g, E = 128, I = 0, k = (o = 0); 4 > k && 128 <= E; k++)
                (E = w.h[w.g++]), he(w), (I |= (E & 127) << (7 * k));
              if (
                (128 <= E &&
                  ((E = w.h[w.g++]), he(w), (I |= (E & 127) << 28), (o |= (E & 127) >> 4)),
                128 <= E)
              )
                for (k = 0; 5 > k && 128 <= E; k++)
                  (E = w.h[w.g++]), he(w), (o |= (E & 127) << (7 * k + 3));
              if (128 > E)
                (w = I >>> 0),
                  (E = o >>> 0),
                  (o = E & 2147483648) &&
                    ((w = (~w + 1) >>> 0), (E = ~E >>> 0), w == 0 && (E = (E + 1) >>> 0)),
                  (w = 4294967296 * E + (w >>> 0));
              else throw H();
              return Be(c, v, o ? -w : w), !0;
            },
            function (o, c, v) {
              if (((c = gt(c, v)), c != null && c != null)) {
                i1(o.g, 8 * v), (o = o.g);
                var w = c;
                for (
                  v = 0 > w,
                    w = Math.abs(w),
                    c = w >>> 0,
                    w = Math.floor((w - c) / 4294967296),
                    w >>>= 0,
                    v &&
                      ((w = ~w >>> 0),
                      (c = (~c >>> 0) + 1),
                      4294967295 < c && ((c = 0), w++, 4294967295 < w && (w = 0))),
                    vt = c,
                    D = w,
                    v = vt,
                    c = D;
                  0 < c || 127 < v;

                )
                  o.g.push((v & 127) | 128), (v = ((v >>> 7) | (c << 25)) >>> 0), (c >>>= 7);
                o.g.push(v);
              }
            }
          ),
          xo = G1(
            function (o, c, v) {
              return o.h !== 0 ? !1 : (Be(c, v, tt(o.g)), !0);
            },
            function (o, c, v) {
              if (((c = gt(c, v)), c != null && c != null))
                if ((i1(o.g, 8 * v), (o = o.g), (v = c), 0 <= v)) i1(o, v);
                else {
                  for (c = 0; 9 > c; c++) o.g.push((v & 127) | 128), (v >>= 7);
                  o.g.push(1);
                }
            }
          ),
          Xs = G1(
            function (o, c, v) {
              if (o.h !== 2) return !1;
              var w = tt(o.g) >>> 0;
              o = o.g;
              var E = o.g;
              (o.g += w), he(o), (o = o.h);
              var I;
              if (De)
                (I = ye) || (I = ye = new TextDecoder('utf-8', { fatal: !0 })),
                  (I = I.decode(o.subarray(E, E + w)));
              else {
                w = E + w;
                for (var k = [], V = null, P, W, ee; E < w; )
                  (P = o[E++]),
                    128 > P
                      ? k.push(P)
                      : 224 > P
                      ? E >= w
                        ? ie()
                        : ((W = o[E++]),
                          194 > P || (W & 192) != 128
                            ? (E--, ie())
                            : k.push(((P & 31) << 6) | (W & 63)))
                      : 240 > P
                      ? E >= w - 1
                        ? ie()
                        : ((W = o[E++]),
                          (W & 192) != 128 ||
                          (P === 224 && 160 > W) ||
                          (P === 237 && 160 <= W) ||
                          ((I = o[E++]) & 192) != 128
                            ? (E--, ie())
                            : k.push(((P & 15) << 12) | ((W & 63) << 6) | (I & 63)))
                      : 244 >= P
                      ? E >= w - 2
                        ? ie()
                        : ((W = o[E++]),
                          (W & 192) != 128 ||
                          ((P << 28) + (W - 144)) >> 30 != 0 ||
                          ((I = o[E++]) & 192) != 128 ||
                          ((ee = o[E++]) & 192) != 128
                            ? (E--, ie())
                            : ((P =
                                ((P & 7) << 18) | ((W & 63) << 12) | ((I & 63) << 6) | (ee & 63)),
                              (P -= 65536),
                              k.push(((P >> 10) & 1023) + 55296, (P & 1023) + 56320)))
                      : ie(),
                    8192 <= k.length && ((V = ne(V, k)), (k.length = 0));
                I = ne(V, k);
              }
              return Be(c, v, I), !0;
            },
            function (o, c, v) {
              if (((c = gt(c, v)), c != null)) {
                var w = !1;
                if (((w = w === void 0 ? !1 : w), Fe)) {
                  if (
                    w &&
                    /(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/.test(
                      c
                    )
                  )
                    throw Error('Found an unpaired surrogate');
                  c = (Ce || (Ce = new TextEncoder())).encode(c);
                } else {
                  for (var E = 0, I = new Uint8Array(3 * c.length), k = 0; k < c.length; k++) {
                    var V = c.charCodeAt(k);
                    if (128 > V) I[E++] = V;
                    else {
                      if (2048 > V) I[E++] = (V >> 6) | 192;
                      else {
                        if (55296 <= V && 57343 >= V) {
                          if (56319 >= V && k < c.length) {
                            var P = c.charCodeAt(++k);
                            if (56320 <= P && 57343 >= P) {
                              (V = 1024 * (V - 55296) + P - 56320 + 65536),
                                (I[E++] = (V >> 18) | 240),
                                (I[E++] = ((V >> 12) & 63) | 128),
                                (I[E++] = ((V >> 6) & 63) | 128),
                                (I[E++] = (V & 63) | 128);
                              continue;
                            } else k--;
                          }
                          if (w) throw Error('Found an unpaired surrogate');
                          V = 65533;
                        }
                        (I[E++] = (V >> 12) | 224), (I[E++] = ((V >> 6) & 63) | 128);
                      }
                      I[E++] = (V & 63) | 128;
                    }
                  }
                  c = I.subarray(0, E);
                }
                i1(o.g, 8 * v + 2), i1(o.g, c.length), E1(o, o.g.end()), E1(o, c);
              }
            }
          ),
          Ys = G1(
            function (o, c, v, w, E) {
              if (o.h !== 2) return !1;
              (c = ks(c, v, w)), (v = o.g.i), (w = tt(o.g) >>> 0);
              var I = o.g.g + w,
                k = I - v;
              if ((0 >= k && ((o.g.i = I), E(c, o), (k = I - o.g.g)), k))
                throw Error(
                  'Message parsing ended unexpectedly. Expected to read ' +
                    (w +
                      ' bytes, instead read ' +
                      (w - k) +
                      ' bytes, either the data ended unexpectedly or the message misreported its own length')
                );
              return (o.g.g = I), (o.g.i = v), !0;
            },
            function (o, c, v, w, E) {
              if (((c = ka(c, w, v)), c != null))
                for (w = 0; w < c.length; w++) {
                  var I = o;
                  i1(I.g, 8 * v + 2);
                  var k = I.g.end();
                  E1(I, k), k.push(I.h), (I = k), E(c[w], o), (k = o);
                  var V = I.pop();
                  for (V = k.h + k.g.length() - V; 127 < V; )
                    I.push((V & 127) | 128), (V >>>= 7), k.h++;
                  I.push(V), k.h++;
                }
            }
          );
        function dt() {
          Ia.apply(this, arguments);
        }
        if ((T(dt, Ia), Ds)) {
          var Js = {};
          Object.defineProperties(
            dt,
            ((Js[Symbol.hasInstance] = xs(Object[Symbol.hasInstance])), Js)
          );
        }
        function X1(o) {
          dt.call(this, o);
        }
        T(X1, dt);
        function Zs() {
          return [1, xo, 2, yt, 3, Xs, 4, Xs];
        }
        function Ir(o) {
          dt.call(this, o, -1, ko);
        }
        T(Ir, dt),
          (Ir.prototype.addClassification = function (o, c) {
            return ks(this, 1, X1, o, c), this;
          });
        function Ao() {
          return [1, Ys, X1, Zs];
        }
        var ko = [1];
        function Ca(o) {
          dt.call(this, o);
        }
        T(Ca, dt);
        function Qs() {
          return [1, yt, 2, yt, 3, yt, 4, yt, 5, yt];
        }
        function ep(o) {
          dt.call(this, o, -1, Io);
        }
        T(ep, dt);
        function $o() {
          return [1, Ys, Ca, Qs];
        }
        var Io = [1];
        function Or(o) {
          dt.call(this, o);
        }
        T(Or, dt);
        function tp() {
          return [1, yt, 2, yt, 3, yt, 4, yt, 5, yt, 6, Do];
        }
        var ap = [
            [61, 146],
            [146, 91],
            [91, 181],
            [181, 84],
            [84, 17],
            [17, 314],
            [314, 405],
            [405, 321],
            [321, 375],
            [375, 291],
            [61, 185],
            [185, 40],
            [40, 39],
            [39, 37],
            [37, 0],
            [0, 267],
            [267, 269],
            [269, 270],
            [270, 409],
            [409, 291],
            [78, 95],
            [95, 88],
            [88, 178],
            [178, 87],
            [87, 14],
            [14, 317],
            [317, 402],
            [402, 318],
            [318, 324],
            [324, 308],
            [78, 191],
            [191, 80],
            [80, 81],
            [81, 82],
            [82, 13],
            [13, 312],
            [312, 311],
            [311, 310],
            [310, 415],
            [415, 308]
          ],
          rp = [
            [263, 249],
            [249, 390],
            [390, 373],
            [373, 374],
            [374, 380],
            [380, 381],
            [381, 382],
            [382, 362],
            [263, 466],
            [466, 388],
            [388, 387],
            [387, 386],
            [386, 385],
            [385, 384],
            [384, 398],
            [398, 362]
          ],
          np = [
            [276, 283],
            [283, 282],
            [282, 295],
            [295, 285],
            [300, 293],
            [293, 334],
            [334, 296],
            [296, 336]
          ],
          sp = [
            [33, 7],
            [7, 163],
            [163, 144],
            [144, 145],
            [145, 153],
            [153, 154],
            [154, 155],
            [155, 133],
            [33, 246],
            [246, 161],
            [161, 160],
            [160, 159],
            [159, 158],
            [158, 157],
            [157, 173],
            [173, 133]
          ],
          pp = [
            [46, 53],
            [53, 52],
            [52, 65],
            [65, 55],
            [70, 63],
            [63, 105],
            [105, 66],
            [66, 107]
          ],
          ip = [
            [10, 338],
            [338, 297],
            [297, 332],
            [332, 284],
            [284, 251],
            [251, 389],
            [389, 356],
            [356, 454],
            [454, 323],
            [323, 361],
            [361, 288],
            [288, 397],
            [397, 365],
            [365, 379],
            [379, 378],
            [378, 400],
            [400, 377],
            [377, 152],
            [152, 148],
            [148, 176],
            [176, 149],
            [149, 150],
            [150, 136],
            [136, 172],
            [172, 58],
            [58, 132],
            [132, 93],
            [93, 234],
            [234, 127],
            [127, 162],
            [162, 21],
            [21, 54],
            [54, 103],
            [103, 67],
            [67, 109],
            [109, 10]
          ],
          Oo = [].concat(l(ap), l(rp), l(np), l(sp), l(pp), l(ip));
        function op(o, c, v) {
          if (
            ((v = o.createShader(v === 0 ? o.VERTEX_SHADER : o.FRAGMENT_SHADER)),
            o.shaderSource(v, c),
            o.compileShader(v),
            !o.getShaderParameter(v, o.COMPILE_STATUS))
          )
            throw Error(
              `Could not compile WebGL shader.

` + o.getShaderInfoLog(v)
            );
          return v;
        }
        function Vo(o) {
          return ka(o, X1, 1).map(function (c) {
            return {
              index: $s(c, 1),
              ga: xt(c, 2),
              label: gt(c, 3) != null ? Is(c, 3) : void 0,
              displayName: gt(c, 4) != null ? Is(c, 4) : void 0
            };
          });
        }
        function Co(o) {
          return {
            x: xt(o, 1),
            y: xt(o, 2),
            z: xt(o, 3),
            visibility: gt(o, 4) != null ? xt(o, 4) : void 0
          };
        }
        function Vr(o, c) {
          (this.h = o), (this.g = c), (this.l = 0);
        }
        function dp(o, c, v) {
          return (
            Fo(o, c),
            typeof o.g.canvas.transferToImageBitmap == 'function'
              ? Promise.resolve(o.g.canvas.transferToImageBitmap())
              : v
              ? Promise.resolve(o.g.canvas)
              : typeof createImageBitmap == 'function'
              ? createImageBitmap(o.g.canvas)
              : (o.i === void 0 && (o.i = document.createElement('canvas')),
                new Promise(function (w) {
                  (o.i.height = o.g.canvas.height),
                    (o.i.width = o.g.canvas.width),
                    o.i
                      .getContext('2d', {})
                      .drawImage(o.g.canvas, 0, 0, o.g.canvas.width, o.g.canvas.height),
                    w(o.i);
                }))
          );
        }
        function Fo(o, c) {
          var v = o.g;
          if (o.o === void 0) {
            var w = op(
                v,
                `
  attribute vec2 aVertex;
  attribute vec2 aTex;
  varying vec2 vTex;
  void main(void) {
    gl_Position = vec4(aVertex, 0.0, 1.0);
    vTex = aTex;
  }`,
                0
              ),
              E = op(
                v,
                `
  precision mediump float;
  varying vec2 vTex;
  uniform sampler2D sampler0;
  void main(){
    gl_FragColor = texture2D(sampler0, vTex);
  }`,
                1
              ),
              I = v.createProgram();
            if (
              (v.attachShader(I, w),
              v.attachShader(I, E),
              v.linkProgram(I),
              !v.getProgramParameter(I, v.LINK_STATUS))
            )
              throw Error(
                `Could not compile WebGL program.

` + v.getProgramInfoLog(I)
              );
            (w = o.o = I),
              v.useProgram(w),
              (E = v.getUniformLocation(w, 'sampler0')),
              (o.j = {
                K: v.getAttribLocation(w, 'aVertex'),
                J: v.getAttribLocation(w, 'aTex'),
                ma: E
              }),
              (o.u = v.createBuffer()),
              v.bindBuffer(v.ARRAY_BUFFER, o.u),
              v.enableVertexAttribArray(o.j.K),
              v.vertexAttribPointer(o.j.K, 2, v.FLOAT, !1, 0, 0),
              v.bufferData(
                v.ARRAY_BUFFER,
                new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]),
                v.STATIC_DRAW
              ),
              v.bindBuffer(v.ARRAY_BUFFER, null),
              (o.s = v.createBuffer()),
              v.bindBuffer(v.ARRAY_BUFFER, o.s),
              v.enableVertexAttribArray(o.j.J),
              v.vertexAttribPointer(o.j.J, 2, v.FLOAT, !1, 0, 0),
              v.bufferData(
                v.ARRAY_BUFFER,
                new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]),
                v.STATIC_DRAW
              ),
              v.bindBuffer(v.ARRAY_BUFFER, null),
              v.uniform1i(E, 0);
          }
          (w = o.j),
            v.useProgram(o.o),
            (v.canvas.width = c.width),
            (v.canvas.height = c.height),
            v.viewport(0, 0, c.width, c.height),
            v.activeTexture(v.TEXTURE0),
            o.h.bindTexture2d(c.glName),
            v.enableVertexAttribArray(w.K),
            v.bindBuffer(v.ARRAY_BUFFER, o.u),
            v.vertexAttribPointer(w.K, 2, v.FLOAT, !1, 0, 0),
            v.enableVertexAttribArray(w.J),
            v.bindBuffer(v.ARRAY_BUFFER, o.s),
            v.vertexAttribPointer(w.J, 2, v.FLOAT, !1, 0, 0),
            v.bindFramebuffer(v.DRAW_FRAMEBUFFER ? v.DRAW_FRAMEBUFFER : v.FRAMEBUFFER, null),
            v.clearColor(0, 0, 0, 0),
            v.clear(v.COLOR_BUFFER_BIT),
            v.colorMask(!0, !0, !0, !0),
            v.drawArrays(v.TRIANGLE_FAN, 0, 4),
            v.disableVertexAttribArray(w.K),
            v.disableVertexAttribArray(w.J),
            v.bindBuffer(v.ARRAY_BUFFER, null),
            o.h.bindTexture2d(0);
        }
        function Bo(o) {
          this.g = o;
        }
        var Po = new Uint8Array([
          0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253,
          15, 26, 11
        ]);
        function Ro(o, c) {
          return c + o;
        }
        function lp(o, c) {
          window[o] = c;
        }
        function Lo(o) {
          var c = document.createElement('script');
          return (
            c.setAttribute('src', o),
            c.setAttribute('crossorigin', 'anonymous'),
            new Promise(function (v) {
              c.addEventListener(
                'load',
                function () {
                  v();
                },
                !1
              ),
                c.addEventListener(
                  'error',
                  function () {
                    v();
                  },
                  !1
                ),
                document.body.appendChild(c);
            })
          );
        }
        function Uo() {
          return F(function (o) {
            switch (o.g) {
              case 1:
                return (o.o = 2), C(o, WebAssembly.instantiate(Po), 4);
              case 4:
                (o.g = 3), (o.o = 0);
                break;
              case 2:
                return (o.o = 0), (o.j = null), o.return(!1);
              case 3:
                return o.return(!0);
            }
          });
        }
        function Cr(o) {
          if (
            ((this.g = o),
            (this.listeners = {}),
            (this.j = {}),
            (this.H = {}),
            (this.o = {}),
            (this.u = {}),
            (this.I = this.s = this.Z = !0),
            (this.D = Promise.resolve()),
            (this.Y = ''),
            (this.C = {}),
            (this.locateFile = (o && o.locateFile) || Ro),
            typeof window == 'object')
          )
            var c =
              window.location.pathname
                .toString()
                .substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/';
          else if (typeof location != 'undefined')
            c =
              location.pathname
                .toString()
                .substring(0, location.pathname.toString().lastIndexOf('/')) + '/';
          else throw Error('solutions can only be loaded on a web page or in a web worker');
          if (((this.$ = c), o.options)) {
            c = d(Object.keys(o.options));
            for (var v = c.next(); !v.done; v = c.next()) {
              v = v.value;
              var w = o.options[v].default;
              w !== void 0 && (this.j[v] = typeof w == 'function' ? w() : w);
            }
          }
        }
        (t = Cr.prototype),
          (t.close = function () {
            return this.i && this.i.delete(), Promise.resolve();
          });
        function zo(o) {
          var c, v, w, E, I, k, V, P, W, ee, se;
          return F(function (pe) {
            switch (pe.g) {
              case 1:
                return o.Z
                  ? ((c =
                      o.g.files === void 0
                        ? []
                        : typeof o.g.files == 'function'
                        ? o.g.files(o.j)
                        : o.g.files),
                    C(pe, Uo(), 2))
                  : pe.return();
              case 2:
                if (((v = pe.h), typeof window == 'object'))
                  return (
                    lp('createMediapipeSolutionsWasm', { locateFile: o.locateFile }),
                    lp('createMediapipeSolutionsPackedAssets', { locateFile: o.locateFile }),
                    (k = c.filter(function (te) {
                      return te.data !== void 0;
                    })),
                    (V = c.filter(function (te) {
                      return te.data === void 0;
                    })),
                    (P = Promise.all(
                      k.map(function (te) {
                        var oe = Fa(o, te.url);
                        if (te.path !== void 0) {
                          var ve = te.path;
                          oe = oe.then(function (Ae) {
                            return o.overrideFile(ve, Ae), Promise.resolve(Ae);
                          });
                        }
                        return oe;
                      })
                    )),
                    (W = Promise.all(
                      V.map(function (te) {
                        return te.simd === void 0 || (te.simd && v) || (!te.simd && !v)
                          ? Lo(o.locateFile(te.url, o.$))
                          : Promise.resolve();
                      })
                    ).then(function () {
                      var te, oe, ve;
                      return F(function (Ae) {
                        if (Ae.g == 1)
                          return (
                            (te = window.createMediapipeSolutionsWasm),
                            (oe = window.createMediapipeSolutionsPackedAssets),
                            (ve = o),
                            C(Ae, te(oe), 2)
                          );
                        (ve.h = Ae.h), (Ae.g = 0);
                      });
                    })),
                    (ee = (function () {
                      return F(function (te) {
                        return (
                          o.g.graph && o.g.graph.url
                            ? (te = C(te, Fa(o, o.g.graph.url), 0))
                            : ((te.g = 0), (te = void 0)),
                          te
                        );
                      });
                    })()),
                    C(pe, Promise.all([W, P, ee]), 7)
                  );
                if (typeof importScripts != 'function')
                  throw Error('solutions can only be loaded on a web page or in a web worker');
                return (
                  (w = c
                    .filter(function (te) {
                      return te.simd === void 0 || (te.simd && v) || (!te.simd && !v);
                    })
                    .map(function (te) {
                      return o.locateFile(te.url, o.$);
                    })),
                  importScripts.apply(null, l(w)),
                  (E = o),
                  C(pe, createMediapipeSolutionsWasm(Module), 6)
                );
              case 6:
                (E.h = pe.h),
                  (o.l = new OffscreenCanvas(1, 1)),
                  (o.h.canvas = o.l),
                  (I = o.h.GL.createContext(o.l, {
                    antialias: !1,
                    alpha: !1,
                    ja: typeof WebGL2RenderingContext != 'undefined' ? 2 : 1
                  })),
                  o.h.GL.makeContextCurrent(I),
                  (pe.g = 4);
                break;
              case 7:
                if (
                  ((o.l = document.createElement('canvas')),
                  (se = o.l.getContext('webgl2', {})),
                  !se && ((se = o.l.getContext('webgl', {})), !se))
                )
                  return (
                    alert('Failed to create WebGL canvas context when passing video frame.'),
                    pe.return()
                  );
                (o.G = se), (o.h.canvas = o.l), o.h.createContext(o.l, !0, !0, {});
              case 4:
                (o.i = new o.h.SolutionWasm()), (o.Z = !1), (pe.g = 0);
            }
          });
        }
        function jo(o) {
          var c, v, w, E, I, k, V, P;
          return F(function (W) {
            if (W.g == 1) {
              if (o.g.graph && o.g.graph.url && o.Y === o.g.graph.url) return W.return();
              if (((o.s = !0), !o.g.graph || !o.g.graph.url)) {
                W.g = 2;
                return;
              }
              return (o.Y = o.g.graph.url), C(W, Fa(o, o.g.graph.url), 3);
            }
            for (
              W.g != 2 && ((c = W.h), o.i.loadGraph(c)), v = d(Object.keys(o.C)), w = v.next();
              !w.done;
              w = v.next()
            )
              (E = w.value), o.i.overrideFile(E, o.C[E]);
            if (((o.C = {}), o.g.listeners))
              for (I = d(o.g.listeners), k = I.next(); !k.done; k = I.next())
                (V = k.value), Wo(o, V);
            (P = o.j), (o.j = {}), o.setOptions(P), (W.g = 0);
          });
        }
        (t.reset = function () {
          var o = this;
          return F(function (c) {
            o.i && (o.i.reset(), (o.o = {}), (o.u = {})), (c.g = 0);
          });
        }),
          (t.setOptions = function (o, c) {
            var v = this;
            if ((c = c || this.g.options)) {
              for (
                var w = [], E = [], I = {}, k = d(Object.keys(o)), V = k.next();
                !V.done;
                I = { R: I.R, S: I.S }, V = k.next()
              ) {
                var P = V.value;
                (P in this.j && this.j[P] === o[P]) ||
                  ((this.j[P] = o[P]),
                  (V = c[P]),
                  V !== void 0 &&
                    (V.onChange &&
                      ((I.R = V.onChange),
                      (I.S = o[P]),
                      w.push(
                        (function (W) {
                          return function () {
                            var ee;
                            return F(function (se) {
                              if (se.g == 1) return C(se, W.R(W.S), 2);
                              (ee = se.h), ee === !0 && (v.s = !0), (se.g = 0);
                            });
                          };
                        })(I)
                      )),
                    V.graphOptionXref &&
                      ((P = {
                        valueNumber: V.type === 1 ? o[P] : 0,
                        valueBoolean: V.type === 0 ? o[P] : !1,
                        valueString: V.type === 2 ? o[P] : ''
                      }),
                      (V = Object.assign(
                        Object.assign(
                          Object.assign({}, { calculatorName: '', calculatorIndex: 0 }),
                          V.graphOptionXref
                        ),
                        P
                      )),
                      E.push(V))));
              }
              (w.length !== 0 || E.length !== 0) &&
                ((this.s = !0),
                (this.B = (this.B === void 0 ? [] : this.B).concat(E)),
                (this.A = (this.A === void 0 ? [] : this.A).concat(w)));
            }
          });
        function Mo(o) {
          var c, v, w, E, I, k, V;
          return F(function (P) {
            switch (P.g) {
              case 1:
                if (!o.s) return P.return();
                if (!o.A) {
                  P.g = 2;
                  break;
                }
                (c = d(o.A)), (v = c.next());
              case 3:
                if (v.done) {
                  P.g = 5;
                  break;
                }
                return (w = v.value), C(P, w(), 4);
              case 4:
                (v = c.next()), (P.g = 3);
                break;
              case 5:
                o.A = void 0;
              case 2:
                if (o.B) {
                  for (
                    E = new o.h.GraphOptionChangeRequestList(), I = d(o.B), k = I.next();
                    !k.done;
                    k = I.next()
                  )
                    (V = k.value), E.push_back(V);
                  o.i.changeOptions(E), E.delete(), (o.B = void 0);
                }
                (o.s = !1), (P.g = 0);
            }
          });
        }
        t.initialize = function () {
          var o = this;
          return F(function (c) {
            return c.g == 1 ? C(c, zo(o), 2) : c.g != 3 ? C(c, jo(o), 3) : C(c, Mo(o), 0);
          });
        };
        function Fa(o, c) {
          var v, w;
          return F(function (E) {
            return c in o.H
              ? E.return(o.H[c])
              : ((v = o.locateFile(c, '')),
                (w = fetch(v).then(function (I) {
                  return I.arrayBuffer();
                })),
                (o.H[c] = w),
                E.return(w));
          });
        }
        (t.overrideFile = function (o, c) {
          this.i ? this.i.overrideFile(o, c) : (this.C[o] = c);
        }),
          (t.clearOverriddenFiles = function () {
            (this.C = {}), this.i && this.i.clearOverriddenFiles();
          }),
          (t.send = function (o, c) {
            var v = this,
              w,
              E,
              I,
              k,
              V,
              P,
              W,
              ee,
              se;
            return F(function (pe) {
              switch (pe.g) {
                case 1:
                  return v.g.inputs
                    ? ((w = 1e3 * (c ?? performance.now())), C(pe, v.D, 2))
                    : pe.return();
                case 2:
                  return C(pe, v.initialize(), 3);
                case 3:
                  for (
                    E = new v.h.PacketDataList(), I = d(Object.keys(o)), k = I.next();
                    !k.done;
                    k = I.next()
                  )
                    if (((V = k.value), (P = v.g.inputs[V]))) {
                      e: {
                        var te = o[V];
                        switch (P.type) {
                          case 'video':
                            var oe = v.o[P.stream];
                            if (
                              (oe || ((oe = new Vr(v.h, v.G)), (v.o[P.stream] = oe)),
                              oe.l === 0 && (oe.l = oe.h.createTexture()),
                              typeof HTMLVideoElement != 'undefined' &&
                                te instanceof HTMLVideoElement)
                            )
                              var ve = te.videoWidth,
                                Ae = te.videoHeight;
                            else
                              typeof HTMLImageElement != 'undefined' &&
                              te instanceof HTMLImageElement
                                ? ((ve = te.naturalWidth), (Ae = te.naturalHeight))
                                : ((ve = te.width), (Ae = te.height));
                            (Ae = { glName: oe.l, width: ve, height: Ae }),
                              (ve = oe.g),
                              (ve.canvas.width = Ae.width),
                              (ve.canvas.height = Ae.height),
                              ve.activeTexture(ve.TEXTURE0),
                              oe.h.bindTexture2d(oe.l),
                              ve.texImage2D(
                                ve.TEXTURE_2D,
                                0,
                                ve.RGBA,
                                ve.RGBA,
                                ve.UNSIGNED_BYTE,
                                te
                              ),
                              oe.h.bindTexture2d(0),
                              (oe = Ae);
                            break e;
                          case 'detections':
                            for (
                              oe = v.o[P.stream],
                                oe || ((oe = new Bo(v.h)), (v.o[P.stream] = oe)),
                                oe.data || (oe.data = new oe.g.DetectionListData()),
                                oe.data.reset(te.length),
                                Ae = 0;
                              Ae < te.length;
                              ++Ae
                            ) {
                              ve = te[Ae];
                              var Se = oe.data,
                                Ke = Se.setBoundingBox,
                                lt = Ae,
                                at = ve.boundingBox,
                                ge = new Or();
                              if (
                                (Be(ge, 1, at.xCenter),
                                Be(ge, 2, at.yCenter),
                                Be(ge, 3, at.height),
                                Be(ge, 4, at.width),
                                Be(ge, 5, at.rotation),
                                Be(ge, 6, at.rectId),
                                (at = $r(ge, tp)),
                                Ke.call(Se, lt, at),
                                ve.landmarks)
                              )
                                for (Se = 0; Se < ve.landmarks.length; ++Se) {
                                  ge = ve.landmarks[Se];
                                  var Pe = !!ge.visibility;
                                  (Ke = oe.data),
                                    (lt = Ke.addNormalizedLandmark),
                                    (at = Ae),
                                    (ge = Object.assign(Object.assign({}, ge), {
                                      visibility: Pe ? ge.visibility : 0
                                    })),
                                    (Pe = new Ca()),
                                    Be(Pe, 1, ge.x),
                                    Be(Pe, 2, ge.y),
                                    Be(Pe, 3, ge.z),
                                    ge.visibility && Be(Pe, 4, ge.visibility),
                                    (ge = $r(Pe, Qs)),
                                    lt.call(Ke, at, ge);
                                }
                              if (ve.V)
                                for (Se = 0; Se < ve.V.length; ++Se)
                                  (Ke = oe.data),
                                    (lt = Ke.addClassification),
                                    (at = Ae),
                                    (ge = ve.V[Se]),
                                    (Pe = new X1()),
                                    Be(Pe, 2, ge.ga),
                                    ge.index && Be(Pe, 1, ge.index),
                                    ge.label && Be(Pe, 3, ge.label),
                                    ge.displayName && Be(Pe, 4, ge.displayName),
                                    (ge = $r(Pe, Zs)),
                                    lt.call(Ke, at, ge);
                            }
                            oe = oe.data;
                            break e;
                          default:
                            oe = {};
                        }
                      }
                      switch (((W = oe), (ee = P.stream), P.type)) {
                        case 'video':
                          E.pushTexture2d(
                            Object.assign(Object.assign({}, W), { stream: ee, timestamp: w })
                          );
                          break;
                        case 'detections':
                          (se = W), (se.stream = ee), (se.timestamp = w), E.pushDetectionList(se);
                          break;
                        default:
                          throw Error("Unknown input config type: '" + P.type + "'");
                      }
                    }
                  return v.i.send(E), C(pe, v.D, 4);
                case 4:
                  E.delete(), (pe.g = 0);
              }
            });
          });
        function qo(o, c, v) {
          var w, E, I, k, V, P, W, ee, se, pe, te, oe, ve, Ae;
          return F(function (Se) {
            switch (Se.g) {
              case 1:
                if (!v) return Se.return(c);
                for (w = {}, E = 0, I = d(Object.keys(v)), k = I.next(); !k.done; k = I.next())
                  (V = k.value),
                    (P = v[V]),
                    typeof P != 'string' && P.type === 'texture' && c[P.stream] !== void 0 && ++E;
                1 < E && (o.I = !1), (W = d(Object.keys(v))), (k = W.next());
              case 2:
                if (k.done) {
                  Se.g = 4;
                  break;
                }
                if (((ee = k.value), (se = v[ee]), typeof se == 'string'))
                  return (ve = w), (Ae = ee), C(Se, Ho(o, ee, c[se]), 14);
                if (((pe = c[se.stream]), se.type === 'detection_list')) {
                  if (pe) {
                    for (
                      var Ke = pe.getRectList(),
                        lt = pe.getLandmarksList(),
                        at = pe.getClassificationsList(),
                        ge = [],
                        Pe = 0;
                      Pe < Ke.size();
                      ++Pe
                    ) {
                      var Gt = kr(Ke.get(Pe), Or, tp);
                      (Gt = {
                        boundingBox: {
                          xCenter: xt(Gt, 1),
                          yCenter: xt(Gt, 2),
                          height: xt(Gt, 3),
                          width: xt(Gt, 4),
                          rotation: xt(Gt, 5, 0),
                          rectId: $s(Gt, 6)
                        },
                        landmarks: ka(kr(lt.get(Pe), ep, $o), Ca, 1).map(Co),
                        V: Vo(kr(at.get(Pe), Ir, Ao))
                      }),
                        ge.push(Gt);
                    }
                    Ke = ge;
                  } else Ke = [];
                  (w[ee] = Ke), (Se.g = 7);
                  break;
                }
                if (se.type === 'proto_list') {
                  if (pe) {
                    for (Ke = Array(pe.size()), lt = 0; lt < pe.size(); lt++) Ke[lt] = pe.get(lt);
                    pe.delete();
                  } else Ke = [];
                  (w[ee] = Ke), (Se.g = 7);
                  break;
                }
                if (pe === void 0) {
                  Se.g = 3;
                  break;
                }
                if (se.type === 'float_list') {
                  (w[ee] = pe), (Se.g = 7);
                  break;
                }
                if (se.type === 'proto') {
                  (w[ee] = pe), (Se.g = 7);
                  break;
                }
                if (se.type !== 'texture')
                  throw Error("Unknown output config type: '" + se.type + "'");
                return (
                  (te = o.u[ee]),
                  te || ((te = new Vr(o.h, o.G)), (o.u[ee] = te)),
                  C(Se, dp(te, pe, o.I), 13)
                );
              case 13:
                (oe = Se.h), (w[ee] = oe);
              case 7:
                se.transform && w[ee] && (w[ee] = se.transform(w[ee])), (Se.g = 3);
                break;
              case 14:
                ve[Ae] = Se.h;
              case 3:
                (k = W.next()), (Se.g = 2);
                break;
              case 4:
                return Se.return(w);
            }
          });
        }
        function Ho(o, c, v) {
          var w;
          return F(function (E) {
            return typeof v == 'number' || v instanceof Uint8Array || v instanceof o.h.Uint8BlobList
              ? E.return(v)
              : v instanceof o.h.Texture2dDataOut
              ? ((w = o.u[c]), w || ((w = new Vr(o.h, o.G)), (o.u[c] = w)), E.return(dp(w, v, o.I)))
              : E.return(void 0);
          });
        }
        function Wo(o, c) {
          for (
            var v = c.name || '$',
              w = [].concat(l(c.wants)),
              E = new o.h.StringList(),
              I = d(c.wants),
              k = I.next();
            !k.done;
            k = I.next()
          )
            E.push_back(k.value);
          (I = o.h.PacketListener.implement({
            onResults: function (V) {
              for (var P = {}, W = 0; W < c.wants.length; ++W) P[w[W]] = V.get(W);
              var ee = o.listeners[v];
              ee &&
                (o.D = qo(o, P, c.outs).then(function (se) {
                  se = ee(se);
                  for (var pe = 0; pe < c.wants.length; ++pe) {
                    var te = P[w[pe]];
                    typeof te == 'object' &&
                      te.hasOwnProperty &&
                      te.hasOwnProperty('delete') &&
                      te.delete();
                  }
                  se && (o.D = se);
                }));
            }
          })),
            o.i.attachMultiListener(E, I),
            E.delete();
        }
        (t.onResults = function (o, c) {
          this.listeners[c || '$'] = o;
        }),
          G('Solution', Cr),
          G('OptionType', { BOOL: 0, NUMBER: 1, ia: 2, 0: 'BOOL', 1: 'NUMBER', 2: 'STRING' });
        function mp(o) {
          var c = this;
          o = o || {};
          var v = { url: 'face_detection_short.binarypb' },
            w = {
              type: 1,
              graphOptionXref: {
                calculatorType: 'TensorsToDetectionsCalculator',
                calculatorName:
                  'facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator',
                fieldName: 'min_score_thresh'
              }
            };
          this.g = new Cr({
            locateFile: o.locateFile,
            files: [
              { data: !0, url: 'face_detection_short.binarypb' },
              { data: !0, url: 'face_detection_short_range.tflite' },
              { simd: !0, url: 'face_detection_solution_simd_wasm_bin.js' },
              { simd: !1, url: 'face_detection_solution_wasm_bin.js' }
            ],
            graph: v,
            listeners: [
              {
                wants: ['detections', 'image_transformed'],
                outs: {
                  image: 'image_transformed',
                  detections: { type: 'detection_list', stream: 'detections' }
                }
              }
            ],
            inputs: { image: { type: 'video', stream: 'input_frames_gpu' } },
            options: {
              useCpuInference: {
                type: 0,
                graphOptionXref: {
                  calculatorType: 'InferenceCalculator',
                  fieldName: 'use_cpu_inference'
                },
                default:
                  typeof window != 'object' || window.navigator === void 0
                    ? !1
                    : 'iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod'
                        .split(';')
                        .includes(navigator.platform) ||
                      (navigator.userAgent.includes('Mac') && 'ontouchend' in document)
              },
              selfieMode: {
                type: 0,
                graphOptionXref: {
                  calculatorType: 'GlScalerCalculator',
                  calculatorIndex: 1,
                  fieldName: 'flip_horizontal'
                }
              },
              model: {
                type: 0,
                onChange: function (E) {
                  var I, k, V, P, W, ee;
                  return F(function (se) {
                    switch (se.g) {
                      case 1:
                        (I =
                          E === 'short'
                            ? ['face_detection_short_range.tflite']
                            : ['face_detection_full_range_sparse.tflite']),
                          (k = d(I)),
                          (V = k.next());
                      case 2:
                        if (V.done) {
                          se.g = 4;
                          break;
                        }
                        return (
                          (P = V.value),
                          (W = 'third_party/mediapipe/modules/face_detection/' + P),
                          C(se, Fa(c.g, P), 5)
                        );
                      case 5:
                        (ee = se.h), c.g.overrideFile(W, ee), (V = k.next()), (se.g = 2);
                        break;
                      case 4:
                        return (
                          (v.url =
                            E === 'short'
                              ? 'face_detection_short.binarypb'
                              : 'face_detection_full.binarypb'),
                          (w.graphOptionXref.calculatorName =
                            E === 'short'
                              ? 'facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator'
                              : 'facedetectionfullrangegpu__facedetectionfullrangecommon__TensorsToDetectionsCalculator'),
                          se.return(!0)
                        );
                    }
                  });
                }
              },
              minDetectionConfidence: w
            }
          });
        }
        (t = mp.prototype),
          (t.close = function () {
            return this.g.close(), Promise.resolve();
          }),
          (t.onResults = function (o) {
            this.g.onResults(o);
          }),
          (t.initialize = function () {
            var o = this;
            return F(function (c) {
              return C(c, o.g.initialize(), 0);
            });
          }),
          (t.reset = function () {
            this.g.reset();
          }),
          (t.send = function (o) {
            var c = this;
            return F(function (v) {
              return C(v, c.g.send(o), 0);
            });
          }),
          (t.setOptions = function (o) {
            this.g.setOptions(o);
          }),
          G('FaceDetection', mp),
          G('FACEDETECTION_LIPS', ap),
          G('FACEDETECTION_LEFT_EYE', rp),
          G('FACEDETECTION_LEFT_EYEBROW', np),
          G('FACEDETECTION_RIGHT_EYE', sp),
          G('FACEDETECTION_RIGHT_EYEBROW', pp),
          G('FACEDETECTION_FACE_OVAL', ip),
          G('FACEDETECTION_CONTOURS', Oo),
          G('FACEDETECTION_TESSELATION', [
            [127, 34],
            [34, 139],
            [139, 127],
            [11, 0],
            [0, 37],
            [37, 11],
            [232, 231],
            [231, 120],
            [120, 232],
            [72, 37],
            [37, 39],
            [39, 72],
            [128, 121],
            [121, 47],
            [47, 128],
            [232, 121],
            [121, 128],
            [128, 232],
            [104, 69],
            [69, 67],
            [67, 104],
            [175, 171],
            [171, 148],
            [148, 175],
            [118, 50],
            [50, 101],
            [101, 118],
            [73, 39],
            [39, 40],
            [40, 73],
            [9, 151],
            [151, 108],
            [108, 9],
            [48, 115],
            [115, 131],
            [131, 48],
            [194, 204],
            [204, 211],
            [211, 194],
            [74, 40],
            [40, 185],
            [185, 74],
            [80, 42],
            [42, 183],
            [183, 80],
            [40, 92],
            [92, 186],
            [186, 40],
            [230, 229],
            [229, 118],
            [118, 230],
            [202, 212],
            [212, 214],
            [214, 202],
            [83, 18],
            [18, 17],
            [17, 83],
            [76, 61],
            [61, 146],
            [146, 76],
            [160, 29],
            [29, 30],
            [30, 160],
            [56, 157],
            [157, 173],
            [173, 56],
            [106, 204],
            [204, 194],
            [194, 106],
            [135, 214],
            [214, 192],
            [192, 135],
            [203, 165],
            [165, 98],
            [98, 203],
            [21, 71],
            [71, 68],
            [68, 21],
            [51, 45],
            [45, 4],
            [4, 51],
            [144, 24],
            [24, 23],
            [23, 144],
            [77, 146],
            [146, 91],
            [91, 77],
            [205, 50],
            [50, 187],
            [187, 205],
            [201, 200],
            [200, 18],
            [18, 201],
            [91, 106],
            [106, 182],
            [182, 91],
            [90, 91],
            [91, 181],
            [181, 90],
            [85, 84],
            [84, 17],
            [17, 85],
            [206, 203],
            [203, 36],
            [36, 206],
            [148, 171],
            [171, 140],
            [140, 148],
            [92, 40],
            [40, 39],
            [39, 92],
            [193, 189],
            [189, 244],
            [244, 193],
            [159, 158],
            [158, 28],
            [28, 159],
            [247, 246],
            [246, 161],
            [161, 247],
            [236, 3],
            [3, 196],
            [196, 236],
            [54, 68],
            [68, 104],
            [104, 54],
            [193, 168],
            [168, 8],
            [8, 193],
            [117, 228],
            [228, 31],
            [31, 117],
            [189, 193],
            [193, 55],
            [55, 189],
            [98, 97],
            [97, 99],
            [99, 98],
            [126, 47],
            [47, 100],
            [100, 126],
            [166, 79],
            [79, 218],
            [218, 166],
            [155, 154],
            [154, 26],
            [26, 155],
            [209, 49],
            [49, 131],
            [131, 209],
            [135, 136],
            [136, 150],
            [150, 135],
            [47, 126],
            [126, 217],
            [217, 47],
            [223, 52],
            [52, 53],
            [53, 223],
            [45, 51],
            [51, 134],
            [134, 45],
            [211, 170],
            [170, 140],
            [140, 211],
            [67, 69],
            [69, 108],
            [108, 67],
            [43, 106],
            [106, 91],
            [91, 43],
            [230, 119],
            [119, 120],
            [120, 230],
            [226, 130],
            [130, 247],
            [247, 226],
            [63, 53],
            [53, 52],
            [52, 63],
            [238, 20],
            [20, 242],
            [242, 238],
            [46, 70],
            [70, 156],
            [156, 46],
            [78, 62],
            [62, 96],
            [96, 78],
            [46, 53],
            [53, 63],
            [63, 46],
            [143, 34],
            [34, 227],
            [227, 143],
            [123, 117],
            [117, 111],
            [111, 123],
            [44, 125],
            [125, 19],
            [19, 44],
            [236, 134],
            [134, 51],
            [51, 236],
            [216, 206],
            [206, 205],
            [205, 216],
            [154, 153],
            [153, 22],
            [22, 154],
            [39, 37],
            [37, 167],
            [167, 39],
            [200, 201],
            [201, 208],
            [208, 200],
            [36, 142],
            [142, 100],
            [100, 36],
            [57, 212],
            [212, 202],
            [202, 57],
            [20, 60],
            [60, 99],
            [99, 20],
            [28, 158],
            [158, 157],
            [157, 28],
            [35, 226],
            [226, 113],
            [113, 35],
            [160, 159],
            [159, 27],
            [27, 160],
            [204, 202],
            [202, 210],
            [210, 204],
            [113, 225],
            [225, 46],
            [46, 113],
            [43, 202],
            [202, 204],
            [204, 43],
            [62, 76],
            [76, 77],
            [77, 62],
            [137, 123],
            [123, 116],
            [116, 137],
            [41, 38],
            [38, 72],
            [72, 41],
            [203, 129],
            [129, 142],
            [142, 203],
            [64, 98],
            [98, 240],
            [240, 64],
            [49, 102],
            [102, 64],
            [64, 49],
            [41, 73],
            [73, 74],
            [74, 41],
            [212, 216],
            [216, 207],
            [207, 212],
            [42, 74],
            [74, 184],
            [184, 42],
            [169, 170],
            [170, 211],
            [211, 169],
            [170, 149],
            [149, 176],
            [176, 170],
            [105, 66],
            [66, 69],
            [69, 105],
            [122, 6],
            [6, 168],
            [168, 122],
            [123, 147],
            [147, 187],
            [187, 123],
            [96, 77],
            [77, 90],
            [90, 96],
            [65, 55],
            [55, 107],
            [107, 65],
            [89, 90],
            [90, 180],
            [180, 89],
            [101, 100],
            [100, 120],
            [120, 101],
            [63, 105],
            [105, 104],
            [104, 63],
            [93, 137],
            [137, 227],
            [227, 93],
            [15, 86],
            [86, 85],
            [85, 15],
            [129, 102],
            [102, 49],
            [49, 129],
            [14, 87],
            [87, 86],
            [86, 14],
            [55, 8],
            [8, 9],
            [9, 55],
            [100, 47],
            [47, 121],
            [121, 100],
            [145, 23],
            [23, 22],
            [22, 145],
            [88, 89],
            [89, 179],
            [179, 88],
            [6, 122],
            [122, 196],
            [196, 6],
            [88, 95],
            [95, 96],
            [96, 88],
            [138, 172],
            [172, 136],
            [136, 138],
            [215, 58],
            [58, 172],
            [172, 215],
            [115, 48],
            [48, 219],
            [219, 115],
            [42, 80],
            [80, 81],
            [81, 42],
            [195, 3],
            [3, 51],
            [51, 195],
            [43, 146],
            [146, 61],
            [61, 43],
            [171, 175],
            [175, 199],
            [199, 171],
            [81, 82],
            [82, 38],
            [38, 81],
            [53, 46],
            [46, 225],
            [225, 53],
            [144, 163],
            [163, 110],
            [110, 144],
            [52, 65],
            [65, 66],
            [66, 52],
            [229, 228],
            [228, 117],
            [117, 229],
            [34, 127],
            [127, 234],
            [234, 34],
            [107, 108],
            [108, 69],
            [69, 107],
            [109, 108],
            [108, 151],
            [151, 109],
            [48, 64],
            [64, 235],
            [235, 48],
            [62, 78],
            [78, 191],
            [191, 62],
            [129, 209],
            [209, 126],
            [126, 129],
            [111, 35],
            [35, 143],
            [143, 111],
            [117, 123],
            [123, 50],
            [50, 117],
            [222, 65],
            [65, 52],
            [52, 222],
            [19, 125],
            [125, 141],
            [141, 19],
            [221, 55],
            [55, 65],
            [65, 221],
            [3, 195],
            [195, 197],
            [197, 3],
            [25, 7],
            [7, 33],
            [33, 25],
            [220, 237],
            [237, 44],
            [44, 220],
            [70, 71],
            [71, 139],
            [139, 70],
            [122, 193],
            [193, 245],
            [245, 122],
            [247, 130],
            [130, 33],
            [33, 247],
            [71, 21],
            [21, 162],
            [162, 71],
            [170, 169],
            [169, 150],
            [150, 170],
            [188, 174],
            [174, 196],
            [196, 188],
            [216, 186],
            [186, 92],
            [92, 216],
            [2, 97],
            [97, 167],
            [167, 2],
            [141, 125],
            [125, 241],
            [241, 141],
            [164, 167],
            [167, 37],
            [37, 164],
            [72, 38],
            [38, 12],
            [12, 72],
            [38, 82],
            [82, 13],
            [13, 38],
            [63, 68],
            [68, 71],
            [71, 63],
            [226, 35],
            [35, 111],
            [111, 226],
            [101, 50],
            [50, 205],
            [205, 101],
            [206, 92],
            [92, 165],
            [165, 206],
            [209, 198],
            [198, 217],
            [217, 209],
            [165, 167],
            [167, 97],
            [97, 165],
            [220, 115],
            [115, 218],
            [218, 220],
            [133, 112],
            [112, 243],
            [243, 133],
            [239, 238],
            [238, 241],
            [241, 239],
            [214, 135],
            [135, 169],
            [169, 214],
            [190, 173],
            [173, 133],
            [133, 190],
            [171, 208],
            [208, 32],
            [32, 171],
            [125, 44],
            [44, 237],
            [237, 125],
            [86, 87],
            [87, 178],
            [178, 86],
            [85, 86],
            [86, 179],
            [179, 85],
            [84, 85],
            [85, 180],
            [180, 84],
            [83, 84],
            [84, 181],
            [181, 83],
            [201, 83],
            [83, 182],
            [182, 201],
            [137, 93],
            [93, 132],
            [132, 137],
            [76, 62],
            [62, 183],
            [183, 76],
            [61, 76],
            [76, 184],
            [184, 61],
            [57, 61],
            [61, 185],
            [185, 57],
            [212, 57],
            [57, 186],
            [186, 212],
            [214, 207],
            [207, 187],
            [187, 214],
            [34, 143],
            [143, 156],
            [156, 34],
            [79, 239],
            [239, 237],
            [237, 79],
            [123, 137],
            [137, 177],
            [177, 123],
            [44, 1],
            [1, 4],
            [4, 44],
            [201, 194],
            [194, 32],
            [32, 201],
            [64, 102],
            [102, 129],
            [129, 64],
            [213, 215],
            [215, 138],
            [138, 213],
            [59, 166],
            [166, 219],
            [219, 59],
            [242, 99],
            [99, 97],
            [97, 242],
            [2, 94],
            [94, 141],
            [141, 2],
            [75, 59],
            [59, 235],
            [235, 75],
            [24, 110],
            [110, 228],
            [228, 24],
            [25, 130],
            [130, 226],
            [226, 25],
            [23, 24],
            [24, 229],
            [229, 23],
            [22, 23],
            [23, 230],
            [230, 22],
            [26, 22],
            [22, 231],
            [231, 26],
            [112, 26],
            [26, 232],
            [232, 112],
            [189, 190],
            [190, 243],
            [243, 189],
            [221, 56],
            [56, 190],
            [190, 221],
            [28, 56],
            [56, 221],
            [221, 28],
            [27, 28],
            [28, 222],
            [222, 27],
            [29, 27],
            [27, 223],
            [223, 29],
            [30, 29],
            [29, 224],
            [224, 30],
            [247, 30],
            [30, 225],
            [225, 247],
            [238, 79],
            [79, 20],
            [20, 238],
            [166, 59],
            [59, 75],
            [75, 166],
            [60, 75],
            [75, 240],
            [240, 60],
            [147, 177],
            [177, 215],
            [215, 147],
            [20, 79],
            [79, 166],
            [166, 20],
            [187, 147],
            [147, 213],
            [213, 187],
            [112, 233],
            [233, 244],
            [244, 112],
            [233, 128],
            [128, 245],
            [245, 233],
            [128, 114],
            [114, 188],
            [188, 128],
            [114, 217],
            [217, 174],
            [174, 114],
            [131, 115],
            [115, 220],
            [220, 131],
            [217, 198],
            [198, 236],
            [236, 217],
            [198, 131],
            [131, 134],
            [134, 198],
            [177, 132],
            [132, 58],
            [58, 177],
            [143, 35],
            [35, 124],
            [124, 143],
            [110, 163],
            [163, 7],
            [7, 110],
            [228, 110],
            [110, 25],
            [25, 228],
            [356, 389],
            [389, 368],
            [368, 356],
            [11, 302],
            [302, 267],
            [267, 11],
            [452, 350],
            [350, 349],
            [349, 452],
            [302, 303],
            [303, 269],
            [269, 302],
            [357, 343],
            [343, 277],
            [277, 357],
            [452, 453],
            [453, 357],
            [357, 452],
            [333, 332],
            [332, 297],
            [297, 333],
            [175, 152],
            [152, 377],
            [377, 175],
            [347, 348],
            [348, 330],
            [330, 347],
            [303, 304],
            [304, 270],
            [270, 303],
            [9, 336],
            [336, 337],
            [337, 9],
            [278, 279],
            [279, 360],
            [360, 278],
            [418, 262],
            [262, 431],
            [431, 418],
            [304, 408],
            [408, 409],
            [409, 304],
            [310, 415],
            [415, 407],
            [407, 310],
            [270, 409],
            [409, 410],
            [410, 270],
            [450, 348],
            [348, 347],
            [347, 450],
            [422, 430],
            [430, 434],
            [434, 422],
            [313, 314],
            [314, 17],
            [17, 313],
            [306, 307],
            [307, 375],
            [375, 306],
            [387, 388],
            [388, 260],
            [260, 387],
            [286, 414],
            [414, 398],
            [398, 286],
            [335, 406],
            [406, 418],
            [418, 335],
            [364, 367],
            [367, 416],
            [416, 364],
            [423, 358],
            [358, 327],
            [327, 423],
            [251, 284],
            [284, 298],
            [298, 251],
            [281, 5],
            [5, 4],
            [4, 281],
            [373, 374],
            [374, 253],
            [253, 373],
            [307, 320],
            [320, 321],
            [321, 307],
            [425, 427],
            [427, 411],
            [411, 425],
            [421, 313],
            [313, 18],
            [18, 421],
            [321, 405],
            [405, 406],
            [406, 321],
            [320, 404],
            [404, 405],
            [405, 320],
            [315, 16],
            [16, 17],
            [17, 315],
            [426, 425],
            [425, 266],
            [266, 426],
            [377, 400],
            [400, 369],
            [369, 377],
            [322, 391],
            [391, 269],
            [269, 322],
            [417, 465],
            [465, 464],
            [464, 417],
            [386, 257],
            [257, 258],
            [258, 386],
            [466, 260],
            [260, 388],
            [388, 466],
            [456, 399],
            [399, 419],
            [419, 456],
            [284, 332],
            [332, 333],
            [333, 284],
            [417, 285],
            [285, 8],
            [8, 417],
            [346, 340],
            [340, 261],
            [261, 346],
            [413, 441],
            [441, 285],
            [285, 413],
            [327, 460],
            [460, 328],
            [328, 327],
            [355, 371],
            [371, 329],
            [329, 355],
            [392, 439],
            [439, 438],
            [438, 392],
            [382, 341],
            [341, 256],
            [256, 382],
            [429, 420],
            [420, 360],
            [360, 429],
            [364, 394],
            [394, 379],
            [379, 364],
            [277, 343],
            [343, 437],
            [437, 277],
            [443, 444],
            [444, 283],
            [283, 443],
            [275, 440],
            [440, 363],
            [363, 275],
            [431, 262],
            [262, 369],
            [369, 431],
            [297, 338],
            [338, 337],
            [337, 297],
            [273, 375],
            [375, 321],
            [321, 273],
            [450, 451],
            [451, 349],
            [349, 450],
            [446, 342],
            [342, 467],
            [467, 446],
            [293, 334],
            [334, 282],
            [282, 293],
            [458, 461],
            [461, 462],
            [462, 458],
            [276, 353],
            [353, 383],
            [383, 276],
            [308, 324],
            [324, 325],
            [325, 308],
            [276, 300],
            [300, 293],
            [293, 276],
            [372, 345],
            [345, 447],
            [447, 372],
            [352, 345],
            [345, 340],
            [340, 352],
            [274, 1],
            [1, 19],
            [19, 274],
            [456, 248],
            [248, 281],
            [281, 456],
            [436, 427],
            [427, 425],
            [425, 436],
            [381, 256],
            [256, 252],
            [252, 381],
            [269, 391],
            [391, 393],
            [393, 269],
            [200, 199],
            [199, 428],
            [428, 200],
            [266, 330],
            [330, 329],
            [329, 266],
            [287, 273],
            [273, 422],
            [422, 287],
            [250, 462],
            [462, 328],
            [328, 250],
            [258, 286],
            [286, 384],
            [384, 258],
            [265, 353],
            [353, 342],
            [342, 265],
            [387, 259],
            [259, 257],
            [257, 387],
            [424, 431],
            [431, 430],
            [430, 424],
            [342, 353],
            [353, 276],
            [276, 342],
            [273, 335],
            [335, 424],
            [424, 273],
            [292, 325],
            [325, 307],
            [307, 292],
            [366, 447],
            [447, 345],
            [345, 366],
            [271, 303],
            [303, 302],
            [302, 271],
            [423, 266],
            [266, 371],
            [371, 423],
            [294, 455],
            [455, 460],
            [460, 294],
            [279, 278],
            [278, 294],
            [294, 279],
            [271, 272],
            [272, 304],
            [304, 271],
            [432, 434],
            [434, 427],
            [427, 432],
            [272, 407],
            [407, 408],
            [408, 272],
            [394, 430],
            [430, 431],
            [431, 394],
            [395, 369],
            [369, 400],
            [400, 395],
            [334, 333],
            [333, 299],
            [299, 334],
            [351, 417],
            [417, 168],
            [168, 351],
            [352, 280],
            [280, 411],
            [411, 352],
            [325, 319],
            [319, 320],
            [320, 325],
            [295, 296],
            [296, 336],
            [336, 295],
            [319, 403],
            [403, 404],
            [404, 319],
            [330, 348],
            [348, 349],
            [349, 330],
            [293, 298],
            [298, 333],
            [333, 293],
            [323, 454],
            [454, 447],
            [447, 323],
            [15, 16],
            [16, 315],
            [315, 15],
            [358, 429],
            [429, 279],
            [279, 358],
            [14, 15],
            [15, 316],
            [316, 14],
            [285, 336],
            [336, 9],
            [9, 285],
            [329, 349],
            [349, 350],
            [350, 329],
            [374, 380],
            [380, 252],
            [252, 374],
            [318, 402],
            [402, 403],
            [403, 318],
            [6, 197],
            [197, 419],
            [419, 6],
            [318, 319],
            [319, 325],
            [325, 318],
            [367, 364],
            [364, 365],
            [365, 367],
            [435, 367],
            [367, 397],
            [397, 435],
            [344, 438],
            [438, 439],
            [439, 344],
            [272, 271],
            [271, 311],
            [311, 272],
            [195, 5],
            [5, 281],
            [281, 195],
            [273, 287],
            [287, 291],
            [291, 273],
            [396, 428],
            [428, 199],
            [199, 396],
            [311, 271],
            [271, 268],
            [268, 311],
            [283, 444],
            [444, 445],
            [445, 283],
            [373, 254],
            [254, 339],
            [339, 373],
            [282, 334],
            [334, 296],
            [296, 282],
            [449, 347],
            [347, 346],
            [346, 449],
            [264, 447],
            [447, 454],
            [454, 264],
            [336, 296],
            [296, 299],
            [299, 336],
            [338, 10],
            [10, 151],
            [151, 338],
            [278, 439],
            [439, 455],
            [455, 278],
            [292, 407],
            [407, 415],
            [415, 292],
            [358, 371],
            [371, 355],
            [355, 358],
            [340, 345],
            [345, 372],
            [372, 340],
            [346, 347],
            [347, 280],
            [280, 346],
            [442, 443],
            [443, 282],
            [282, 442],
            [19, 94],
            [94, 370],
            [370, 19],
            [441, 442],
            [442, 295],
            [295, 441],
            [248, 419],
            [419, 197],
            [197, 248],
            [263, 255],
            [255, 359],
            [359, 263],
            [440, 275],
            [275, 274],
            [274, 440],
            [300, 383],
            [383, 368],
            [368, 300],
            [351, 412],
            [412, 465],
            [465, 351],
            [263, 467],
            [467, 466],
            [466, 263],
            [301, 368],
            [368, 389],
            [389, 301],
            [395, 378],
            [378, 379],
            [379, 395],
            [412, 351],
            [351, 419],
            [419, 412],
            [436, 426],
            [426, 322],
            [322, 436],
            [2, 164],
            [164, 393],
            [393, 2],
            [370, 462],
            [462, 461],
            [461, 370],
            [164, 0],
            [0, 267],
            [267, 164],
            [302, 11],
            [11, 12],
            [12, 302],
            [268, 12],
            [12, 13],
            [13, 268],
            [293, 300],
            [300, 301],
            [301, 293],
            [446, 261],
            [261, 340],
            [340, 446],
            [330, 266],
            [266, 425],
            [425, 330],
            [426, 423],
            [423, 391],
            [391, 426],
            [429, 355],
            [355, 437],
            [437, 429],
            [391, 327],
            [327, 326],
            [326, 391],
            [440, 457],
            [457, 438],
            [438, 440],
            [341, 382],
            [382, 362],
            [362, 341],
            [459, 457],
            [457, 461],
            [461, 459],
            [434, 430],
            [430, 394],
            [394, 434],
            [414, 463],
            [463, 362],
            [362, 414],
            [396, 369],
            [369, 262],
            [262, 396],
            [354, 461],
            [461, 457],
            [457, 354],
            [316, 403],
            [403, 402],
            [402, 316],
            [315, 404],
            [404, 403],
            [403, 315],
            [314, 405],
            [405, 404],
            [404, 314],
            [313, 406],
            [406, 405],
            [405, 313],
            [421, 418],
            [418, 406],
            [406, 421],
            [366, 401],
            [401, 361],
            [361, 366],
            [306, 408],
            [408, 407],
            [407, 306],
            [291, 409],
            [409, 408],
            [408, 291],
            [287, 410],
            [410, 409],
            [409, 287],
            [432, 436],
            [436, 410],
            [410, 432],
            [434, 416],
            [416, 411],
            [411, 434],
            [264, 368],
            [368, 383],
            [383, 264],
            [309, 438],
            [438, 457],
            [457, 309],
            [352, 376],
            [376, 401],
            [401, 352],
            [274, 275],
            [275, 4],
            [4, 274],
            [421, 428],
            [428, 262],
            [262, 421],
            [294, 327],
            [327, 358],
            [358, 294],
            [433, 416],
            [416, 367],
            [367, 433],
            [289, 455],
            [455, 439],
            [439, 289],
            [462, 370],
            [370, 326],
            [326, 462],
            [2, 326],
            [326, 370],
            [370, 2],
            [305, 460],
            [460, 455],
            [455, 305],
            [254, 449],
            [449, 448],
            [448, 254],
            [255, 261],
            [261, 446],
            [446, 255],
            [253, 450],
            [450, 449],
            [449, 253],
            [252, 451],
            [451, 450],
            [450, 252],
            [256, 452],
            [452, 451],
            [451, 256],
            [341, 453],
            [453, 452],
            [452, 341],
            [413, 464],
            [464, 463],
            [463, 413],
            [441, 413],
            [413, 414],
            [414, 441],
            [258, 442],
            [442, 441],
            [441, 258],
            [257, 443],
            [443, 442],
            [442, 257],
            [259, 444],
            [444, 443],
            [443, 259],
            [260, 445],
            [445, 444],
            [444, 260],
            [467, 342],
            [342, 445],
            [445, 467],
            [459, 458],
            [458, 250],
            [250, 459],
            [289, 392],
            [392, 290],
            [290, 289],
            [290, 328],
            [328, 460],
            [460, 290],
            [376, 433],
            [433, 435],
            [435, 376],
            [250, 290],
            [290, 392],
            [392, 250],
            [411, 416],
            [416, 433],
            [433, 411],
            [341, 463],
            [463, 464],
            [464, 341],
            [453, 464],
            [464, 465],
            [465, 453],
            [357, 465],
            [465, 412],
            [412, 357],
            [343, 412],
            [412, 399],
            [399, 343],
            [360, 363],
            [363, 440],
            [440, 360],
            [437, 399],
            [399, 456],
            [456, 437],
            [420, 456],
            [456, 363],
            [363, 420],
            [401, 435],
            [435, 288],
            [288, 401],
            [372, 383],
            [383, 353],
            [353, 372],
            [339, 255],
            [255, 249],
            [249, 339],
            [448, 261],
            [261, 255],
            [255, 448],
            [133, 243],
            [243, 190],
            [190, 133],
            [133, 155],
            [155, 112],
            [112, 133],
            [33, 246],
            [246, 247],
            [247, 33],
            [33, 130],
            [130, 25],
            [25, 33],
            [398, 384],
            [384, 286],
            [286, 398],
            [362, 398],
            [398, 414],
            [414, 362],
            [362, 463],
            [463, 341],
            [341, 362],
            [263, 359],
            [359, 467],
            [467, 263],
            [263, 249],
            [249, 255],
            [255, 263],
            [466, 467],
            [467, 260],
            [260, 466],
            [75, 60],
            [60, 166],
            [166, 75],
            [238, 239],
            [239, 79],
            [79, 238],
            [162, 127],
            [127, 139],
            [139, 162],
            [72, 11],
            [11, 37],
            [37, 72],
            [121, 232],
            [232, 120],
            [120, 121],
            [73, 72],
            [72, 39],
            [39, 73],
            [114, 128],
            [128, 47],
            [47, 114],
            [233, 232],
            [232, 128],
            [128, 233],
            [103, 104],
            [104, 67],
            [67, 103],
            [152, 175],
            [175, 148],
            [148, 152],
            [119, 118],
            [118, 101],
            [101, 119],
            [74, 73],
            [73, 40],
            [40, 74],
            [107, 9],
            [9, 108],
            [108, 107],
            [49, 48],
            [48, 131],
            [131, 49],
            [32, 194],
            [194, 211],
            [211, 32],
            [184, 74],
            [74, 185],
            [185, 184],
            [191, 80],
            [80, 183],
            [183, 191],
            [185, 40],
            [40, 186],
            [186, 185],
            [119, 230],
            [230, 118],
            [118, 119],
            [210, 202],
            [202, 214],
            [214, 210],
            [84, 83],
            [83, 17],
            [17, 84],
            [77, 76],
            [76, 146],
            [146, 77],
            [161, 160],
            [160, 30],
            [30, 161],
            [190, 56],
            [56, 173],
            [173, 190],
            [182, 106],
            [106, 194],
            [194, 182],
            [138, 135],
            [135, 192],
            [192, 138],
            [129, 203],
            [203, 98],
            [98, 129],
            [54, 21],
            [21, 68],
            [68, 54],
            [5, 51],
            [51, 4],
            [4, 5],
            [145, 144],
            [144, 23],
            [23, 145],
            [90, 77],
            [77, 91],
            [91, 90],
            [207, 205],
            [205, 187],
            [187, 207],
            [83, 201],
            [201, 18],
            [18, 83],
            [181, 91],
            [91, 182],
            [182, 181],
            [180, 90],
            [90, 181],
            [181, 180],
            [16, 85],
            [85, 17],
            [17, 16],
            [205, 206],
            [206, 36],
            [36, 205],
            [176, 148],
            [148, 140],
            [140, 176],
            [165, 92],
            [92, 39],
            [39, 165],
            [245, 193],
            [193, 244],
            [244, 245],
            [27, 159],
            [159, 28],
            [28, 27],
            [30, 247],
            [247, 161],
            [161, 30],
            [174, 236],
            [236, 196],
            [196, 174],
            [103, 54],
            [54, 104],
            [104, 103],
            [55, 193],
            [193, 8],
            [8, 55],
            [111, 117],
            [117, 31],
            [31, 111],
            [221, 189],
            [189, 55],
            [55, 221],
            [240, 98],
            [98, 99],
            [99, 240],
            [142, 126],
            [126, 100],
            [100, 142],
            [219, 166],
            [166, 218],
            [218, 219],
            [112, 155],
            [155, 26],
            [26, 112],
            [198, 209],
            [209, 131],
            [131, 198],
            [169, 135],
            [135, 150],
            [150, 169],
            [114, 47],
            [47, 217],
            [217, 114],
            [224, 223],
            [223, 53],
            [53, 224],
            [220, 45],
            [45, 134],
            [134, 220],
            [32, 211],
            [211, 140],
            [140, 32],
            [109, 67],
            [67, 108],
            [108, 109],
            [146, 43],
            [43, 91],
            [91, 146],
            [231, 230],
            [230, 120],
            [120, 231],
            [113, 226],
            [226, 247],
            [247, 113],
            [105, 63],
            [63, 52],
            [52, 105],
            [241, 238],
            [238, 242],
            [242, 241],
            [124, 46],
            [46, 156],
            [156, 124],
            [95, 78],
            [78, 96],
            [96, 95],
            [70, 46],
            [46, 63],
            [63, 70],
            [116, 143],
            [143, 227],
            [227, 116],
            [116, 123],
            [123, 111],
            [111, 116],
            [1, 44],
            [44, 19],
            [19, 1],
            [3, 236],
            [236, 51],
            [51, 3],
            [207, 216],
            [216, 205],
            [205, 207],
            [26, 154],
            [154, 22],
            [22, 26],
            [165, 39],
            [39, 167],
            [167, 165],
            [199, 200],
            [200, 208],
            [208, 199],
            [101, 36],
            [36, 100],
            [100, 101],
            [43, 57],
            [57, 202],
            [202, 43],
            [242, 20],
            [20, 99],
            [99, 242],
            [56, 28],
            [28, 157],
            [157, 56],
            [124, 35],
            [35, 113],
            [113, 124],
            [29, 160],
            [160, 27],
            [27, 29],
            [211, 204],
            [204, 210],
            [210, 211],
            [124, 113],
            [113, 46],
            [46, 124],
            [106, 43],
            [43, 204],
            [204, 106],
            [96, 62],
            [62, 77],
            [77, 96],
            [227, 137],
            [137, 116],
            [116, 227],
            [73, 41],
            [41, 72],
            [72, 73],
            [36, 203],
            [203, 142],
            [142, 36],
            [235, 64],
            [64, 240],
            [240, 235],
            [48, 49],
            [49, 64],
            [64, 48],
            [42, 41],
            [41, 74],
            [74, 42],
            [214, 212],
            [212, 207],
            [207, 214],
            [183, 42],
            [42, 184],
            [184, 183],
            [210, 169],
            [169, 211],
            [211, 210],
            [140, 170],
            [170, 176],
            [176, 140],
            [104, 105],
            [105, 69],
            [69, 104],
            [193, 122],
            [122, 168],
            [168, 193],
            [50, 123],
            [123, 187],
            [187, 50],
            [89, 96],
            [96, 90],
            [90, 89],
            [66, 65],
            [65, 107],
            [107, 66],
            [179, 89],
            [89, 180],
            [180, 179],
            [119, 101],
            [101, 120],
            [120, 119],
            [68, 63],
            [63, 104],
            [104, 68],
            [234, 93],
            [93, 227],
            [227, 234],
            [16, 15],
            [15, 85],
            [85, 16],
            [209, 129],
            [129, 49],
            [49, 209],
            [15, 14],
            [14, 86],
            [86, 15],
            [107, 55],
            [55, 9],
            [9, 107],
            [120, 100],
            [100, 121],
            [121, 120],
            [153, 145],
            [145, 22],
            [22, 153],
            [178, 88],
            [88, 179],
            [179, 178],
            [197, 6],
            [6, 196],
            [196, 197],
            [89, 88],
            [88, 96],
            [96, 89],
            [135, 138],
            [138, 136],
            [136, 135],
            [138, 215],
            [215, 172],
            [172, 138],
            [218, 115],
            [115, 219],
            [219, 218],
            [41, 42],
            [42, 81],
            [81, 41],
            [5, 195],
            [195, 51],
            [51, 5],
            [57, 43],
            [43, 61],
            [61, 57],
            [208, 171],
            [171, 199],
            [199, 208],
            [41, 81],
            [81, 38],
            [38, 41],
            [224, 53],
            [53, 225],
            [225, 224],
            [24, 144],
            [144, 110],
            [110, 24],
            [105, 52],
            [52, 66],
            [66, 105],
            [118, 229],
            [229, 117],
            [117, 118],
            [227, 34],
            [34, 234],
            [234, 227],
            [66, 107],
            [107, 69],
            [69, 66],
            [10, 109],
            [109, 151],
            [151, 10],
            [219, 48],
            [48, 235],
            [235, 219],
            [183, 62],
            [62, 191],
            [191, 183],
            [142, 129],
            [129, 126],
            [126, 142],
            [116, 111],
            [111, 143],
            [143, 116],
            [118, 117],
            [117, 50],
            [50, 118],
            [223, 222],
            [222, 52],
            [52, 223],
            [94, 19],
            [19, 141],
            [141, 94],
            [222, 221],
            [221, 65],
            [65, 222],
            [196, 3],
            [3, 197],
            [197, 196],
            [45, 220],
            [220, 44],
            [44, 45],
            [156, 70],
            [70, 139],
            [139, 156],
            [188, 122],
            [122, 245],
            [245, 188],
            [139, 71],
            [71, 162],
            [162, 139],
            [149, 170],
            [170, 150],
            [150, 149],
            [122, 188],
            [188, 196],
            [196, 122],
            [206, 216],
            [216, 92],
            [92, 206],
            [164, 2],
            [2, 167],
            [167, 164],
            [242, 141],
            [141, 241],
            [241, 242],
            [0, 164],
            [164, 37],
            [37, 0],
            [11, 72],
            [72, 12],
            [12, 11],
            [12, 38],
            [38, 13],
            [13, 12],
            [70, 63],
            [63, 71],
            [71, 70],
            [31, 226],
            [226, 111],
            [111, 31],
            [36, 101],
            [101, 205],
            [205, 36],
            [203, 206],
            [206, 165],
            [165, 203],
            [126, 209],
            [209, 217],
            [217, 126],
            [98, 165],
            [165, 97],
            [97, 98],
            [237, 220],
            [220, 218],
            [218, 237],
            [237, 239],
            [239, 241],
            [241, 237],
            [210, 214],
            [214, 169],
            [169, 210],
            [140, 171],
            [171, 32],
            [32, 140],
            [241, 125],
            [125, 237],
            [237, 241],
            [179, 86],
            [86, 178],
            [178, 179],
            [180, 85],
            [85, 179],
            [179, 180],
            [181, 84],
            [84, 180],
            [180, 181],
            [182, 83],
            [83, 181],
            [181, 182],
            [194, 201],
            [201, 182],
            [182, 194],
            [177, 137],
            [137, 132],
            [132, 177],
            [184, 76],
            [76, 183],
            [183, 184],
            [185, 61],
            [61, 184],
            [184, 185],
            [186, 57],
            [57, 185],
            [185, 186],
            [216, 212],
            [212, 186],
            [186, 216],
            [192, 214],
            [214, 187],
            [187, 192],
            [139, 34],
            [34, 156],
            [156, 139],
            [218, 79],
            [79, 237],
            [237, 218],
            [147, 123],
            [123, 177],
            [177, 147],
            [45, 44],
            [44, 4],
            [4, 45],
            [208, 201],
            [201, 32],
            [32, 208],
            [98, 64],
            [64, 129],
            [129, 98],
            [192, 213],
            [213, 138],
            [138, 192],
            [235, 59],
            [59, 219],
            [219, 235],
            [141, 242],
            [242, 97],
            [97, 141],
            [97, 2],
            [2, 141],
            [141, 97],
            [240, 75],
            [75, 235],
            [235, 240],
            [229, 24],
            [24, 228],
            [228, 229],
            [31, 25],
            [25, 226],
            [226, 31],
            [230, 23],
            [23, 229],
            [229, 230],
            [231, 22],
            [22, 230],
            [230, 231],
            [232, 26],
            [26, 231],
            [231, 232],
            [233, 112],
            [112, 232],
            [232, 233],
            [244, 189],
            [189, 243],
            [243, 244],
            [189, 221],
            [221, 190],
            [190, 189],
            [222, 28],
            [28, 221],
            [221, 222],
            [223, 27],
            [27, 222],
            [222, 223],
            [224, 29],
            [29, 223],
            [223, 224],
            [225, 30],
            [30, 224],
            [224, 225],
            [113, 247],
            [247, 225],
            [225, 113],
            [99, 60],
            [60, 240],
            [240, 99],
            [213, 147],
            [147, 215],
            [215, 213],
            [60, 20],
            [20, 166],
            [166, 60],
            [192, 187],
            [187, 213],
            [213, 192],
            [243, 112],
            [112, 244],
            [244, 243],
            [244, 233],
            [233, 245],
            [245, 244],
            [245, 128],
            [128, 188],
            [188, 245],
            [188, 114],
            [114, 174],
            [174, 188],
            [134, 131],
            [131, 220],
            [220, 134],
            [174, 217],
            [217, 236],
            [236, 174],
            [236, 198],
            [198, 134],
            [134, 236],
            [215, 177],
            [177, 58],
            [58, 215],
            [156, 143],
            [143, 124],
            [124, 156],
            [25, 110],
            [110, 7],
            [7, 25],
            [31, 228],
            [228, 25],
            [25, 31],
            [264, 356],
            [356, 368],
            [368, 264],
            [0, 11],
            [11, 267],
            [267, 0],
            [451, 452],
            [452, 349],
            [349, 451],
            [267, 302],
            [302, 269],
            [269, 267],
            [350, 357],
            [357, 277],
            [277, 350],
            [350, 452],
            [452, 357],
            [357, 350],
            [299, 333],
            [333, 297],
            [297, 299],
            [396, 175],
            [175, 377],
            [377, 396],
            [280, 347],
            [347, 330],
            [330, 280],
            [269, 303],
            [303, 270],
            [270, 269],
            [151, 9],
            [9, 337],
            [337, 151],
            [344, 278],
            [278, 360],
            [360, 344],
            [424, 418],
            [418, 431],
            [431, 424],
            [270, 304],
            [304, 409],
            [409, 270],
            [272, 310],
            [310, 407],
            [407, 272],
            [322, 270],
            [270, 410],
            [410, 322],
            [449, 450],
            [450, 347],
            [347, 449],
            [432, 422],
            [422, 434],
            [434, 432],
            [18, 313],
            [313, 17],
            [17, 18],
            [291, 306],
            [306, 375],
            [375, 291],
            [259, 387],
            [387, 260],
            [260, 259],
            [424, 335],
            [335, 418],
            [418, 424],
            [434, 364],
            [364, 416],
            [416, 434],
            [391, 423],
            [423, 327],
            [327, 391],
            [301, 251],
            [251, 298],
            [298, 301],
            [275, 281],
            [281, 4],
            [4, 275],
            [254, 373],
            [373, 253],
            [253, 254],
            [375, 307],
            [307, 321],
            [321, 375],
            [280, 425],
            [425, 411],
            [411, 280],
            [200, 421],
            [421, 18],
            [18, 200],
            [335, 321],
            [321, 406],
            [406, 335],
            [321, 320],
            [320, 405],
            [405, 321],
            [314, 315],
            [315, 17],
            [17, 314],
            [423, 426],
            [426, 266],
            [266, 423],
            [396, 377],
            [377, 369],
            [369, 396],
            [270, 322],
            [322, 269],
            [269, 270],
            [413, 417],
            [417, 464],
            [464, 413],
            [385, 386],
            [386, 258],
            [258, 385],
            [248, 456],
            [456, 419],
            [419, 248],
            [298, 284],
            [284, 333],
            [333, 298],
            [168, 417],
            [417, 8],
            [8, 168],
            [448, 346],
            [346, 261],
            [261, 448],
            [417, 413],
            [413, 285],
            [285, 417],
            [326, 327],
            [327, 328],
            [328, 326],
            [277, 355],
            [355, 329],
            [329, 277],
            [309, 392],
            [392, 438],
            [438, 309],
            [381, 382],
            [382, 256],
            [256, 381],
            [279, 429],
            [429, 360],
            [360, 279],
            [365, 364],
            [364, 379],
            [379, 365],
            [355, 277],
            [277, 437],
            [437, 355],
            [282, 443],
            [443, 283],
            [283, 282],
            [281, 275],
            [275, 363],
            [363, 281],
            [395, 431],
            [431, 369],
            [369, 395],
            [299, 297],
            [297, 337],
            [337, 299],
            [335, 273],
            [273, 321],
            [321, 335],
            [348, 450],
            [450, 349],
            [349, 348],
            [359, 446],
            [446, 467],
            [467, 359],
            [283, 293],
            [293, 282],
            [282, 283],
            [250, 458],
            [458, 462],
            [462, 250],
            [300, 276],
            [276, 383],
            [383, 300],
            [292, 308],
            [308, 325],
            [325, 292],
            [283, 276],
            [276, 293],
            [293, 283],
            [264, 372],
            [372, 447],
            [447, 264],
            [346, 352],
            [352, 340],
            [340, 346],
            [354, 274],
            [274, 19],
            [19, 354],
            [363, 456],
            [456, 281],
            [281, 363],
            [426, 436],
            [436, 425],
            [425, 426],
            [380, 381],
            [381, 252],
            [252, 380],
            [267, 269],
            [269, 393],
            [393, 267],
            [421, 200],
            [200, 428],
            [428, 421],
            [371, 266],
            [266, 329],
            [329, 371],
            [432, 287],
            [287, 422],
            [422, 432],
            [290, 250],
            [250, 328],
            [328, 290],
            [385, 258],
            [258, 384],
            [384, 385],
            [446, 265],
            [265, 342],
            [342, 446],
            [386, 387],
            [387, 257],
            [257, 386],
            [422, 424],
            [424, 430],
            [430, 422],
            [445, 342],
            [342, 276],
            [276, 445],
            [422, 273],
            [273, 424],
            [424, 422],
            [306, 292],
            [292, 307],
            [307, 306],
            [352, 366],
            [366, 345],
            [345, 352],
            [268, 271],
            [271, 302],
            [302, 268],
            [358, 423],
            [423, 371],
            [371, 358],
            [327, 294],
            [294, 460],
            [460, 327],
            [331, 279],
            [279, 294],
            [294, 331],
            [303, 271],
            [271, 304],
            [304, 303],
            [436, 432],
            [432, 427],
            [427, 436],
            [304, 272],
            [272, 408],
            [408, 304],
            [395, 394],
            [394, 431],
            [431, 395],
            [378, 395],
            [395, 400],
            [400, 378],
            [296, 334],
            [334, 299],
            [299, 296],
            [6, 351],
            [351, 168],
            [168, 6],
            [376, 352],
            [352, 411],
            [411, 376],
            [307, 325],
            [325, 320],
            [320, 307],
            [285, 295],
            [295, 336],
            [336, 285],
            [320, 319],
            [319, 404],
            [404, 320],
            [329, 330],
            [330, 349],
            [349, 329],
            [334, 293],
            [293, 333],
            [333, 334],
            [366, 323],
            [323, 447],
            [447, 366],
            [316, 15],
            [15, 315],
            [315, 316],
            [331, 358],
            [358, 279],
            [279, 331],
            [317, 14],
            [14, 316],
            [316, 317],
            [8, 285],
            [285, 9],
            [9, 8],
            [277, 329],
            [329, 350],
            [350, 277],
            [253, 374],
            [374, 252],
            [252, 253],
            [319, 318],
            [318, 403],
            [403, 319],
            [351, 6],
            [6, 419],
            [419, 351],
            [324, 318],
            [318, 325],
            [325, 324],
            [397, 367],
            [367, 365],
            [365, 397],
            [288, 435],
            [435, 397],
            [397, 288],
            [278, 344],
            [344, 439],
            [439, 278],
            [310, 272],
            [272, 311],
            [311, 310],
            [248, 195],
            [195, 281],
            [281, 248],
            [375, 273],
            [273, 291],
            [291, 375],
            [175, 396],
            [396, 199],
            [199, 175],
            [312, 311],
            [311, 268],
            [268, 312],
            [276, 283],
            [283, 445],
            [445, 276],
            [390, 373],
            [373, 339],
            [339, 390],
            [295, 282],
            [282, 296],
            [296, 295],
            [448, 449],
            [449, 346],
            [346, 448],
            [356, 264],
            [264, 454],
            [454, 356],
            [337, 336],
            [336, 299],
            [299, 337],
            [337, 338],
            [338, 151],
            [151, 337],
            [294, 278],
            [278, 455],
            [455, 294],
            [308, 292],
            [292, 415],
            [415, 308],
            [429, 358],
            [358, 355],
            [355, 429],
            [265, 340],
            [340, 372],
            [372, 265],
            [352, 346],
            [346, 280],
            [280, 352],
            [295, 442],
            [442, 282],
            [282, 295],
            [354, 19],
            [19, 370],
            [370, 354],
            [285, 441],
            [441, 295],
            [295, 285],
            [195, 248],
            [248, 197],
            [197, 195],
            [457, 440],
            [440, 274],
            [274, 457],
            [301, 300],
            [300, 368],
            [368, 301],
            [417, 351],
            [351, 465],
            [465, 417],
            [251, 301],
            [301, 389],
            [389, 251],
            [394, 395],
            [395, 379],
            [379, 394],
            [399, 412],
            [412, 419],
            [419, 399],
            [410, 436],
            [436, 322],
            [322, 410],
            [326, 2],
            [2, 393],
            [393, 326],
            [354, 370],
            [370, 461],
            [461, 354],
            [393, 164],
            [164, 267],
            [267, 393],
            [268, 302],
            [302, 12],
            [12, 268],
            [312, 268],
            [268, 13],
            [13, 312],
            [298, 293],
            [293, 301],
            [301, 298],
            [265, 446],
            [446, 340],
            [340, 265],
            [280, 330],
            [330, 425],
            [425, 280],
            [322, 426],
            [426, 391],
            [391, 322],
            [420, 429],
            [429, 437],
            [437, 420],
            [393, 391],
            [391, 326],
            [326, 393],
            [344, 440],
            [440, 438],
            [438, 344],
            [458, 459],
            [459, 461],
            [461, 458],
            [364, 434],
            [434, 394],
            [394, 364],
            [428, 396],
            [396, 262],
            [262, 428],
            [274, 354],
            [354, 457],
            [457, 274],
            [317, 316],
            [316, 402],
            [402, 317],
            [316, 315],
            [315, 403],
            [403, 316],
            [315, 314],
            [314, 404],
            [404, 315],
            [314, 313],
            [313, 405],
            [405, 314],
            [313, 421],
            [421, 406],
            [406, 313],
            [323, 366],
            [366, 361],
            [361, 323],
            [292, 306],
            [306, 407],
            [407, 292],
            [306, 291],
            [291, 408],
            [408, 306],
            [291, 287],
            [287, 409],
            [409, 291],
            [287, 432],
            [432, 410],
            [410, 287],
            [427, 434],
            [434, 411],
            [411, 427],
            [372, 264],
            [264, 383],
            [383, 372],
            [459, 309],
            [309, 457],
            [457, 459],
            [366, 352],
            [352, 401],
            [401, 366],
            [1, 274],
            [274, 4],
            [4, 1],
            [418, 421],
            [421, 262],
            [262, 418],
            [331, 294],
            [294, 358],
            [358, 331],
            [435, 433],
            [433, 367],
            [367, 435],
            [392, 289],
            [289, 439],
            [439, 392],
            [328, 462],
            [462, 326],
            [326, 328],
            [94, 2],
            [2, 370],
            [370, 94],
            [289, 305],
            [305, 455],
            [455, 289],
            [339, 254],
            [254, 448],
            [448, 339],
            [359, 255],
            [255, 446],
            [446, 359],
            [254, 253],
            [253, 449],
            [449, 254],
            [253, 252],
            [252, 450],
            [450, 253],
            [252, 256],
            [256, 451],
            [451, 252],
            [256, 341],
            [341, 452],
            [452, 256],
            [414, 413],
            [413, 463],
            [463, 414],
            [286, 441],
            [441, 414],
            [414, 286],
            [286, 258],
            [258, 441],
            [441, 286],
            [258, 257],
            [257, 442],
            [442, 258],
            [257, 259],
            [259, 443],
            [443, 257],
            [259, 260],
            [260, 444],
            [444, 259],
            [260, 467],
            [467, 445],
            [445, 260],
            [309, 459],
            [459, 250],
            [250, 309],
            [305, 289],
            [289, 290],
            [290, 305],
            [305, 290],
            [290, 460],
            [460, 305],
            [401, 376],
            [376, 435],
            [435, 401],
            [309, 250],
            [250, 392],
            [392, 309],
            [376, 411],
            [411, 433],
            [433, 376],
            [453, 341],
            [341, 464],
            [464, 453],
            [357, 453],
            [453, 465],
            [465, 357],
            [343, 357],
            [357, 412],
            [412, 343],
            [437, 343],
            [343, 399],
            [399, 437],
            [344, 360],
            [360, 440],
            [440, 344],
            [420, 437],
            [437, 456],
            [456, 420],
            [360, 420],
            [420, 363],
            [363, 360],
            [361, 401],
            [401, 288],
            [288, 361],
            [265, 372],
            [372, 353],
            [353, 265],
            [390, 339],
            [339, 249],
            [249, 390],
            [339, 448],
            [448, 255],
            [255, 339]
          ]),
          G('VERSION', '0.4.1646425229');
      }.call(e));
    }
  }),
  ed = Re({
    'node_modules/long/src/long.js'(e, t) {
      t.exports = r;
      var a = null;
      try {
        a = new WebAssembly.Instance(
          new WebAssembly.Module(
            new Uint8Array([
              0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1,
              127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117,
              108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114,
              101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104,
              105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1,
              173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32,
              135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134,
              132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0,
              32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,
              32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36,
              1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32,
              134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0,
              173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34,
              4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
            ])
          ),
          {}
        ).exports;
      } catch {}
      function r(R, _, q) {
        (this.low = R | 0), (this.high = _ | 0), (this.unsigned = !!q);
      }
      r.prototype.__isLong__, Object.defineProperty(r.prototype, '__isLong__', { value: !0 });
      function n(R) {
        return (R && R.__isLong__) === !0;
      }
      r.isLong = n;
      var s = {},
        p = {};
      function i(R, _) {
        var q, G, ie;
        return _
          ? ((R >>>= 0),
            (ie = 0 <= R && R < 256) && ((G = p[R]), G)
              ? G
              : ((q = l(R, (R | 0) < 0 ? -1 : 0, !0)), ie && (p[R] = q), q))
          : ((R |= 0),
            (ie = -128 <= R && R < 128) && ((G = s[R]), G)
              ? G
              : ((q = l(R, R < 0 ? -1 : 0, !1)), ie && (s[R] = q), q));
      }
      r.fromInt = i;
      function d(R, _) {
        if (isNaN(R)) return _ ? C : M;
        if (_) {
          if (R < 0) return C;
          if (R >= T) return J;
        } else {
          if (R <= -O) return Z;
          if (R + 1 >= O) return Y;
        }
        return R < 0 ? d(-R, _).neg() : l(R % N | 0, (R / N) | 0, _);
      }
      r.fromNumber = d;
      function l(R, _, q) {
        return new r(R, _, q);
      }
      r.fromBits = l;
      var m = Math.pow;
      function u(R, _, q) {
        if (R.length === 0) throw Error('empty string');
        if (R === 'NaN' || R === 'Infinity' || R === '+Infinity' || R === '-Infinity') return M;
        if (
          (typeof _ == 'number' ? ((q = _), (_ = !1)) : (_ = !!_), (q = q || 10), q < 2 || 36 < q)
        )
          throw RangeError('radix');
        var G;
        if ((G = R.indexOf('-')) > 0) throw Error('interior hyphen');
        if (G === 0) return u(R.substring(1), _, q).neg();
        for (var ie = d(m(q, 8)), ne = M, ye = 0; ye < R.length; ye += 8) {
          var De = Math.min(8, R.length - ye),
            Ce = parseInt(R.substring(ye, ye + De), q);
          if (De < 8) {
            var Fe = d(m(q, De));
            ne = ne.mul(Fe).add(d(Ce));
          } else (ne = ne.mul(ie)), (ne = ne.add(d(Ce)));
        }
        return (ne.unsigned = _), ne;
      }
      r.fromString = u;
      function f(R, _) {
        return typeof R == 'number'
          ? d(R, _)
          : typeof R == 'string'
          ? u(R, _)
          : l(R.low, R.high, typeof _ == 'boolean' ? _ : R.unsigned);
      }
      r.fromValue = f;
      var g = 1 << 16,
        y = 1 << 24,
        N = g * g,
        T = N * N,
        O = T / 2,
        B = i(y),
        M = i(0);
      r.ZERO = M;
      var C = i(0, !0);
      r.UZERO = C;
      var L = i(1);
      r.ONE = L;
      var z = i(1, !0);
      r.UONE = z;
      var X = i(-1);
      r.NEG_ONE = X;
      var Y = l(4294967295 | 0, 2147483647 | 0, !1);
      r.MAX_VALUE = Y;
      var J = l(4294967295 | 0, 4294967295 | 0, !0);
      r.MAX_UNSIGNED_VALUE = J;
      var Z = l(0, 2147483648 | 0, !1);
      r.MIN_VALUE = Z;
      var F = r.prototype;
      (F.toInt = function () {
        return this.unsigned ? this.low >>> 0 : this.low;
      }),
        (F.toNumber = function () {
          return this.unsigned
            ? (this.high >>> 0) * N + (this.low >>> 0)
            : this.high * N + (this.low >>> 0);
        }),
        (F.toString = function (_) {
          if (((_ = _ || 10), _ < 2 || 36 < _)) throw RangeError('radix');
          if (this.isZero()) return '0';
          if (this.isNegative())
            if (this.eq(Z)) {
              var q = d(_),
                G = this.div(q),
                ie = G.mul(q).sub(this);
              return G.toString(_) + ie.toInt().toString(_);
            } else return '-' + this.neg().toString(_);
          for (var ne = d(m(_, 6), this.unsigned), ye = this, De = ''; ; ) {
            var Ce = ye.div(ne),
              Fe = ye.sub(Ce.mul(ne)).toInt() >>> 0,
              xe = Fe.toString(_);
            if (((ye = Ce), ye.isZero())) return xe + De;
            for (; xe.length < 6; ) xe = '0' + xe;
            De = '' + xe + De;
          }
        }),
        (F.getHighBits = function () {
          return this.high;
        }),
        (F.getHighBitsUnsigned = function () {
          return this.high >>> 0;
        }),
        (F.getLowBits = function () {
          return this.low;
        }),
        (F.getLowBitsUnsigned = function () {
          return this.low >>> 0;
        }),
        (F.getNumBitsAbs = function () {
          if (this.isNegative()) return this.eq(Z) ? 64 : this.neg().getNumBitsAbs();
          for (
            var _ = this.high != 0 ? this.high : this.low, q = 31;
            q > 0 && (_ & (1 << q)) == 0;
            q--
          );
          return this.high != 0 ? q + 33 : q + 1;
        }),
        (F.isZero = function () {
          return this.high === 0 && this.low === 0;
        }),
        (F.eqz = F.isZero),
        (F.isNegative = function () {
          return !this.unsigned && this.high < 0;
        }),
        (F.isPositive = function () {
          return this.unsigned || this.high >= 0;
        }),
        (F.isOdd = function () {
          return (this.low & 1) == 1;
        }),
        (F.isEven = function () {
          return (this.low & 1) == 0;
        }),
        (F.equals = function (_) {
          return (
            n(_) || (_ = f(_)),
            this.unsigned !== _.unsigned && this.high >>> 31 == 1 && _.high >>> 31 == 1
              ? !1
              : this.high === _.high && this.low === _.low
          );
        }),
        (F.eq = F.equals),
        (F.notEquals = function (_) {
          return !this.eq(_);
        }),
        (F.neq = F.notEquals),
        (F.ne = F.notEquals),
        (F.lessThan = function (_) {
          return this.comp(_) < 0;
        }),
        (F.lt = F.lessThan),
        (F.lessThanOrEqual = function (_) {
          return this.comp(_) <= 0;
        }),
        (F.lte = F.lessThanOrEqual),
        (F.le = F.lessThanOrEqual),
        (F.greaterThan = function (_) {
          return this.comp(_) > 0;
        }),
        (F.gt = F.greaterThan),
        (F.greaterThanOrEqual = function (_) {
          return this.comp(_) >= 0;
        }),
        (F.gte = F.greaterThanOrEqual),
        (F.ge = F.greaterThanOrEqual),
        (F.compare = function (_) {
          if ((n(_) || (_ = f(_)), this.eq(_))) return 0;
          var q = this.isNegative(),
            G = _.isNegative();
          return q && !G
            ? -1
            : !q && G
            ? 1
            : this.unsigned
            ? _.high >>> 0 > this.high >>> 0 ||
              (_.high === this.high && _.low >>> 0 > this.low >>> 0)
              ? -1
              : 1
            : this.sub(_).isNegative()
            ? -1
            : 1;
        }),
        (F.comp = F.compare),
        (F.negate = function () {
          return !this.unsigned && this.eq(Z) ? Z : this.not().add(L);
        }),
        (F.neg = F.negate),
        (F.add = function (_) {
          n(_) || (_ = f(_));
          var q = this.high >>> 16,
            G = this.high & 65535,
            ie = this.low >>> 16,
            ne = this.low & 65535,
            ye = _.high >>> 16,
            De = _.high & 65535,
            Ce = _.low >>> 16,
            Fe = _.low & 65535,
            xe = 0,
            Oe = 0,
            ke = 0,
            Me = 0;
          return (
            (Me += ne + Fe),
            (ke += Me >>> 16),
            (Me &= 65535),
            (ke += ie + Ce),
            (Oe += ke >>> 16),
            (ke &= 65535),
            (Oe += G + De),
            (xe += Oe >>> 16),
            (Oe &= 65535),
            (xe += q + ye),
            (xe &= 65535),
            l((ke << 16) | Me, (xe << 16) | Oe, this.unsigned)
          );
        }),
        (F.subtract = function (_) {
          return n(_) || (_ = f(_)), this.add(_.neg());
        }),
        (F.sub = F.subtract),
        (F.multiply = function (_) {
          if (this.isZero()) return M;
          if ((n(_) || (_ = f(_)), a)) {
            var q = a.mul(this.low, this.high, _.low, _.high);
            return l(q, a.get_high(), this.unsigned);
          }
          if (_.isZero()) return M;
          if (this.eq(Z)) return _.isOdd() ? Z : M;
          if (_.eq(Z)) return this.isOdd() ? Z : M;
          if (this.isNegative())
            return _.isNegative() ? this.neg().mul(_.neg()) : this.neg().mul(_).neg();
          if (_.isNegative()) return this.mul(_.neg()).neg();
          if (this.lt(B) && _.lt(B)) return d(this.toNumber() * _.toNumber(), this.unsigned);
          var G = this.high >>> 16,
            ie = this.high & 65535,
            ne = this.low >>> 16,
            ye = this.low & 65535,
            De = _.high >>> 16,
            Ce = _.high & 65535,
            Fe = _.low >>> 16,
            xe = _.low & 65535,
            Oe = 0,
            ke = 0,
            Me = 0,
            Ct = 0;
          return (
            (Ct += ye * xe),
            (Me += Ct >>> 16),
            (Ct &= 65535),
            (Me += ne * xe),
            (ke += Me >>> 16),
            (Me &= 65535),
            (Me += ye * Fe),
            (ke += Me >>> 16),
            (Me &= 65535),
            (ke += ie * xe),
            (Oe += ke >>> 16),
            (ke &= 65535),
            (ke += ne * Fe),
            (Oe += ke >>> 16),
            (ke &= 65535),
            (ke += ye * Ce),
            (Oe += ke >>> 16),
            (ke &= 65535),
            (Oe += G * xe + ie * Fe + ne * Ce + ye * De),
            (Oe &= 65535),
            l((Me << 16) | Ct, (Oe << 16) | ke, this.unsigned)
          );
        }),
        (F.mul = F.multiply),
        (F.divide = function (_) {
          if ((n(_) || (_ = f(_)), _.isZero())) throw Error('division by zero');
          if (a) {
            if (!this.unsigned && this.high === -2147483648 && _.low === -1 && _.high === -1)
              return this;
            var q = (this.unsigned ? a.div_u : a.div_s)(this.low, this.high, _.low, _.high);
            return l(q, a.get_high(), this.unsigned);
          }
          if (this.isZero()) return this.unsigned ? C : M;
          var G, ie, ne;
          if (this.unsigned) {
            if ((_.unsigned || (_ = _.toUnsigned()), _.gt(this))) return C;
            if (_.gt(this.shru(1))) return z;
            ne = C;
          } else {
            if (this.eq(Z)) {
              if (_.eq(L) || _.eq(X)) return Z;
              if (_.eq(Z)) return L;
              var ye = this.shr(1);
              return (
                (G = ye.div(_).shl(1)),
                G.eq(M)
                  ? _.isNegative()
                    ? L
                    : X
                  : ((ie = this.sub(_.mul(G))), (ne = G.add(ie.div(_))), ne)
              );
            } else if (_.eq(Z)) return this.unsigned ? C : M;
            if (this.isNegative())
              return _.isNegative() ? this.neg().div(_.neg()) : this.neg().div(_).neg();
            if (_.isNegative()) return this.div(_.neg()).neg();
            ne = M;
          }
          for (ie = this; ie.gte(_); ) {
            G = Math.max(1, Math.floor(ie.toNumber() / _.toNumber()));
            for (
              var De = Math.ceil(Math.log(G) / Math.LN2),
                Ce = De <= 48 ? 1 : m(2, De - 48),
                Fe = d(G),
                xe = Fe.mul(_);
              xe.isNegative() || xe.gt(ie);

            )
              (G -= Ce), (Fe = d(G, this.unsigned)), (xe = Fe.mul(_));
            Fe.isZero() && (Fe = L), (ne = ne.add(Fe)), (ie = ie.sub(xe));
          }
          return ne;
        }),
        (F.div = F.divide),
        (F.modulo = function (_) {
          if ((n(_) || (_ = f(_)), a)) {
            var q = (this.unsigned ? a.rem_u : a.rem_s)(this.low, this.high, _.low, _.high);
            return l(q, a.get_high(), this.unsigned);
          }
          return this.sub(this.div(_).mul(_));
        }),
        (F.mod = F.modulo),
        (F.rem = F.modulo),
        (F.not = function () {
          return l(~this.low, ~this.high, this.unsigned);
        }),
        (F.and = function (_) {
          return n(_) || (_ = f(_)), l(this.low & _.low, this.high & _.high, this.unsigned);
        }),
        (F.or = function (_) {
          return n(_) || (_ = f(_)), l(this.low | _.low, this.high | _.high, this.unsigned);
        }),
        (F.xor = function (_) {
          return n(_) || (_ = f(_)), l(this.low ^ _.low, this.high ^ _.high, this.unsigned);
        }),
        (F.shiftLeft = function (_) {
          return (
            n(_) && (_ = _.toInt()),
            (_ &= 63) == 0
              ? this
              : _ < 32
              ? l(this.low << _, (this.high << _) | (this.low >>> (32 - _)), this.unsigned)
              : l(0, this.low << (_ - 32), this.unsigned)
          );
        }),
        (F.shl = F.shiftLeft),
        (F.shiftRight = function (_) {
          return (
            n(_) && (_ = _.toInt()),
            (_ &= 63) == 0
              ? this
              : _ < 32
              ? l((this.low >>> _) | (this.high << (32 - _)), this.high >> _, this.unsigned)
              : l(this.high >> (_ - 32), this.high >= 0 ? 0 : -1, this.unsigned)
          );
        }),
        (F.shr = F.shiftRight),
        (F.shiftRightUnsigned = function (_) {
          if ((n(_) && (_ = _.toInt()), (_ &= 63), _ === 0)) return this;
          var q = this.high;
          if (_ < 32) {
            var G = this.low;
            return l((G >>> _) | (q << (32 - _)), q >>> _, this.unsigned);
          } else return _ === 32 ? l(q, 0, this.unsigned) : l(q >>> (_ - 32), 0, this.unsigned);
        }),
        (F.shru = F.shiftRightUnsigned),
        (F.shr_u = F.shiftRightUnsigned),
        (F.toSigned = function () {
          return this.unsigned ? l(this.low, this.high, !1) : this;
        }),
        (F.toUnsigned = function () {
          return this.unsigned ? this : l(this.low, this.high, !0);
        }),
        (F.toBytes = function (_) {
          return _ ? this.toBytesLE() : this.toBytesBE();
        }),
        (F.toBytesLE = function () {
          var _ = this.high,
            q = this.low;
          return [
            q & 255,
            (q >>> 8) & 255,
            (q >>> 16) & 255,
            q >>> 24,
            _ & 255,
            (_ >>> 8) & 255,
            (_ >>> 16) & 255,
            _ >>> 24
          ];
        }),
        (F.toBytesBE = function () {
          var _ = this.high,
            q = this.low;
          return [
            _ >>> 24,
            (_ >>> 16) & 255,
            (_ >>> 8) & 255,
            _ & 255,
            q >>> 24,
            (q >>> 16) & 255,
            (q >>> 8) & 255,
            q & 255
          ];
        }),
        (r.fromBytes = function (_, q, G) {
          return G ? r.fromBytesLE(_, q) : r.fromBytesBE(_, q);
        }),
        (r.fromBytesLE = function (_, q) {
          return new r(
            _[0] | (_[1] << 8) | (_[2] << 16) | (_[3] << 24),
            _[4] | (_[5] << 8) | (_[6] << 16) | (_[7] << 24),
            q
          );
        }),
        (r.fromBytesBE = function (_, q) {
          return new r(
            (_[4] << 24) | (_[5] << 16) | (_[6] << 8) | _[7],
            (_[0] << 24) | (_[1] << 16) | (_[2] << 8) | _[3],
            q
          );
        });
    }
  }),
  mt,
  td = At({
    'browser-external:stream'() {
      mt = new Proxy(
        {},
        {
          get() {
            throw new Error(
              'Module "stream" has been externalized for browser compatibility and cannot be accessed in client code.'
            );
          }
        }
      );
    }
  }),
  Fr,
  ad = At({
    'browser-external:http'() {
      Fr = new Proxy(
        {},
        {
          get() {
            throw new Error(
              'Module "http" has been externalized for browser compatibility and cannot be accessed in client code.'
            );
          }
        }
      );
    }
  }),
  J1,
  rd = At({
    'browser-external:url'() {
      J1 = new Proxy(
        {},
        {
          get() {
            throw new Error(
              'Module "url" has been externalized for browser compatibility and cannot be accessed in client code.'
            );
          }
        }
      );
    }
  }),
  nd = Re({
    'node_modules/webidl-conversions/lib/index.js'(e, t) {
      'use strict';
      var a = {};
      t.exports = a;
      function r(p) {
        return p < 0 ? -1 : 1;
      }
      function n(p) {
        return p % 1 == 0.5 && (p & 1) == 0 ? Math.floor(p) : Math.round(p);
      }
      function s(p, i) {
        i.unsigned || --p;
        let d = i.unsigned ? 0 : -Math.pow(2, p),
          l = Math.pow(2, p) - 1,
          m = i.moduloBitLength ? Math.pow(2, i.moduloBitLength) : Math.pow(2, p),
          u = i.moduloBitLength ? Math.pow(2, i.moduloBitLength - 1) : Math.pow(2, p - 1);
        return function (f, g) {
          g || (g = {});
          let y = +f;
          if (g.enforceRange) {
            if (!Number.isFinite(y)) throw new TypeError('Argument is not a finite number');
            if (((y = r(y) * Math.floor(Math.abs(y))), y < d || y > l))
              throw new TypeError('Argument is not in byte range');
            return y;
          }
          if (!isNaN(y) && g.clamp) return (y = n(y)), y < d && (y = d), y > l && (y = l), y;
          if (!Number.isFinite(y) || y === 0) return 0;
          if (((y = r(y) * Math.floor(Math.abs(y))), (y = y % m), !i.unsigned && y >= u))
            return y - m;
          if (i.unsigned) {
            if (y < 0) y += m;
            else if (y === -0) return 0;
          }
          return y;
        };
      }
      (a.void = function () {}),
        (a.boolean = function (p) {
          return !!p;
        }),
        (a.byte = s(8, { unsigned: !1 })),
        (a.octet = s(8, { unsigned: !0 })),
        (a.short = s(16, { unsigned: !1 })),
        (a['unsigned short'] = s(16, { unsigned: !0 })),
        (a.long = s(32, { unsigned: !1 })),
        (a['unsigned long'] = s(32, { unsigned: !0 })),
        (a['long long'] = s(32, { unsigned: !1, moduloBitLength: 64 })),
        (a['unsigned long long'] = s(32, { unsigned: !0, moduloBitLength: 64 })),
        (a.double = function (p) {
          let i = +p;
          if (!Number.isFinite(i))
            throw new TypeError('Argument is not a finite floating-point value');
          return i;
        }),
        (a['unrestricted double'] = function (p) {
          let i = +p;
          if (isNaN(i)) throw new TypeError('Argument is NaN');
          return i;
        }),
        (a.float = a.double),
        (a['unrestricted float'] = a['unrestricted double']),
        (a.DOMString = function (p, i) {
          return i || (i = {}), i.treatNullAsEmptyString && p === null ? '' : String(p);
        }),
        (a.ByteString = function (p, i) {
          let d = String(p),
            l;
          for (let m = 0; (l = d.codePointAt(m)) !== void 0; ++m)
            if (l > 255) throw new TypeError('Argument is not a valid bytestring');
          return d;
        }),
        (a.USVString = function (p) {
          let i = String(p),
            d = i.length,
            l = [];
          for (let m = 0; m < d; ++m) {
            let u = i.charCodeAt(m);
            if (u < 55296 || u > 57343) l.push(String.fromCodePoint(u));
            else if (56320 <= u && u <= 57343) l.push(String.fromCodePoint(65533));
            else if (m === d - 1) l.push(String.fromCodePoint(65533));
            else {
              let f = i.charCodeAt(m + 1);
              if (56320 <= f && f <= 57343) {
                let g = u & 1023,
                  y = f & 1023;
                l.push(String.fromCodePoint((2 << 15) + (2 << 9) * g + y)), ++m;
              } else l.push(String.fromCodePoint(65533));
            }
          }
          return l.join('');
        }),
        (a.Date = function (p, i) {
          if (!(p instanceof Date)) throw new TypeError('Argument is not a Date object');
          if (!isNaN(p)) return p;
        }),
        (a.RegExp = function (p, i) {
          return p instanceof RegExp || (p = new RegExp(p)), p;
        });
    }
  }),
  sd = Re({
    'node_modules/whatwg-url/lib/utils.js'(e, t) {
      'use strict';
      (t.exports.mixin = function (r, n) {
        let s = Object.getOwnPropertyNames(n);
        for (let p = 0; p < s.length; ++p)
          Object.defineProperty(r, s[p], Object.getOwnPropertyDescriptor(n, s[p]));
      }),
        (t.exports.wrapperSymbol = Symbol('wrapper')),
        (t.exports.implSymbol = Symbol('impl')),
        (t.exports.wrapperForImpl = function (a) {
          return a[t.exports.wrapperSymbol];
        }),
        (t.exports.implForWrapper = function (a) {
          return a[t.exports.implSymbol];
        });
    }
  }),
  Br = {};
be(Br, {
  decode: () => Ua,
  default: () => Sp,
  encode: () => za,
  toASCII: () => Hr,
  toUnicode: () => qr,
  ucs2decode: () => Pr,
  ucs2encode: () => zr
});
function d1(e) {
  throw new RangeError(bp[e]);
}
function pd(e, t) {
  let a = [],
    r = e.length;
  for (; r--; ) a[r] = t(e[r]);
  return a;
}
function hp(e, t) {
  let a = e.split('@'),
    r = '';
  a.length > 1 && ((r = a[0] + '@'), (e = a[1])), (e = e.replace(wp, '.'));
  let n = e.split('.'),
    s = pd(n, t).join('.');
  return r + s;
}
function Pr(e) {
  let t = [],
    a = 0,
    r = e.length;
  for (; a < r; ) {
    let n = e.charCodeAt(a++);
    if (n >= 55296 && n <= 56319 && a < r) {
      let s = e.charCodeAt(a++);
      (s & 64512) == 56320 ? t.push(((n & 1023) << 10) + (s & 1023) + 65536) : (t.push(n), a--);
    } else t.push(n);
  }
  return t;
}
var l1,
  wt,
  Pa,
  D1,
  fp,
  vp,
  Rr,
  Lr,
  Ur,
  gp,
  yp,
  wp,
  bp,
  Ra,
  bt,
  La,
  zr,
  Np,
  jr,
  Mr,
  Ua,
  za,
  qr,
  Hr,
  _p,
  Sp,
  Tp = At({
    'node_modules/punycode/punycode.es6.js'() {
      'use strict';
      (l1 = 2147483647),
        (wt = 36),
        (Pa = 1),
        (D1 = 26),
        (fp = 38),
        (vp = 700),
        (Rr = 72),
        (Lr = 128),
        (Ur = '-'),
        (gp = /^xn--/),
        (yp = /[^\0-\x7E]/),
        (wp = /[\x2E\u3002\uFF0E\uFF61]/g),
        (bp = {
          overflow: 'Overflow: input needs wider integers to process',
          'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
          'invalid-input': 'Invalid input'
        }),
        (Ra = wt - Pa),
        (bt = Math.floor),
        (La = String.fromCharCode),
        (zr = (e) => String.fromCodePoint(...e)),
        (Np = function (e) {
          return e - 48 < 10 ? e - 22 : e - 65 < 26 ? e - 65 : e - 97 < 26 ? e - 97 : wt;
        }),
        (jr = function (e, t) {
          return e + 22 + 75 * (e < 26) - ((t != 0) << 5);
        }),
        (Mr = function (e, t, a) {
          let r = 0;
          for (e = a ? bt(e / vp) : e >> 1, e += bt(e / t); e > (Ra * D1) >> 1; r += wt)
            e = bt(e / Ra);
          return bt(r + ((Ra + 1) * e) / (e + fp));
        }),
        (Ua = function (e) {
          let t = [],
            a = e.length,
            r = 0,
            n = Lr,
            s = Rr,
            p = e.lastIndexOf(Ur);
          p < 0 && (p = 0);
          for (let i = 0; i < p; ++i)
            e.charCodeAt(i) >= 128 && d1('not-basic'), t.push(e.charCodeAt(i));
          for (let i = p > 0 ? p + 1 : 0; i < a; ) {
            let d = r;
            for (let m = 1, u = wt; ; u += wt) {
              i >= a && d1('invalid-input');
              let f = Np(e.charCodeAt(i++));
              (f >= wt || f > bt((l1 - r) / m)) && d1('overflow'), (r += f * m);
              let g = u <= s ? Pa : u >= s + D1 ? D1 : u - s;
              if (f < g) break;
              let y = wt - g;
              m > bt(l1 / y) && d1('overflow'), (m *= y);
            }
            let l = t.length + 1;
            (s = Mr(r - d, l, d == 0)),
              bt(r / l) > l1 - n && d1('overflow'),
              (n += bt(r / l)),
              (r %= l),
              t.splice(r++, 0, n);
          }
          return String.fromCodePoint(...t);
        }),
        (za = function (e) {
          let t = [];
          e = Pr(e);
          let a = e.length,
            r = Lr,
            n = 0,
            s = Rr;
          for (let d of e) d < 128 && t.push(La(d));
          let p = t.length,
            i = p;
          for (p && t.push(Ur); i < a; ) {
            let d = l1;
            for (let m of e) m >= r && m < d && (d = m);
            let l = i + 1;
            d - r > bt((l1 - n) / l) && d1('overflow'), (n += (d - r) * l), (r = d);
            for (let m of e)
              if ((m < r && ++n > l1 && d1('overflow'), m == r)) {
                let u = n;
                for (let f = wt; ; f += wt) {
                  let g = f <= s ? Pa : f >= s + D1 ? D1 : f - s;
                  if (u < g) break;
                  let y = u - g,
                    N = wt - g;
                  t.push(La(jr(g + (y % N), 0))), (u = bt(y / N));
                }
                t.push(La(jr(u, 0))), (s = Mr(n, l, i == p)), (n = 0), ++i;
              }
            ++n, ++r;
          }
          return t.join('');
        }),
        (qr = function (e) {
          return hp(e, function (t) {
            return gp.test(t) ? Ua(t.slice(4).toLowerCase()) : t;
          });
        }),
        (Hr = function (e) {
          return hp(e, function (t) {
            return yp.test(t) ? 'xn--' + za(t) : t;
          });
        }),
        (_p = {
          version: '2.1.0',
          ucs2: { decode: Pr, encode: zr },
          decode: Ua,
          encode: za,
          toASCII: Hr,
          toUnicode: qr
        }),
        (Sp = _p);
    }
  }),
  id = Re({
    'node_modules/tr46/lib/mappingTable.json'(e, t) {
      t.exports = [
        [[0, 44], 'disallowed_STD3_valid'],
        [[45, 46], 'valid'],
        [[47, 47], 'disallowed_STD3_valid'],
        [[48, 57], 'valid'],
        [[58, 64], 'disallowed_STD3_valid'],
        [[65, 65], 'mapped', [97]],
        [[66, 66], 'mapped', [98]],
        [[67, 67], 'mapped', [99]],
        [[68, 68], 'mapped', [100]],
        [[69, 69], 'mapped', [101]],
        [[70, 70], 'mapped', [102]],
        [[71, 71], 'mapped', [103]],
        [[72, 72], 'mapped', [104]],
        [[73, 73], 'mapped', [105]],
        [[74, 74], 'mapped', [106]],
        [[75, 75], 'mapped', [107]],
        [[76, 76], 'mapped', [108]],
        [[77, 77], 'mapped', [109]],
        [[78, 78], 'mapped', [110]],
        [[79, 79], 'mapped', [111]],
        [[80, 80], 'mapped', [112]],
        [[81, 81], 'mapped', [113]],
        [[82, 82], 'mapped', [114]],
        [[83, 83], 'mapped', [115]],
        [[84, 84], 'mapped', [116]],
        [[85, 85], 'mapped', [117]],
        [[86, 86], 'mapped', [118]],
        [[87, 87], 'mapped', [119]],
        [[88, 88], 'mapped', [120]],
        [[89, 89], 'mapped', [121]],
        [[90, 90], 'mapped', [122]],
        [[91, 96], 'disallowed_STD3_valid'],
        [[97, 122], 'valid'],
        [[123, 127], 'disallowed_STD3_valid'],
        [[128, 159], 'disallowed'],
        [[160, 160], 'disallowed_STD3_mapped', [32]],
        [[161, 167], 'valid', [], 'NV8'],
        [[168, 168], 'disallowed_STD3_mapped', [32, 776]],
        [[169, 169], 'valid', [], 'NV8'],
        [[170, 170], 'mapped', [97]],
        [[171, 172], 'valid', [], 'NV8'],
        [[173, 173], 'ignored'],
        [[174, 174], 'valid', [], 'NV8'],
        [[175, 175], 'disallowed_STD3_mapped', [32, 772]],
        [[176, 177], 'valid', [], 'NV8'],
        [[178, 178], 'mapped', [50]],
        [[179, 179], 'mapped', [51]],
        [[180, 180], 'disallowed_STD3_mapped', [32, 769]],
        [[181, 181], 'mapped', [956]],
        [[182, 182], 'valid', [], 'NV8'],
        [[183, 183], 'valid'],
        [[184, 184], 'disallowed_STD3_mapped', [32, 807]],
        [[185, 185], 'mapped', [49]],
        [[186, 186], 'mapped', [111]],
        [[187, 187], 'valid', [], 'NV8'],
        [[188, 188], 'mapped', [49, 8260, 52]],
        [[189, 189], 'mapped', [49, 8260, 50]],
        [[190, 190], 'mapped', [51, 8260, 52]],
        [[191, 191], 'valid', [], 'NV8'],
        [[192, 192], 'mapped', [224]],
        [[193, 193], 'mapped', [225]],
        [[194, 194], 'mapped', [226]],
        [[195, 195], 'mapped', [227]],
        [[196, 196], 'mapped', [228]],
        [[197, 197], 'mapped', [229]],
        [[198, 198], 'mapped', [230]],
        [[199, 199], 'mapped', [231]],
        [[200, 200], 'mapped', [232]],
        [[201, 201], 'mapped', [233]],
        [[202, 202], 'mapped', [234]],
        [[203, 203], 'mapped', [235]],
        [[204, 204], 'mapped', [236]],
        [[205, 205], 'mapped', [237]],
        [[206, 206], 'mapped', [238]],
        [[207, 207], 'mapped', [239]],
        [[208, 208], 'mapped', [240]],
        [[209, 209], 'mapped', [241]],
        [[210, 210], 'mapped', [242]],
        [[211, 211], 'mapped', [243]],
        [[212, 212], 'mapped', [244]],
        [[213, 213], 'mapped', [245]],
        [[214, 214], 'mapped', [246]],
        [[215, 215], 'valid', [], 'NV8'],
        [[216, 216], 'mapped', [248]],
        [[217, 217], 'mapped', [249]],
        [[218, 218], 'mapped', [250]],
        [[219, 219], 'mapped', [251]],
        [[220, 220], 'mapped', [252]],
        [[221, 221], 'mapped', [253]],
        [[222, 222], 'mapped', [254]],
        [[223, 223], 'deviation', [115, 115]],
        [[224, 246], 'valid'],
        [[247, 247], 'valid', [], 'NV8'],
        [[248, 255], 'valid'],
        [[256, 256], 'mapped', [257]],
        [[257, 257], 'valid'],
        [[258, 258], 'mapped', [259]],
        [[259, 259], 'valid'],
        [[260, 260], 'mapped', [261]],
        [[261, 261], 'valid'],
        [[262, 262], 'mapped', [263]],
        [[263, 263], 'valid'],
        [[264, 264], 'mapped', [265]],
        [[265, 265], 'valid'],
        [[266, 266], 'mapped', [267]],
        [[267, 267], 'valid'],
        [[268, 268], 'mapped', [269]],
        [[269, 269], 'valid'],
        [[270, 270], 'mapped', [271]],
        [[271, 271], 'valid'],
        [[272, 272], 'mapped', [273]],
        [[273, 273], 'valid'],
        [[274, 274], 'mapped', [275]],
        [[275, 275], 'valid'],
        [[276, 276], 'mapped', [277]],
        [[277, 277], 'valid'],
        [[278, 278], 'mapped', [279]],
        [[279, 279], 'valid'],
        [[280, 280], 'mapped', [281]],
        [[281, 281], 'valid'],
        [[282, 282], 'mapped', [283]],
        [[283, 283], 'valid'],
        [[284, 284], 'mapped', [285]],
        [[285, 285], 'valid'],
        [[286, 286], 'mapped', [287]],
        [[287, 287], 'valid'],
        [[288, 288], 'mapped', [289]],
        [[289, 289], 'valid'],
        [[290, 290], 'mapped', [291]],
        [[291, 291], 'valid'],
        [[292, 292], 'mapped', [293]],
        [[293, 293], 'valid'],
        [[294, 294], 'mapped', [295]],
        [[295, 295], 'valid'],
        [[296, 296], 'mapped', [297]],
        [[297, 297], 'valid'],
        [[298, 298], 'mapped', [299]],
        [[299, 299], 'valid'],
        [[300, 300], 'mapped', [301]],
        [[301, 301], 'valid'],
        [[302, 302], 'mapped', [303]],
        [[303, 303], 'valid'],
        [[304, 304], 'mapped', [105, 775]],
        [[305, 305], 'valid'],
        [[306, 307], 'mapped', [105, 106]],
        [[308, 308], 'mapped', [309]],
        [[309, 309], 'valid'],
        [[310, 310], 'mapped', [311]],
        [[311, 312], 'valid'],
        [[313, 313], 'mapped', [314]],
        [[314, 314], 'valid'],
        [[315, 315], 'mapped', [316]],
        [[316, 316], 'valid'],
        [[317, 317], 'mapped', [318]],
        [[318, 318], 'valid'],
        [[319, 320], 'mapped', [108, 183]],
        [[321, 321], 'mapped', [322]],
        [[322, 322], 'valid'],
        [[323, 323], 'mapped', [324]],
        [[324, 324], 'valid'],
        [[325, 325], 'mapped', [326]],
        [[326, 326], 'valid'],
        [[327, 327], 'mapped', [328]],
        [[328, 328], 'valid'],
        [[329, 329], 'mapped', [700, 110]],
        [[330, 330], 'mapped', [331]],
        [[331, 331], 'valid'],
        [[332, 332], 'mapped', [333]],
        [[333, 333], 'valid'],
        [[334, 334], 'mapped', [335]],
        [[335, 335], 'valid'],
        [[336, 336], 'mapped', [337]],
        [[337, 337], 'valid'],
        [[338, 338], 'mapped', [339]],
        [[339, 339], 'valid'],
        [[340, 340], 'mapped', [341]],
        [[341, 341], 'valid'],
        [[342, 342], 'mapped', [343]],
        [[343, 343], 'valid'],
        [[344, 344], 'mapped', [345]],
        [[345, 345], 'valid'],
        [[346, 346], 'mapped', [347]],
        [[347, 347], 'valid'],
        [[348, 348], 'mapped', [349]],
        [[349, 349], 'valid'],
        [[350, 350], 'mapped', [351]],
        [[351, 351], 'valid'],
        [[352, 352], 'mapped', [353]],
        [[353, 353], 'valid'],
        [[354, 354], 'mapped', [355]],
        [[355, 355], 'valid'],
        [[356, 356], 'mapped', [357]],
        [[357, 357], 'valid'],
        [[358, 358], 'mapped', [359]],
        [[359, 359], 'valid'],
        [[360, 360], 'mapped', [361]],
        [[361, 361], 'valid'],
        [[362, 362], 'mapped', [363]],
        [[363, 363], 'valid'],
        [[364, 364], 'mapped', [365]],
        [[365, 365], 'valid'],
        [[366, 366], 'mapped', [367]],
        [[367, 367], 'valid'],
        [[368, 368], 'mapped', [369]],
        [[369, 369], 'valid'],
        [[370, 370], 'mapped', [371]],
        [[371, 371], 'valid'],
        [[372, 372], 'mapped', [373]],
        [[373, 373], 'valid'],
        [[374, 374], 'mapped', [375]],
        [[375, 375], 'valid'],
        [[376, 376], 'mapped', [255]],
        [[377, 377], 'mapped', [378]],
        [[378, 378], 'valid'],
        [[379, 379], 'mapped', [380]],
        [[380, 380], 'valid'],
        [[381, 381], 'mapped', [382]],
        [[382, 382], 'valid'],
        [[383, 383], 'mapped', [115]],
        [[384, 384], 'valid'],
        [[385, 385], 'mapped', [595]],
        [[386, 386], 'mapped', [387]],
        [[387, 387], 'valid'],
        [[388, 388], 'mapped', [389]],
        [[389, 389], 'valid'],
        [[390, 390], 'mapped', [596]],
        [[391, 391], 'mapped', [392]],
        [[392, 392], 'valid'],
        [[393, 393], 'mapped', [598]],
        [[394, 394], 'mapped', [599]],
        [[395, 395], 'mapped', [396]],
        [[396, 397], 'valid'],
        [[398, 398], 'mapped', [477]],
        [[399, 399], 'mapped', [601]],
        [[400, 400], 'mapped', [603]],
        [[401, 401], 'mapped', [402]],
        [[402, 402], 'valid'],
        [[403, 403], 'mapped', [608]],
        [[404, 404], 'mapped', [611]],
        [[405, 405], 'valid'],
        [[406, 406], 'mapped', [617]],
        [[407, 407], 'mapped', [616]],
        [[408, 408], 'mapped', [409]],
        [[409, 411], 'valid'],
        [[412, 412], 'mapped', [623]],
        [[413, 413], 'mapped', [626]],
        [[414, 414], 'valid'],
        [[415, 415], 'mapped', [629]],
        [[416, 416], 'mapped', [417]],
        [[417, 417], 'valid'],
        [[418, 418], 'mapped', [419]],
        [[419, 419], 'valid'],
        [[420, 420], 'mapped', [421]],
        [[421, 421], 'valid'],
        [[422, 422], 'mapped', [640]],
        [[423, 423], 'mapped', [424]],
        [[424, 424], 'valid'],
        [[425, 425], 'mapped', [643]],
        [[426, 427], 'valid'],
        [[428, 428], 'mapped', [429]],
        [[429, 429], 'valid'],
        [[430, 430], 'mapped', [648]],
        [[431, 431], 'mapped', [432]],
        [[432, 432], 'valid'],
        [[433, 433], 'mapped', [650]],
        [[434, 434], 'mapped', [651]],
        [[435, 435], 'mapped', [436]],
        [[436, 436], 'valid'],
        [[437, 437], 'mapped', [438]],
        [[438, 438], 'valid'],
        [[439, 439], 'mapped', [658]],
        [[440, 440], 'mapped', [441]],
        [[441, 443], 'valid'],
        [[444, 444], 'mapped', [445]],
        [[445, 451], 'valid'],
        [[452, 454], 'mapped', [100, 382]],
        [[455, 457], 'mapped', [108, 106]],
        [[458, 460], 'mapped', [110, 106]],
        [[461, 461], 'mapped', [462]],
        [[462, 462], 'valid'],
        [[463, 463], 'mapped', [464]],
        [[464, 464], 'valid'],
        [[465, 465], 'mapped', [466]],
        [[466, 466], 'valid'],
        [[467, 467], 'mapped', [468]],
        [[468, 468], 'valid'],
        [[469, 469], 'mapped', [470]],
        [[470, 470], 'valid'],
        [[471, 471], 'mapped', [472]],
        [[472, 472], 'valid'],
        [[473, 473], 'mapped', [474]],
        [[474, 474], 'valid'],
        [[475, 475], 'mapped', [476]],
        [[476, 477], 'valid'],
        [[478, 478], 'mapped', [479]],
        [[479, 479], 'valid'],
        [[480, 480], 'mapped', [481]],
        [[481, 481], 'valid'],
        [[482, 482], 'mapped', [483]],
        [[483, 483], 'valid'],
        [[484, 484], 'mapped', [485]],
        [[485, 485], 'valid'],
        [[486, 486], 'mapped', [487]],
        [[487, 487], 'valid'],
        [[488, 488], 'mapped', [489]],
        [[489, 489], 'valid'],
        [[490, 490], 'mapped', [491]],
        [[491, 491], 'valid'],
        [[492, 492], 'mapped', [493]],
        [[493, 493], 'valid'],
        [[494, 494], 'mapped', [495]],
        [[495, 496], 'valid'],
        [[497, 499], 'mapped', [100, 122]],
        [[500, 500], 'mapped', [501]],
        [[501, 501], 'valid'],
        [[502, 502], 'mapped', [405]],
        [[503, 503], 'mapped', [447]],
        [[504, 504], 'mapped', [505]],
        [[505, 505], 'valid'],
        [[506, 506], 'mapped', [507]],
        [[507, 507], 'valid'],
        [[508, 508], 'mapped', [509]],
        [[509, 509], 'valid'],
        [[510, 510], 'mapped', [511]],
        [[511, 511], 'valid'],
        [[512, 512], 'mapped', [513]],
        [[513, 513], 'valid'],
        [[514, 514], 'mapped', [515]],
        [[515, 515], 'valid'],
        [[516, 516], 'mapped', [517]],
        [[517, 517], 'valid'],
        [[518, 518], 'mapped', [519]],
        [[519, 519], 'valid'],
        [[520, 520], 'mapped', [521]],
        [[521, 521], 'valid'],
        [[522, 522], 'mapped', [523]],
        [[523, 523], 'valid'],
        [[524, 524], 'mapped', [525]],
        [[525, 525], 'valid'],
        [[526, 526], 'mapped', [527]],
        [[527, 527], 'valid'],
        [[528, 528], 'mapped', [529]],
        [[529, 529], 'valid'],
        [[530, 530], 'mapped', [531]],
        [[531, 531], 'valid'],
        [[532, 532], 'mapped', [533]],
        [[533, 533], 'valid'],
        [[534, 534], 'mapped', [535]],
        [[535, 535], 'valid'],
        [[536, 536], 'mapped', [537]],
        [[537, 537], 'valid'],
        [[538, 538], 'mapped', [539]],
        [[539, 539], 'valid'],
        [[540, 540], 'mapped', [541]],
        [[541, 541], 'valid'],
        [[542, 542], 'mapped', [543]],
        [[543, 543], 'valid'],
        [[544, 544], 'mapped', [414]],
        [[545, 545], 'valid'],
        [[546, 546], 'mapped', [547]],
        [[547, 547], 'valid'],
        [[548, 548], 'mapped', [549]],
        [[549, 549], 'valid'],
        [[550, 550], 'mapped', [551]],
        [[551, 551], 'valid'],
        [[552, 552], 'mapped', [553]],
        [[553, 553], 'valid'],
        [[554, 554], 'mapped', [555]],
        [[555, 555], 'valid'],
        [[556, 556], 'mapped', [557]],
        [[557, 557], 'valid'],
        [[558, 558], 'mapped', [559]],
        [[559, 559], 'valid'],
        [[560, 560], 'mapped', [561]],
        [[561, 561], 'valid'],
        [[562, 562], 'mapped', [563]],
        [[563, 563], 'valid'],
        [[564, 566], 'valid'],
        [[567, 569], 'valid'],
        [[570, 570], 'mapped', [11365]],
        [[571, 571], 'mapped', [572]],
        [[572, 572], 'valid'],
        [[573, 573], 'mapped', [410]],
        [[574, 574], 'mapped', [11366]],
        [[575, 576], 'valid'],
        [[577, 577], 'mapped', [578]],
        [[578, 578], 'valid'],
        [[579, 579], 'mapped', [384]],
        [[580, 580], 'mapped', [649]],
        [[581, 581], 'mapped', [652]],
        [[582, 582], 'mapped', [583]],
        [[583, 583], 'valid'],
        [[584, 584], 'mapped', [585]],
        [[585, 585], 'valid'],
        [[586, 586], 'mapped', [587]],
        [[587, 587], 'valid'],
        [[588, 588], 'mapped', [589]],
        [[589, 589], 'valid'],
        [[590, 590], 'mapped', [591]],
        [[591, 591], 'valid'],
        [[592, 680], 'valid'],
        [[681, 685], 'valid'],
        [[686, 687], 'valid'],
        [[688, 688], 'mapped', [104]],
        [[689, 689], 'mapped', [614]],
        [[690, 690], 'mapped', [106]],
        [[691, 691], 'mapped', [114]],
        [[692, 692], 'mapped', [633]],
        [[693, 693], 'mapped', [635]],
        [[694, 694], 'mapped', [641]],
        [[695, 695], 'mapped', [119]],
        [[696, 696], 'mapped', [121]],
        [[697, 705], 'valid'],
        [[706, 709], 'valid', [], 'NV8'],
        [[710, 721], 'valid'],
        [[722, 727], 'valid', [], 'NV8'],
        [[728, 728], 'disallowed_STD3_mapped', [32, 774]],
        [[729, 729], 'disallowed_STD3_mapped', [32, 775]],
        [[730, 730], 'disallowed_STD3_mapped', [32, 778]],
        [[731, 731], 'disallowed_STD3_mapped', [32, 808]],
        [[732, 732], 'disallowed_STD3_mapped', [32, 771]],
        [[733, 733], 'disallowed_STD3_mapped', [32, 779]],
        [[734, 734], 'valid', [], 'NV8'],
        [[735, 735], 'valid', [], 'NV8'],
        [[736, 736], 'mapped', [611]],
        [[737, 737], 'mapped', [108]],
        [[738, 738], 'mapped', [115]],
        [[739, 739], 'mapped', [120]],
        [[740, 740], 'mapped', [661]],
        [[741, 745], 'valid', [], 'NV8'],
        [[746, 747], 'valid', [], 'NV8'],
        [[748, 748], 'valid'],
        [[749, 749], 'valid', [], 'NV8'],
        [[750, 750], 'valid'],
        [[751, 767], 'valid', [], 'NV8'],
        [[768, 831], 'valid'],
        [[832, 832], 'mapped', [768]],
        [[833, 833], 'mapped', [769]],
        [[834, 834], 'valid'],
        [[835, 835], 'mapped', [787]],
        [[836, 836], 'mapped', [776, 769]],
        [[837, 837], 'mapped', [953]],
        [[838, 846], 'valid'],
        [[847, 847], 'ignored'],
        [[848, 855], 'valid'],
        [[856, 860], 'valid'],
        [[861, 863], 'valid'],
        [[864, 865], 'valid'],
        [[866, 866], 'valid'],
        [[867, 879], 'valid'],
        [[880, 880], 'mapped', [881]],
        [[881, 881], 'valid'],
        [[882, 882], 'mapped', [883]],
        [[883, 883], 'valid'],
        [[884, 884], 'mapped', [697]],
        [[885, 885], 'valid'],
        [[886, 886], 'mapped', [887]],
        [[887, 887], 'valid'],
        [[888, 889], 'disallowed'],
        [[890, 890], 'disallowed_STD3_mapped', [32, 953]],
        [[891, 893], 'valid'],
        [[894, 894], 'disallowed_STD3_mapped', [59]],
        [[895, 895], 'mapped', [1011]],
        [[896, 899], 'disallowed'],
        [[900, 900], 'disallowed_STD3_mapped', [32, 769]],
        [[901, 901], 'disallowed_STD3_mapped', [32, 776, 769]],
        [[902, 902], 'mapped', [940]],
        [[903, 903], 'mapped', [183]],
        [[904, 904], 'mapped', [941]],
        [[905, 905], 'mapped', [942]],
        [[906, 906], 'mapped', [943]],
        [[907, 907], 'disallowed'],
        [[908, 908], 'mapped', [972]],
        [[909, 909], 'disallowed'],
        [[910, 910], 'mapped', [973]],
        [[911, 911], 'mapped', [974]],
        [[912, 912], 'valid'],
        [[913, 913], 'mapped', [945]],
        [[914, 914], 'mapped', [946]],
        [[915, 915], 'mapped', [947]],
        [[916, 916], 'mapped', [948]],
        [[917, 917], 'mapped', [949]],
        [[918, 918], 'mapped', [950]],
        [[919, 919], 'mapped', [951]],
        [[920, 920], 'mapped', [952]],
        [[921, 921], 'mapped', [953]],
        [[922, 922], 'mapped', [954]],
        [[923, 923], 'mapped', [955]],
        [[924, 924], 'mapped', [956]],
        [[925, 925], 'mapped', [957]],
        [[926, 926], 'mapped', [958]],
        [[927, 927], 'mapped', [959]],
        [[928, 928], 'mapped', [960]],
        [[929, 929], 'mapped', [961]],
        [[930, 930], 'disallowed'],
        [[931, 931], 'mapped', [963]],
        [[932, 932], 'mapped', [964]],
        [[933, 933], 'mapped', [965]],
        [[934, 934], 'mapped', [966]],
        [[935, 935], 'mapped', [967]],
        [[936, 936], 'mapped', [968]],
        [[937, 937], 'mapped', [969]],
        [[938, 938], 'mapped', [970]],
        [[939, 939], 'mapped', [971]],
        [[940, 961], 'valid'],
        [[962, 962], 'deviation', [963]],
        [[963, 974], 'valid'],
        [[975, 975], 'mapped', [983]],
        [[976, 976], 'mapped', [946]],
        [[977, 977], 'mapped', [952]],
        [[978, 978], 'mapped', [965]],
        [[979, 979], 'mapped', [973]],
        [[980, 980], 'mapped', [971]],
        [[981, 981], 'mapped', [966]],
        [[982, 982], 'mapped', [960]],
        [[983, 983], 'valid'],
        [[984, 984], 'mapped', [985]],
        [[985, 985], 'valid'],
        [[986, 986], 'mapped', [987]],
        [[987, 987], 'valid'],
        [[988, 988], 'mapped', [989]],
        [[989, 989], 'valid'],
        [[990, 990], 'mapped', [991]],
        [[991, 991], 'valid'],
        [[992, 992], 'mapped', [993]],
        [[993, 993], 'valid'],
        [[994, 994], 'mapped', [995]],
        [[995, 995], 'valid'],
        [[996, 996], 'mapped', [997]],
        [[997, 997], 'valid'],
        [[998, 998], 'mapped', [999]],
        [[999, 999], 'valid'],
        [[1e3, 1e3], 'mapped', [1001]],
        [[1001, 1001], 'valid'],
        [[1002, 1002], 'mapped', [1003]],
        [[1003, 1003], 'valid'],
        [[1004, 1004], 'mapped', [1005]],
        [[1005, 1005], 'valid'],
        [[1006, 1006], 'mapped', [1007]],
        [[1007, 1007], 'valid'],
        [[1008, 1008], 'mapped', [954]],
        [[1009, 1009], 'mapped', [961]],
        [[1010, 1010], 'mapped', [963]],
        [[1011, 1011], 'valid'],
        [[1012, 1012], 'mapped', [952]],
        [[1013, 1013], 'mapped', [949]],
        [[1014, 1014], 'valid', [], 'NV8'],
        [[1015, 1015], 'mapped', [1016]],
        [[1016, 1016], 'valid'],
        [[1017, 1017], 'mapped', [963]],
        [[1018, 1018], 'mapped', [1019]],
        [[1019, 1019], 'valid'],
        [[1020, 1020], 'valid'],
        [[1021, 1021], 'mapped', [891]],
        [[1022, 1022], 'mapped', [892]],
        [[1023, 1023], 'mapped', [893]],
        [[1024, 1024], 'mapped', [1104]],
        [[1025, 1025], 'mapped', [1105]],
        [[1026, 1026], 'mapped', [1106]],
        [[1027, 1027], 'mapped', [1107]],
        [[1028, 1028], 'mapped', [1108]],
        [[1029, 1029], 'mapped', [1109]],
        [[1030, 1030], 'mapped', [1110]],
        [[1031, 1031], 'mapped', [1111]],
        [[1032, 1032], 'mapped', [1112]],
        [[1033, 1033], 'mapped', [1113]],
        [[1034, 1034], 'mapped', [1114]],
        [[1035, 1035], 'mapped', [1115]],
        [[1036, 1036], 'mapped', [1116]],
        [[1037, 1037], 'mapped', [1117]],
        [[1038, 1038], 'mapped', [1118]],
        [[1039, 1039], 'mapped', [1119]],
        [[1040, 1040], 'mapped', [1072]],
        [[1041, 1041], 'mapped', [1073]],
        [[1042, 1042], 'mapped', [1074]],
        [[1043, 1043], 'mapped', [1075]],
        [[1044, 1044], 'mapped', [1076]],
        [[1045, 1045], 'mapped', [1077]],
        [[1046, 1046], 'mapped', [1078]],
        [[1047, 1047], 'mapped', [1079]],
        [[1048, 1048], 'mapped', [1080]],
        [[1049, 1049], 'mapped', [1081]],
        [[1050, 1050], 'mapped', [1082]],
        [[1051, 1051], 'mapped', [1083]],
        [[1052, 1052], 'mapped', [1084]],
        [[1053, 1053], 'mapped', [1085]],
        [[1054, 1054], 'mapped', [1086]],
        [[1055, 1055], 'mapped', [1087]],
        [[1056, 1056], 'mapped', [1088]],
        [[1057, 1057], 'mapped', [1089]],
        [[1058, 1058], 'mapped', [1090]],
        [[1059, 1059], 'mapped', [1091]],
        [[1060, 1060], 'mapped', [1092]],
        [[1061, 1061], 'mapped', [1093]],
        [[1062, 1062], 'mapped', [1094]],
        [[1063, 1063], 'mapped', [1095]],
        [[1064, 1064], 'mapped', [1096]],
        [[1065, 1065], 'mapped', [1097]],
        [[1066, 1066], 'mapped', [1098]],
        [[1067, 1067], 'mapped', [1099]],
        [[1068, 1068], 'mapped', [1100]],
        [[1069, 1069], 'mapped', [1101]],
        [[1070, 1070], 'mapped', [1102]],
        [[1071, 1071], 'mapped', [1103]],
        [[1072, 1103], 'valid'],
        [[1104, 1104], 'valid'],
        [[1105, 1116], 'valid'],
        [[1117, 1117], 'valid'],
        [[1118, 1119], 'valid'],
        [[1120, 1120], 'mapped', [1121]],
        [[1121, 1121], 'valid'],
        [[1122, 1122], 'mapped', [1123]],
        [[1123, 1123], 'valid'],
        [[1124, 1124], 'mapped', [1125]],
        [[1125, 1125], 'valid'],
        [[1126, 1126], 'mapped', [1127]],
        [[1127, 1127], 'valid'],
        [[1128, 1128], 'mapped', [1129]],
        [[1129, 1129], 'valid'],
        [[1130, 1130], 'mapped', [1131]],
        [[1131, 1131], 'valid'],
        [[1132, 1132], 'mapped', [1133]],
        [[1133, 1133], 'valid'],
        [[1134, 1134], 'mapped', [1135]],
        [[1135, 1135], 'valid'],
        [[1136, 1136], 'mapped', [1137]],
        [[1137, 1137], 'valid'],
        [[1138, 1138], 'mapped', [1139]],
        [[1139, 1139], 'valid'],
        [[1140, 1140], 'mapped', [1141]],
        [[1141, 1141], 'valid'],
        [[1142, 1142], 'mapped', [1143]],
        [[1143, 1143], 'valid'],
        [[1144, 1144], 'mapped', [1145]],
        [[1145, 1145], 'valid'],
        [[1146, 1146], 'mapped', [1147]],
        [[1147, 1147], 'valid'],
        [[1148, 1148], 'mapped', [1149]],
        [[1149, 1149], 'valid'],
        [[1150, 1150], 'mapped', [1151]],
        [[1151, 1151], 'valid'],
        [[1152, 1152], 'mapped', [1153]],
        [[1153, 1153], 'valid'],
        [[1154, 1154], 'valid', [], 'NV8'],
        [[1155, 1158], 'valid'],
        [[1159, 1159], 'valid'],
        [[1160, 1161], 'valid', [], 'NV8'],
        [[1162, 1162], 'mapped', [1163]],
        [[1163, 1163], 'valid'],
        [[1164, 1164], 'mapped', [1165]],
        [[1165, 1165], 'valid'],
        [[1166, 1166], 'mapped', [1167]],
        [[1167, 1167], 'valid'],
        [[1168, 1168], 'mapped', [1169]],
        [[1169, 1169], 'valid'],
        [[1170, 1170], 'mapped', [1171]],
        [[1171, 1171], 'valid'],
        [[1172, 1172], 'mapped', [1173]],
        [[1173, 1173], 'valid'],
        [[1174, 1174], 'mapped', [1175]],
        [[1175, 1175], 'valid'],
        [[1176, 1176], 'mapped', [1177]],
        [[1177, 1177], 'valid'],
        [[1178, 1178], 'mapped', [1179]],
        [[1179, 1179], 'valid'],
        [[1180, 1180], 'mapped', [1181]],
        [[1181, 1181], 'valid'],
        [[1182, 1182], 'mapped', [1183]],
        [[1183, 1183], 'valid'],
        [[1184, 1184], 'mapped', [1185]],
        [[1185, 1185], 'valid'],
        [[1186, 1186], 'mapped', [1187]],
        [[1187, 1187], 'valid'],
        [[1188, 1188], 'mapped', [1189]],
        [[1189, 1189], 'valid'],
        [[1190, 1190], 'mapped', [1191]],
        [[1191, 1191], 'valid'],
        [[1192, 1192], 'mapped', [1193]],
        [[1193, 1193], 'valid'],
        [[1194, 1194], 'mapped', [1195]],
        [[1195, 1195], 'valid'],
        [[1196, 1196], 'mapped', [1197]],
        [[1197, 1197], 'valid'],
        [[1198, 1198], 'mapped', [1199]],
        [[1199, 1199], 'valid'],
        [[1200, 1200], 'mapped', [1201]],
        [[1201, 1201], 'valid'],
        [[1202, 1202], 'mapped', [1203]],
        [[1203, 1203], 'valid'],
        [[1204, 1204], 'mapped', [1205]],
        [[1205, 1205], 'valid'],
        [[1206, 1206], 'mapped', [1207]],
        [[1207, 1207], 'valid'],
        [[1208, 1208], 'mapped', [1209]],
        [[1209, 1209], 'valid'],
        [[1210, 1210], 'mapped', [1211]],
        [[1211, 1211], 'valid'],
        [[1212, 1212], 'mapped', [1213]],
        [[1213, 1213], 'valid'],
        [[1214, 1214], 'mapped', [1215]],
        [[1215, 1215], 'valid'],
        [[1216, 1216], 'disallowed'],
        [[1217, 1217], 'mapped', [1218]],
        [[1218, 1218], 'valid'],
        [[1219, 1219], 'mapped', [1220]],
        [[1220, 1220], 'valid'],
        [[1221, 1221], 'mapped', [1222]],
        [[1222, 1222], 'valid'],
        [[1223, 1223], 'mapped', [1224]],
        [[1224, 1224], 'valid'],
        [[1225, 1225], 'mapped', [1226]],
        [[1226, 1226], 'valid'],
        [[1227, 1227], 'mapped', [1228]],
        [[1228, 1228], 'valid'],
        [[1229, 1229], 'mapped', [1230]],
        [[1230, 1230], 'valid'],
        [[1231, 1231], 'valid'],
        [[1232, 1232], 'mapped', [1233]],
        [[1233, 1233], 'valid'],
        [[1234, 1234], 'mapped', [1235]],
        [[1235, 1235], 'valid'],
        [[1236, 1236], 'mapped', [1237]],
        [[1237, 1237], 'valid'],
        [[1238, 1238], 'mapped', [1239]],
        [[1239, 1239], 'valid'],
        [[1240, 1240], 'mapped', [1241]],
        [[1241, 1241], 'valid'],
        [[1242, 1242], 'mapped', [1243]],
        [[1243, 1243], 'valid'],
        [[1244, 1244], 'mapped', [1245]],
        [[1245, 1245], 'valid'],
        [[1246, 1246], 'mapped', [1247]],
        [[1247, 1247], 'valid'],
        [[1248, 1248], 'mapped', [1249]],
        [[1249, 1249], 'valid'],
        [[1250, 1250], 'mapped', [1251]],
        [[1251, 1251], 'valid'],
        [[1252, 1252], 'mapped', [1253]],
        [[1253, 1253], 'valid'],
        [[1254, 1254], 'mapped', [1255]],
        [[1255, 1255], 'valid'],
        [[1256, 1256], 'mapped', [1257]],
        [[1257, 1257], 'valid'],
        [[1258, 1258], 'mapped', [1259]],
        [[1259, 1259], 'valid'],
        [[1260, 1260], 'mapped', [1261]],
        [[1261, 1261], 'valid'],
        [[1262, 1262], 'mapped', [1263]],
        [[1263, 1263], 'valid'],
        [[1264, 1264], 'mapped', [1265]],
        [[1265, 1265], 'valid'],
        [[1266, 1266], 'mapped', [1267]],
        [[1267, 1267], 'valid'],
        [[1268, 1268], 'mapped', [1269]],
        [[1269, 1269], 'valid'],
        [[1270, 1270], 'mapped', [1271]],
        [[1271, 1271], 'valid'],
        [[1272, 1272], 'mapped', [1273]],
        [[1273, 1273], 'valid'],
        [[1274, 1274], 'mapped', [1275]],
        [[1275, 1275], 'valid'],
        [[1276, 1276], 'mapped', [1277]],
        [[1277, 1277], 'valid'],
        [[1278, 1278], 'mapped', [1279]],
        [[1279, 1279], 'valid'],
        [[1280, 1280], 'mapped', [1281]],
        [[1281, 1281], 'valid'],
        [[1282, 1282], 'mapped', [1283]],
        [[1283, 1283], 'valid'],
        [[1284, 1284], 'mapped', [1285]],
        [[1285, 1285], 'valid'],
        [[1286, 1286], 'mapped', [1287]],
        [[1287, 1287], 'valid'],
        [[1288, 1288], 'mapped', [1289]],
        [[1289, 1289], 'valid'],
        [[1290, 1290], 'mapped', [1291]],
        [[1291, 1291], 'valid'],
        [[1292, 1292], 'mapped', [1293]],
        [[1293, 1293], 'valid'],
        [[1294, 1294], 'mapped', [1295]],
        [[1295, 1295], 'valid'],
        [[1296, 1296], 'mapped', [1297]],
        [[1297, 1297], 'valid'],
        [[1298, 1298], 'mapped', [1299]],
        [[1299, 1299], 'valid'],
        [[1300, 1300], 'mapped', [1301]],
        [[1301, 1301], 'valid'],
        [[1302, 1302], 'mapped', [1303]],
        [[1303, 1303], 'valid'],
        [[1304, 1304], 'mapped', [1305]],
        [[1305, 1305], 'valid'],
        [[1306, 1306], 'mapped', [1307]],
        [[1307, 1307], 'valid'],
        [[1308, 1308], 'mapped', [1309]],
        [[1309, 1309], 'valid'],
        [[1310, 1310], 'mapped', [1311]],
        [[1311, 1311], 'valid'],
        [[1312, 1312], 'mapped', [1313]],
        [[1313, 1313], 'valid'],
        [[1314, 1314], 'mapped', [1315]],
        [[1315, 1315], 'valid'],
        [[1316, 1316], 'mapped', [1317]],
        [[1317, 1317], 'valid'],
        [[1318, 1318], 'mapped', [1319]],
        [[1319, 1319], 'valid'],
        [[1320, 1320], 'mapped', [1321]],
        [[1321, 1321], 'valid'],
        [[1322, 1322], 'mapped', [1323]],
        [[1323, 1323], 'valid'],
        [[1324, 1324], 'mapped', [1325]],
        [[1325, 1325], 'valid'],
        [[1326, 1326], 'mapped', [1327]],
        [[1327, 1327], 'valid'],
        [[1328, 1328], 'disallowed'],
        [[1329, 1329], 'mapped', [1377]],
        [[1330, 1330], 'mapped', [1378]],
        [[1331, 1331], 'mapped', [1379]],
        [[1332, 1332], 'mapped', [1380]],
        [[1333, 1333], 'mapped', [1381]],
        [[1334, 1334], 'mapped', [1382]],
        [[1335, 1335], 'mapped', [1383]],
        [[1336, 1336], 'mapped', [1384]],
        [[1337, 1337], 'mapped', [1385]],
        [[1338, 1338], 'mapped', [1386]],
        [[1339, 1339], 'mapped', [1387]],
        [[1340, 1340], 'mapped', [1388]],
        [[1341, 1341], 'mapped', [1389]],
        [[1342, 1342], 'mapped', [1390]],
        [[1343, 1343], 'mapped', [1391]],
        [[1344, 1344], 'mapped', [1392]],
        [[1345, 1345], 'mapped', [1393]],
        [[1346, 1346], 'mapped', [1394]],
        [[1347, 1347], 'mapped', [1395]],
        [[1348, 1348], 'mapped', [1396]],
        [[1349, 1349], 'mapped', [1397]],
        [[1350, 1350], 'mapped', [1398]],
        [[1351, 1351], 'mapped', [1399]],
        [[1352, 1352], 'mapped', [1400]],
        [[1353, 1353], 'mapped', [1401]],
        [[1354, 1354], 'mapped', [1402]],
        [[1355, 1355], 'mapped', [1403]],
        [[1356, 1356], 'mapped', [1404]],
        [[1357, 1357], 'mapped', [1405]],
        [[1358, 1358], 'mapped', [1406]],
        [[1359, 1359], 'mapped', [1407]],
        [[1360, 1360], 'mapped', [1408]],
        [[1361, 1361], 'mapped', [1409]],
        [[1362, 1362], 'mapped', [1410]],
        [[1363, 1363], 'mapped', [1411]],
        [[1364, 1364], 'mapped', [1412]],
        [[1365, 1365], 'mapped', [1413]],
        [[1366, 1366], 'mapped', [1414]],
        [[1367, 1368], 'disallowed'],
        [[1369, 1369], 'valid'],
        [[1370, 1375], 'valid', [], 'NV8'],
        [[1376, 1376], 'disallowed'],
        [[1377, 1414], 'valid'],
        [[1415, 1415], 'mapped', [1381, 1410]],
        [[1416, 1416], 'disallowed'],
        [[1417, 1417], 'valid', [], 'NV8'],
        [[1418, 1418], 'valid', [], 'NV8'],
        [[1419, 1420], 'disallowed'],
        [[1421, 1422], 'valid', [], 'NV8'],
        [[1423, 1423], 'valid', [], 'NV8'],
        [[1424, 1424], 'disallowed'],
        [[1425, 1441], 'valid'],
        [[1442, 1442], 'valid'],
        [[1443, 1455], 'valid'],
        [[1456, 1465], 'valid'],
        [[1466, 1466], 'valid'],
        [[1467, 1469], 'valid'],
        [[1470, 1470], 'valid', [], 'NV8'],
        [[1471, 1471], 'valid'],
        [[1472, 1472], 'valid', [], 'NV8'],
        [[1473, 1474], 'valid'],
        [[1475, 1475], 'valid', [], 'NV8'],
        [[1476, 1476], 'valid'],
        [[1477, 1477], 'valid'],
        [[1478, 1478], 'valid', [], 'NV8'],
        [[1479, 1479], 'valid'],
        [[1480, 1487], 'disallowed'],
        [[1488, 1514], 'valid'],
        [[1515, 1519], 'disallowed'],
        [[1520, 1524], 'valid'],
        [[1525, 1535], 'disallowed'],
        [[1536, 1539], 'disallowed'],
        [[1540, 1540], 'disallowed'],
        [[1541, 1541], 'disallowed'],
        [[1542, 1546], 'valid', [], 'NV8'],
        [[1547, 1547], 'valid', [], 'NV8'],
        [[1548, 1548], 'valid', [], 'NV8'],
        [[1549, 1551], 'valid', [], 'NV8'],
        [[1552, 1557], 'valid'],
        [[1558, 1562], 'valid'],
        [[1563, 1563], 'valid', [], 'NV8'],
        [[1564, 1564], 'disallowed'],
        [[1565, 1565], 'disallowed'],
        [[1566, 1566], 'valid', [], 'NV8'],
        [[1567, 1567], 'valid', [], 'NV8'],
        [[1568, 1568], 'valid'],
        [[1569, 1594], 'valid'],
        [[1595, 1599], 'valid'],
        [[1600, 1600], 'valid', [], 'NV8'],
        [[1601, 1618], 'valid'],
        [[1619, 1621], 'valid'],
        [[1622, 1624], 'valid'],
        [[1625, 1630], 'valid'],
        [[1631, 1631], 'valid'],
        [[1632, 1641], 'valid'],
        [[1642, 1645], 'valid', [], 'NV8'],
        [[1646, 1647], 'valid'],
        [[1648, 1652], 'valid'],
        [[1653, 1653], 'mapped', [1575, 1652]],
        [[1654, 1654], 'mapped', [1608, 1652]],
        [[1655, 1655], 'mapped', [1735, 1652]],
        [[1656, 1656], 'mapped', [1610, 1652]],
        [[1657, 1719], 'valid'],
        [[1720, 1721], 'valid'],
        [[1722, 1726], 'valid'],
        [[1727, 1727], 'valid'],
        [[1728, 1742], 'valid'],
        [[1743, 1743], 'valid'],
        [[1744, 1747], 'valid'],
        [[1748, 1748], 'valid', [], 'NV8'],
        [[1749, 1756], 'valid'],
        [[1757, 1757], 'disallowed'],
        [[1758, 1758], 'valid', [], 'NV8'],
        [[1759, 1768], 'valid'],
        [[1769, 1769], 'valid', [], 'NV8'],
        [[1770, 1773], 'valid'],
        [[1774, 1775], 'valid'],
        [[1776, 1785], 'valid'],
        [[1786, 1790], 'valid'],
        [[1791, 1791], 'valid'],
        [[1792, 1805], 'valid', [], 'NV8'],
        [[1806, 1806], 'disallowed'],
        [[1807, 1807], 'disallowed'],
        [[1808, 1836], 'valid'],
        [[1837, 1839], 'valid'],
        [[1840, 1866], 'valid'],
        [[1867, 1868], 'disallowed'],
        [[1869, 1871], 'valid'],
        [[1872, 1901], 'valid'],
        [[1902, 1919], 'valid'],
        [[1920, 1968], 'valid'],
        [[1969, 1969], 'valid'],
        [[1970, 1983], 'disallowed'],
        [[1984, 2037], 'valid'],
        [[2038, 2042], 'valid', [], 'NV8'],
        [[2043, 2047], 'disallowed'],
        [[2048, 2093], 'valid'],
        [[2094, 2095], 'disallowed'],
        [[2096, 2110], 'valid', [], 'NV8'],
        [[2111, 2111], 'disallowed'],
        [[2112, 2139], 'valid'],
        [[2140, 2141], 'disallowed'],
        [[2142, 2142], 'valid', [], 'NV8'],
        [[2143, 2207], 'disallowed'],
        [[2208, 2208], 'valid'],
        [[2209, 2209], 'valid'],
        [[2210, 2220], 'valid'],
        [[2221, 2226], 'valid'],
        [[2227, 2228], 'valid'],
        [[2229, 2274], 'disallowed'],
        [[2275, 2275], 'valid'],
        [[2276, 2302], 'valid'],
        [[2303, 2303], 'valid'],
        [[2304, 2304], 'valid'],
        [[2305, 2307], 'valid'],
        [[2308, 2308], 'valid'],
        [[2309, 2361], 'valid'],
        [[2362, 2363], 'valid'],
        [[2364, 2381], 'valid'],
        [[2382, 2382], 'valid'],
        [[2383, 2383], 'valid'],
        [[2384, 2388], 'valid'],
        [[2389, 2389], 'valid'],
        [[2390, 2391], 'valid'],
        [[2392, 2392], 'mapped', [2325, 2364]],
        [[2393, 2393], 'mapped', [2326, 2364]],
        [[2394, 2394], 'mapped', [2327, 2364]],
        [[2395, 2395], 'mapped', [2332, 2364]],
        [[2396, 2396], 'mapped', [2337, 2364]],
        [[2397, 2397], 'mapped', [2338, 2364]],
        [[2398, 2398], 'mapped', [2347, 2364]],
        [[2399, 2399], 'mapped', [2351, 2364]],
        [[2400, 2403], 'valid'],
        [[2404, 2405], 'valid', [], 'NV8'],
        [[2406, 2415], 'valid'],
        [[2416, 2416], 'valid', [], 'NV8'],
        [[2417, 2418], 'valid'],
        [[2419, 2423], 'valid'],
        [[2424, 2424], 'valid'],
        [[2425, 2426], 'valid'],
        [[2427, 2428], 'valid'],
        [[2429, 2429], 'valid'],
        [[2430, 2431], 'valid'],
        [[2432, 2432], 'valid'],
        [[2433, 2435], 'valid'],
        [[2436, 2436], 'disallowed'],
        [[2437, 2444], 'valid'],
        [[2445, 2446], 'disallowed'],
        [[2447, 2448], 'valid'],
        [[2449, 2450], 'disallowed'],
        [[2451, 2472], 'valid'],
        [[2473, 2473], 'disallowed'],
        [[2474, 2480], 'valid'],
        [[2481, 2481], 'disallowed'],
        [[2482, 2482], 'valid'],
        [[2483, 2485], 'disallowed'],
        [[2486, 2489], 'valid'],
        [[2490, 2491], 'disallowed'],
        [[2492, 2492], 'valid'],
        [[2493, 2493], 'valid'],
        [[2494, 2500], 'valid'],
        [[2501, 2502], 'disallowed'],
        [[2503, 2504], 'valid'],
        [[2505, 2506], 'disallowed'],
        [[2507, 2509], 'valid'],
        [[2510, 2510], 'valid'],
        [[2511, 2518], 'disallowed'],
        [[2519, 2519], 'valid'],
        [[2520, 2523], 'disallowed'],
        [[2524, 2524], 'mapped', [2465, 2492]],
        [[2525, 2525], 'mapped', [2466, 2492]],
        [[2526, 2526], 'disallowed'],
        [[2527, 2527], 'mapped', [2479, 2492]],
        [[2528, 2531], 'valid'],
        [[2532, 2533], 'disallowed'],
        [[2534, 2545], 'valid'],
        [[2546, 2554], 'valid', [], 'NV8'],
        [[2555, 2555], 'valid', [], 'NV8'],
        [[2556, 2560], 'disallowed'],
        [[2561, 2561], 'valid'],
        [[2562, 2562], 'valid'],
        [[2563, 2563], 'valid'],
        [[2564, 2564], 'disallowed'],
        [[2565, 2570], 'valid'],
        [[2571, 2574], 'disallowed'],
        [[2575, 2576], 'valid'],
        [[2577, 2578], 'disallowed'],
        [[2579, 2600], 'valid'],
        [[2601, 2601], 'disallowed'],
        [[2602, 2608], 'valid'],
        [[2609, 2609], 'disallowed'],
        [[2610, 2610], 'valid'],
        [[2611, 2611], 'mapped', [2610, 2620]],
        [[2612, 2612], 'disallowed'],
        [[2613, 2613], 'valid'],
        [[2614, 2614], 'mapped', [2616, 2620]],
        [[2615, 2615], 'disallowed'],
        [[2616, 2617], 'valid'],
        [[2618, 2619], 'disallowed'],
        [[2620, 2620], 'valid'],
        [[2621, 2621], 'disallowed'],
        [[2622, 2626], 'valid'],
        [[2627, 2630], 'disallowed'],
        [[2631, 2632], 'valid'],
        [[2633, 2634], 'disallowed'],
        [[2635, 2637], 'valid'],
        [[2638, 2640], 'disallowed'],
        [[2641, 2641], 'valid'],
        [[2642, 2648], 'disallowed'],
        [[2649, 2649], 'mapped', [2582, 2620]],
        [[2650, 2650], 'mapped', [2583, 2620]],
        [[2651, 2651], 'mapped', [2588, 2620]],
        [[2652, 2652], 'valid'],
        [[2653, 2653], 'disallowed'],
        [[2654, 2654], 'mapped', [2603, 2620]],
        [[2655, 2661], 'disallowed'],
        [[2662, 2676], 'valid'],
        [[2677, 2677], 'valid'],
        [[2678, 2688], 'disallowed'],
        [[2689, 2691], 'valid'],
        [[2692, 2692], 'disallowed'],
        [[2693, 2699], 'valid'],
        [[2700, 2700], 'valid'],
        [[2701, 2701], 'valid'],
        [[2702, 2702], 'disallowed'],
        [[2703, 2705], 'valid'],
        [[2706, 2706], 'disallowed'],
        [[2707, 2728], 'valid'],
        [[2729, 2729], 'disallowed'],
        [[2730, 2736], 'valid'],
        [[2737, 2737], 'disallowed'],
        [[2738, 2739], 'valid'],
        [[2740, 2740], 'disallowed'],
        [[2741, 2745], 'valid'],
        [[2746, 2747], 'disallowed'],
        [[2748, 2757], 'valid'],
        [[2758, 2758], 'disallowed'],
        [[2759, 2761], 'valid'],
        [[2762, 2762], 'disallowed'],
        [[2763, 2765], 'valid'],
        [[2766, 2767], 'disallowed'],
        [[2768, 2768], 'valid'],
        [[2769, 2783], 'disallowed'],
        [[2784, 2784], 'valid'],
        [[2785, 2787], 'valid'],
        [[2788, 2789], 'disallowed'],
        [[2790, 2799], 'valid'],
        [[2800, 2800], 'valid', [], 'NV8'],
        [[2801, 2801], 'valid', [], 'NV8'],
        [[2802, 2808], 'disallowed'],
        [[2809, 2809], 'valid'],
        [[2810, 2816], 'disallowed'],
        [[2817, 2819], 'valid'],
        [[2820, 2820], 'disallowed'],
        [[2821, 2828], 'valid'],
        [[2829, 2830], 'disallowed'],
        [[2831, 2832], 'valid'],
        [[2833, 2834], 'disallowed'],
        [[2835, 2856], 'valid'],
        [[2857, 2857], 'disallowed'],
        [[2858, 2864], 'valid'],
        [[2865, 2865], 'disallowed'],
        [[2866, 2867], 'valid'],
        [[2868, 2868], 'disallowed'],
        [[2869, 2869], 'valid'],
        [[2870, 2873], 'valid'],
        [[2874, 2875], 'disallowed'],
        [[2876, 2883], 'valid'],
        [[2884, 2884], 'valid'],
        [[2885, 2886], 'disallowed'],
        [[2887, 2888], 'valid'],
        [[2889, 2890], 'disallowed'],
        [[2891, 2893], 'valid'],
        [[2894, 2901], 'disallowed'],
        [[2902, 2903], 'valid'],
        [[2904, 2907], 'disallowed'],
        [[2908, 2908], 'mapped', [2849, 2876]],
        [[2909, 2909], 'mapped', [2850, 2876]],
        [[2910, 2910], 'disallowed'],
        [[2911, 2913], 'valid'],
        [[2914, 2915], 'valid'],
        [[2916, 2917], 'disallowed'],
        [[2918, 2927], 'valid'],
        [[2928, 2928], 'valid', [], 'NV8'],
        [[2929, 2929], 'valid'],
        [[2930, 2935], 'valid', [], 'NV8'],
        [[2936, 2945], 'disallowed'],
        [[2946, 2947], 'valid'],
        [[2948, 2948], 'disallowed'],
        [[2949, 2954], 'valid'],
        [[2955, 2957], 'disallowed'],
        [[2958, 2960], 'valid'],
        [[2961, 2961], 'disallowed'],
        [[2962, 2965], 'valid'],
        [[2966, 2968], 'disallowed'],
        [[2969, 2970], 'valid'],
        [[2971, 2971], 'disallowed'],
        [[2972, 2972], 'valid'],
        [[2973, 2973], 'disallowed'],
        [[2974, 2975], 'valid'],
        [[2976, 2978], 'disallowed'],
        [[2979, 2980], 'valid'],
        [[2981, 2983], 'disallowed'],
        [[2984, 2986], 'valid'],
        [[2987, 2989], 'disallowed'],
        [[2990, 2997], 'valid'],
        [[2998, 2998], 'valid'],
        [[2999, 3001], 'valid'],
        [[3002, 3005], 'disallowed'],
        [[3006, 3010], 'valid'],
        [[3011, 3013], 'disallowed'],
        [[3014, 3016], 'valid'],
        [[3017, 3017], 'disallowed'],
        [[3018, 3021], 'valid'],
        [[3022, 3023], 'disallowed'],
        [[3024, 3024], 'valid'],
        [[3025, 3030], 'disallowed'],
        [[3031, 3031], 'valid'],
        [[3032, 3045], 'disallowed'],
        [[3046, 3046], 'valid'],
        [[3047, 3055], 'valid'],
        [[3056, 3058], 'valid', [], 'NV8'],
        [[3059, 3066], 'valid', [], 'NV8'],
        [[3067, 3071], 'disallowed'],
        [[3072, 3072], 'valid'],
        [[3073, 3075], 'valid'],
        [[3076, 3076], 'disallowed'],
        [[3077, 3084], 'valid'],
        [[3085, 3085], 'disallowed'],
        [[3086, 3088], 'valid'],
        [[3089, 3089], 'disallowed'],
        [[3090, 3112], 'valid'],
        [[3113, 3113], 'disallowed'],
        [[3114, 3123], 'valid'],
        [[3124, 3124], 'valid'],
        [[3125, 3129], 'valid'],
        [[3130, 3132], 'disallowed'],
        [[3133, 3133], 'valid'],
        [[3134, 3140], 'valid'],
        [[3141, 3141], 'disallowed'],
        [[3142, 3144], 'valid'],
        [[3145, 3145], 'disallowed'],
        [[3146, 3149], 'valid'],
        [[3150, 3156], 'disallowed'],
        [[3157, 3158], 'valid'],
        [[3159, 3159], 'disallowed'],
        [[3160, 3161], 'valid'],
        [[3162, 3162], 'valid'],
        [[3163, 3167], 'disallowed'],
        [[3168, 3169], 'valid'],
        [[3170, 3171], 'valid'],
        [[3172, 3173], 'disallowed'],
        [[3174, 3183], 'valid'],
        [[3184, 3191], 'disallowed'],
        [[3192, 3199], 'valid', [], 'NV8'],
        [[3200, 3200], 'disallowed'],
        [[3201, 3201], 'valid'],
        [[3202, 3203], 'valid'],
        [[3204, 3204], 'disallowed'],
        [[3205, 3212], 'valid'],
        [[3213, 3213], 'disallowed'],
        [[3214, 3216], 'valid'],
        [[3217, 3217], 'disallowed'],
        [[3218, 3240], 'valid'],
        [[3241, 3241], 'disallowed'],
        [[3242, 3251], 'valid'],
        [[3252, 3252], 'disallowed'],
        [[3253, 3257], 'valid'],
        [[3258, 3259], 'disallowed'],
        [[3260, 3261], 'valid'],
        [[3262, 3268], 'valid'],
        [[3269, 3269], 'disallowed'],
        [[3270, 3272], 'valid'],
        [[3273, 3273], 'disallowed'],
        [[3274, 3277], 'valid'],
        [[3278, 3284], 'disallowed'],
        [[3285, 3286], 'valid'],
        [[3287, 3293], 'disallowed'],
        [[3294, 3294], 'valid'],
        [[3295, 3295], 'disallowed'],
        [[3296, 3297], 'valid'],
        [[3298, 3299], 'valid'],
        [[3300, 3301], 'disallowed'],
        [[3302, 3311], 'valid'],
        [[3312, 3312], 'disallowed'],
        [[3313, 3314], 'valid'],
        [[3315, 3328], 'disallowed'],
        [[3329, 3329], 'valid'],
        [[3330, 3331], 'valid'],
        [[3332, 3332], 'disallowed'],
        [[3333, 3340], 'valid'],
        [[3341, 3341], 'disallowed'],
        [[3342, 3344], 'valid'],
        [[3345, 3345], 'disallowed'],
        [[3346, 3368], 'valid'],
        [[3369, 3369], 'valid'],
        [[3370, 3385], 'valid'],
        [[3386, 3386], 'valid'],
        [[3387, 3388], 'disallowed'],
        [[3389, 3389], 'valid'],
        [[3390, 3395], 'valid'],
        [[3396, 3396], 'valid'],
        [[3397, 3397], 'disallowed'],
        [[3398, 3400], 'valid'],
        [[3401, 3401], 'disallowed'],
        [[3402, 3405], 'valid'],
        [[3406, 3406], 'valid'],
        [[3407, 3414], 'disallowed'],
        [[3415, 3415], 'valid'],
        [[3416, 3422], 'disallowed'],
        [[3423, 3423], 'valid'],
        [[3424, 3425], 'valid'],
        [[3426, 3427], 'valid'],
        [[3428, 3429], 'disallowed'],
        [[3430, 3439], 'valid'],
        [[3440, 3445], 'valid', [], 'NV8'],
        [[3446, 3448], 'disallowed'],
        [[3449, 3449], 'valid', [], 'NV8'],
        [[3450, 3455], 'valid'],
        [[3456, 3457], 'disallowed'],
        [[3458, 3459], 'valid'],
        [[3460, 3460], 'disallowed'],
        [[3461, 3478], 'valid'],
        [[3479, 3481], 'disallowed'],
        [[3482, 3505], 'valid'],
        [[3506, 3506], 'disallowed'],
        [[3507, 3515], 'valid'],
        [[3516, 3516], 'disallowed'],
        [[3517, 3517], 'valid'],
        [[3518, 3519], 'disallowed'],
        [[3520, 3526], 'valid'],
        [[3527, 3529], 'disallowed'],
        [[3530, 3530], 'valid'],
        [[3531, 3534], 'disallowed'],
        [[3535, 3540], 'valid'],
        [[3541, 3541], 'disallowed'],
        [[3542, 3542], 'valid'],
        [[3543, 3543], 'disallowed'],
        [[3544, 3551], 'valid'],
        [[3552, 3557], 'disallowed'],
        [[3558, 3567], 'valid'],
        [[3568, 3569], 'disallowed'],
        [[3570, 3571], 'valid'],
        [[3572, 3572], 'valid', [], 'NV8'],
        [[3573, 3584], 'disallowed'],
        [[3585, 3634], 'valid'],
        [[3635, 3635], 'mapped', [3661, 3634]],
        [[3636, 3642], 'valid'],
        [[3643, 3646], 'disallowed'],
        [[3647, 3647], 'valid', [], 'NV8'],
        [[3648, 3662], 'valid'],
        [[3663, 3663], 'valid', [], 'NV8'],
        [[3664, 3673], 'valid'],
        [[3674, 3675], 'valid', [], 'NV8'],
        [[3676, 3712], 'disallowed'],
        [[3713, 3714], 'valid'],
        [[3715, 3715], 'disallowed'],
        [[3716, 3716], 'valid'],
        [[3717, 3718], 'disallowed'],
        [[3719, 3720], 'valid'],
        [[3721, 3721], 'disallowed'],
        [[3722, 3722], 'valid'],
        [[3723, 3724], 'disallowed'],
        [[3725, 3725], 'valid'],
        [[3726, 3731], 'disallowed'],
        [[3732, 3735], 'valid'],
        [[3736, 3736], 'disallowed'],
        [[3737, 3743], 'valid'],
        [[3744, 3744], 'disallowed'],
        [[3745, 3747], 'valid'],
        [[3748, 3748], 'disallowed'],
        [[3749, 3749], 'valid'],
        [[3750, 3750], 'disallowed'],
        [[3751, 3751], 'valid'],
        [[3752, 3753], 'disallowed'],
        [[3754, 3755], 'valid'],
        [[3756, 3756], 'disallowed'],
        [[3757, 3762], 'valid'],
        [[3763, 3763], 'mapped', [3789, 3762]],
        [[3764, 3769], 'valid'],
        [[3770, 3770], 'disallowed'],
        [[3771, 3773], 'valid'],
        [[3774, 3775], 'disallowed'],
        [[3776, 3780], 'valid'],
        [[3781, 3781], 'disallowed'],
        [[3782, 3782], 'valid'],
        [[3783, 3783], 'disallowed'],
        [[3784, 3789], 'valid'],
        [[3790, 3791], 'disallowed'],
        [[3792, 3801], 'valid'],
        [[3802, 3803], 'disallowed'],
        [[3804, 3804], 'mapped', [3755, 3737]],
        [[3805, 3805], 'mapped', [3755, 3745]],
        [[3806, 3807], 'valid'],
        [[3808, 3839], 'disallowed'],
        [[3840, 3840], 'valid'],
        [[3841, 3850], 'valid', [], 'NV8'],
        [[3851, 3851], 'valid'],
        [[3852, 3852], 'mapped', [3851]],
        [[3853, 3863], 'valid', [], 'NV8'],
        [[3864, 3865], 'valid'],
        [[3866, 3871], 'valid', [], 'NV8'],
        [[3872, 3881], 'valid'],
        [[3882, 3892], 'valid', [], 'NV8'],
        [[3893, 3893], 'valid'],
        [[3894, 3894], 'valid', [], 'NV8'],
        [[3895, 3895], 'valid'],
        [[3896, 3896], 'valid', [], 'NV8'],
        [[3897, 3897], 'valid'],
        [[3898, 3901], 'valid', [], 'NV8'],
        [[3902, 3906], 'valid'],
        [[3907, 3907], 'mapped', [3906, 4023]],
        [[3908, 3911], 'valid'],
        [[3912, 3912], 'disallowed'],
        [[3913, 3916], 'valid'],
        [[3917, 3917], 'mapped', [3916, 4023]],
        [[3918, 3921], 'valid'],
        [[3922, 3922], 'mapped', [3921, 4023]],
        [[3923, 3926], 'valid'],
        [[3927, 3927], 'mapped', [3926, 4023]],
        [[3928, 3931], 'valid'],
        [[3932, 3932], 'mapped', [3931, 4023]],
        [[3933, 3944], 'valid'],
        [[3945, 3945], 'mapped', [3904, 4021]],
        [[3946, 3946], 'valid'],
        [[3947, 3948], 'valid'],
        [[3949, 3952], 'disallowed'],
        [[3953, 3954], 'valid'],
        [[3955, 3955], 'mapped', [3953, 3954]],
        [[3956, 3956], 'valid'],
        [[3957, 3957], 'mapped', [3953, 3956]],
        [[3958, 3958], 'mapped', [4018, 3968]],
        [[3959, 3959], 'mapped', [4018, 3953, 3968]],
        [[3960, 3960], 'mapped', [4019, 3968]],
        [[3961, 3961], 'mapped', [4019, 3953, 3968]],
        [[3962, 3968], 'valid'],
        [[3969, 3969], 'mapped', [3953, 3968]],
        [[3970, 3972], 'valid'],
        [[3973, 3973], 'valid', [], 'NV8'],
        [[3974, 3979], 'valid'],
        [[3980, 3983], 'valid'],
        [[3984, 3986], 'valid'],
        [[3987, 3987], 'mapped', [3986, 4023]],
        [[3988, 3989], 'valid'],
        [[3990, 3990], 'valid'],
        [[3991, 3991], 'valid'],
        [[3992, 3992], 'disallowed'],
        [[3993, 3996], 'valid'],
        [[3997, 3997], 'mapped', [3996, 4023]],
        [[3998, 4001], 'valid'],
        [[4002, 4002], 'mapped', [4001, 4023]],
        [[4003, 4006], 'valid'],
        [[4007, 4007], 'mapped', [4006, 4023]],
        [[4008, 4011], 'valid'],
        [[4012, 4012], 'mapped', [4011, 4023]],
        [[4013, 4013], 'valid'],
        [[4014, 4016], 'valid'],
        [[4017, 4023], 'valid'],
        [[4024, 4024], 'valid'],
        [[4025, 4025], 'mapped', [3984, 4021]],
        [[4026, 4028], 'valid'],
        [[4029, 4029], 'disallowed'],
        [[4030, 4037], 'valid', [], 'NV8'],
        [[4038, 4038], 'valid'],
        [[4039, 4044], 'valid', [], 'NV8'],
        [[4045, 4045], 'disallowed'],
        [[4046, 4046], 'valid', [], 'NV8'],
        [[4047, 4047], 'valid', [], 'NV8'],
        [[4048, 4049], 'valid', [], 'NV8'],
        [[4050, 4052], 'valid', [], 'NV8'],
        [[4053, 4056], 'valid', [], 'NV8'],
        [[4057, 4058], 'valid', [], 'NV8'],
        [[4059, 4095], 'disallowed'],
        [[4096, 4129], 'valid'],
        [[4130, 4130], 'valid'],
        [[4131, 4135], 'valid'],
        [[4136, 4136], 'valid'],
        [[4137, 4138], 'valid'],
        [[4139, 4139], 'valid'],
        [[4140, 4146], 'valid'],
        [[4147, 4149], 'valid'],
        [[4150, 4153], 'valid'],
        [[4154, 4159], 'valid'],
        [[4160, 4169], 'valid'],
        [[4170, 4175], 'valid', [], 'NV8'],
        [[4176, 4185], 'valid'],
        [[4186, 4249], 'valid'],
        [[4250, 4253], 'valid'],
        [[4254, 4255], 'valid', [], 'NV8'],
        [[4256, 4293], 'disallowed'],
        [[4294, 4294], 'disallowed'],
        [[4295, 4295], 'mapped', [11559]],
        [[4296, 4300], 'disallowed'],
        [[4301, 4301], 'mapped', [11565]],
        [[4302, 4303], 'disallowed'],
        [[4304, 4342], 'valid'],
        [[4343, 4344], 'valid'],
        [[4345, 4346], 'valid'],
        [[4347, 4347], 'valid', [], 'NV8'],
        [[4348, 4348], 'mapped', [4316]],
        [[4349, 4351], 'valid'],
        [[4352, 4441], 'valid', [], 'NV8'],
        [[4442, 4446], 'valid', [], 'NV8'],
        [[4447, 4448], 'disallowed'],
        [[4449, 4514], 'valid', [], 'NV8'],
        [[4515, 4519], 'valid', [], 'NV8'],
        [[4520, 4601], 'valid', [], 'NV8'],
        [[4602, 4607], 'valid', [], 'NV8'],
        [[4608, 4614], 'valid'],
        [[4615, 4615], 'valid'],
        [[4616, 4678], 'valid'],
        [[4679, 4679], 'valid'],
        [[4680, 4680], 'valid'],
        [[4681, 4681], 'disallowed'],
        [[4682, 4685], 'valid'],
        [[4686, 4687], 'disallowed'],
        [[4688, 4694], 'valid'],
        [[4695, 4695], 'disallowed'],
        [[4696, 4696], 'valid'],
        [[4697, 4697], 'disallowed'],
        [[4698, 4701], 'valid'],
        [[4702, 4703], 'disallowed'],
        [[4704, 4742], 'valid'],
        [[4743, 4743], 'valid'],
        [[4744, 4744], 'valid'],
        [[4745, 4745], 'disallowed'],
        [[4746, 4749], 'valid'],
        [[4750, 4751], 'disallowed'],
        [[4752, 4782], 'valid'],
        [[4783, 4783], 'valid'],
        [[4784, 4784], 'valid'],
        [[4785, 4785], 'disallowed'],
        [[4786, 4789], 'valid'],
        [[4790, 4791], 'disallowed'],
        [[4792, 4798], 'valid'],
        [[4799, 4799], 'disallowed'],
        [[4800, 4800], 'valid'],
        [[4801, 4801], 'disallowed'],
        [[4802, 4805], 'valid'],
        [[4806, 4807], 'disallowed'],
        [[4808, 4814], 'valid'],
        [[4815, 4815], 'valid'],
        [[4816, 4822], 'valid'],
        [[4823, 4823], 'disallowed'],
        [[4824, 4846], 'valid'],
        [[4847, 4847], 'valid'],
        [[4848, 4878], 'valid'],
        [[4879, 4879], 'valid'],
        [[4880, 4880], 'valid'],
        [[4881, 4881], 'disallowed'],
        [[4882, 4885], 'valid'],
        [[4886, 4887], 'disallowed'],
        [[4888, 4894], 'valid'],
        [[4895, 4895], 'valid'],
        [[4896, 4934], 'valid'],
        [[4935, 4935], 'valid'],
        [[4936, 4954], 'valid'],
        [[4955, 4956], 'disallowed'],
        [[4957, 4958], 'valid'],
        [[4959, 4959], 'valid'],
        [[4960, 4960], 'valid', [], 'NV8'],
        [[4961, 4988], 'valid', [], 'NV8'],
        [[4989, 4991], 'disallowed'],
        [[4992, 5007], 'valid'],
        [[5008, 5017], 'valid', [], 'NV8'],
        [[5018, 5023], 'disallowed'],
        [[5024, 5108], 'valid'],
        [[5109, 5109], 'valid'],
        [[5110, 5111], 'disallowed'],
        [[5112, 5112], 'mapped', [5104]],
        [[5113, 5113], 'mapped', [5105]],
        [[5114, 5114], 'mapped', [5106]],
        [[5115, 5115], 'mapped', [5107]],
        [[5116, 5116], 'mapped', [5108]],
        [[5117, 5117], 'mapped', [5109]],
        [[5118, 5119], 'disallowed'],
        [[5120, 5120], 'valid', [], 'NV8'],
        [[5121, 5740], 'valid'],
        [[5741, 5742], 'valid', [], 'NV8'],
        [[5743, 5750], 'valid'],
        [[5751, 5759], 'valid'],
        [[5760, 5760], 'disallowed'],
        [[5761, 5786], 'valid'],
        [[5787, 5788], 'valid', [], 'NV8'],
        [[5789, 5791], 'disallowed'],
        [[5792, 5866], 'valid'],
        [[5867, 5872], 'valid', [], 'NV8'],
        [[5873, 5880], 'valid'],
        [[5881, 5887], 'disallowed'],
        [[5888, 5900], 'valid'],
        [[5901, 5901], 'disallowed'],
        [[5902, 5908], 'valid'],
        [[5909, 5919], 'disallowed'],
        [[5920, 5940], 'valid'],
        [[5941, 5942], 'valid', [], 'NV8'],
        [[5943, 5951], 'disallowed'],
        [[5952, 5971], 'valid'],
        [[5972, 5983], 'disallowed'],
        [[5984, 5996], 'valid'],
        [[5997, 5997], 'disallowed'],
        [[5998, 6e3], 'valid'],
        [[6001, 6001], 'disallowed'],
        [[6002, 6003], 'valid'],
        [[6004, 6015], 'disallowed'],
        [[6016, 6067], 'valid'],
        [[6068, 6069], 'disallowed'],
        [[6070, 6099], 'valid'],
        [[6100, 6102], 'valid', [], 'NV8'],
        [[6103, 6103], 'valid'],
        [[6104, 6107], 'valid', [], 'NV8'],
        [[6108, 6108], 'valid'],
        [[6109, 6109], 'valid'],
        [[6110, 6111], 'disallowed'],
        [[6112, 6121], 'valid'],
        [[6122, 6127], 'disallowed'],
        [[6128, 6137], 'valid', [], 'NV8'],
        [[6138, 6143], 'disallowed'],
        [[6144, 6149], 'valid', [], 'NV8'],
        [[6150, 6150], 'disallowed'],
        [[6151, 6154], 'valid', [], 'NV8'],
        [[6155, 6157], 'ignored'],
        [[6158, 6158], 'disallowed'],
        [[6159, 6159], 'disallowed'],
        [[6160, 6169], 'valid'],
        [[6170, 6175], 'disallowed'],
        [[6176, 6263], 'valid'],
        [[6264, 6271], 'disallowed'],
        [[6272, 6313], 'valid'],
        [[6314, 6314], 'valid'],
        [[6315, 6319], 'disallowed'],
        [[6320, 6389], 'valid'],
        [[6390, 6399], 'disallowed'],
        [[6400, 6428], 'valid'],
        [[6429, 6430], 'valid'],
        [[6431, 6431], 'disallowed'],
        [[6432, 6443], 'valid'],
        [[6444, 6447], 'disallowed'],
        [[6448, 6459], 'valid'],
        [[6460, 6463], 'disallowed'],
        [[6464, 6464], 'valid', [], 'NV8'],
        [[6465, 6467], 'disallowed'],
        [[6468, 6469], 'valid', [], 'NV8'],
        [[6470, 6509], 'valid'],
        [[6510, 6511], 'disallowed'],
        [[6512, 6516], 'valid'],
        [[6517, 6527], 'disallowed'],
        [[6528, 6569], 'valid'],
        [[6570, 6571], 'valid'],
        [[6572, 6575], 'disallowed'],
        [[6576, 6601], 'valid'],
        [[6602, 6607], 'disallowed'],
        [[6608, 6617], 'valid'],
        [[6618, 6618], 'valid', [], 'XV8'],
        [[6619, 6621], 'disallowed'],
        [[6622, 6623], 'valid', [], 'NV8'],
        [[6624, 6655], 'valid', [], 'NV8'],
        [[6656, 6683], 'valid'],
        [[6684, 6685], 'disallowed'],
        [[6686, 6687], 'valid', [], 'NV8'],
        [[6688, 6750], 'valid'],
        [[6751, 6751], 'disallowed'],
        [[6752, 6780], 'valid'],
        [[6781, 6782], 'disallowed'],
        [[6783, 6793], 'valid'],
        [[6794, 6799], 'disallowed'],
        [[6800, 6809], 'valid'],
        [[6810, 6815], 'disallowed'],
        [[6816, 6822], 'valid', [], 'NV8'],
        [[6823, 6823], 'valid'],
        [[6824, 6829], 'valid', [], 'NV8'],
        [[6830, 6831], 'disallowed'],
        [[6832, 6845], 'valid'],
        [[6846, 6846], 'valid', [], 'NV8'],
        [[6847, 6911], 'disallowed'],
        [[6912, 6987], 'valid'],
        [[6988, 6991], 'disallowed'],
        [[6992, 7001], 'valid'],
        [[7002, 7018], 'valid', [], 'NV8'],
        [[7019, 7027], 'valid'],
        [[7028, 7036], 'valid', [], 'NV8'],
        [[7037, 7039], 'disallowed'],
        [[7040, 7082], 'valid'],
        [[7083, 7085], 'valid'],
        [[7086, 7097], 'valid'],
        [[7098, 7103], 'valid'],
        [[7104, 7155], 'valid'],
        [[7156, 7163], 'disallowed'],
        [[7164, 7167], 'valid', [], 'NV8'],
        [[7168, 7223], 'valid'],
        [[7224, 7226], 'disallowed'],
        [[7227, 7231], 'valid', [], 'NV8'],
        [[7232, 7241], 'valid'],
        [[7242, 7244], 'disallowed'],
        [[7245, 7293], 'valid'],
        [[7294, 7295], 'valid', [], 'NV8'],
        [[7296, 7359], 'disallowed'],
        [[7360, 7367], 'valid', [], 'NV8'],
        [[7368, 7375], 'disallowed'],
        [[7376, 7378], 'valid'],
        [[7379, 7379], 'valid', [], 'NV8'],
        [[7380, 7410], 'valid'],
        [[7411, 7414], 'valid'],
        [[7415, 7415], 'disallowed'],
        [[7416, 7417], 'valid'],
        [[7418, 7423], 'disallowed'],
        [[7424, 7467], 'valid'],
        [[7468, 7468], 'mapped', [97]],
        [[7469, 7469], 'mapped', [230]],
        [[7470, 7470], 'mapped', [98]],
        [[7471, 7471], 'valid'],
        [[7472, 7472], 'mapped', [100]],
        [[7473, 7473], 'mapped', [101]],
        [[7474, 7474], 'mapped', [477]],
        [[7475, 7475], 'mapped', [103]],
        [[7476, 7476], 'mapped', [104]],
        [[7477, 7477], 'mapped', [105]],
        [[7478, 7478], 'mapped', [106]],
        [[7479, 7479], 'mapped', [107]],
        [[7480, 7480], 'mapped', [108]],
        [[7481, 7481], 'mapped', [109]],
        [[7482, 7482], 'mapped', [110]],
        [[7483, 7483], 'valid'],
        [[7484, 7484], 'mapped', [111]],
        [[7485, 7485], 'mapped', [547]],
        [[7486, 7486], 'mapped', [112]],
        [[7487, 7487], 'mapped', [114]],
        [[7488, 7488], 'mapped', [116]],
        [[7489, 7489], 'mapped', [117]],
        [[7490, 7490], 'mapped', [119]],
        [[7491, 7491], 'mapped', [97]],
        [[7492, 7492], 'mapped', [592]],
        [[7493, 7493], 'mapped', [593]],
        [[7494, 7494], 'mapped', [7426]],
        [[7495, 7495], 'mapped', [98]],
        [[7496, 7496], 'mapped', [100]],
        [[7497, 7497], 'mapped', [101]],
        [[7498, 7498], 'mapped', [601]],
        [[7499, 7499], 'mapped', [603]],
        [[7500, 7500], 'mapped', [604]],
        [[7501, 7501], 'mapped', [103]],
        [[7502, 7502], 'valid'],
        [[7503, 7503], 'mapped', [107]],
        [[7504, 7504], 'mapped', [109]],
        [[7505, 7505], 'mapped', [331]],
        [[7506, 7506], 'mapped', [111]],
        [[7507, 7507], 'mapped', [596]],
        [[7508, 7508], 'mapped', [7446]],
        [[7509, 7509], 'mapped', [7447]],
        [[7510, 7510], 'mapped', [112]],
        [[7511, 7511], 'mapped', [116]],
        [[7512, 7512], 'mapped', [117]],
        [[7513, 7513], 'mapped', [7453]],
        [[7514, 7514], 'mapped', [623]],
        [[7515, 7515], 'mapped', [118]],
        [[7516, 7516], 'mapped', [7461]],
        [[7517, 7517], 'mapped', [946]],
        [[7518, 7518], 'mapped', [947]],
        [[7519, 7519], 'mapped', [948]],
        [[7520, 7520], 'mapped', [966]],
        [[7521, 7521], 'mapped', [967]],
        [[7522, 7522], 'mapped', [105]],
        [[7523, 7523], 'mapped', [114]],
        [[7524, 7524], 'mapped', [117]],
        [[7525, 7525], 'mapped', [118]],
        [[7526, 7526], 'mapped', [946]],
        [[7527, 7527], 'mapped', [947]],
        [[7528, 7528], 'mapped', [961]],
        [[7529, 7529], 'mapped', [966]],
        [[7530, 7530], 'mapped', [967]],
        [[7531, 7531], 'valid'],
        [[7532, 7543], 'valid'],
        [[7544, 7544], 'mapped', [1085]],
        [[7545, 7578], 'valid'],
        [[7579, 7579], 'mapped', [594]],
        [[7580, 7580], 'mapped', [99]],
        [[7581, 7581], 'mapped', [597]],
        [[7582, 7582], 'mapped', [240]],
        [[7583, 7583], 'mapped', [604]],
        [[7584, 7584], 'mapped', [102]],
        [[7585, 7585], 'mapped', [607]],
        [[7586, 7586], 'mapped', [609]],
        [[7587, 7587], 'mapped', [613]],
        [[7588, 7588], 'mapped', [616]],
        [[7589, 7589], 'mapped', [617]],
        [[7590, 7590], 'mapped', [618]],
        [[7591, 7591], 'mapped', [7547]],
        [[7592, 7592], 'mapped', [669]],
        [[7593, 7593], 'mapped', [621]],
        [[7594, 7594], 'mapped', [7557]],
        [[7595, 7595], 'mapped', [671]],
        [[7596, 7596], 'mapped', [625]],
        [[7597, 7597], 'mapped', [624]],
        [[7598, 7598], 'mapped', [626]],
        [[7599, 7599], 'mapped', [627]],
        [[7600, 7600], 'mapped', [628]],
        [[7601, 7601], 'mapped', [629]],
        [[7602, 7602], 'mapped', [632]],
        [[7603, 7603], 'mapped', [642]],
        [[7604, 7604], 'mapped', [643]],
        [[7605, 7605], 'mapped', [427]],
        [[7606, 7606], 'mapped', [649]],
        [[7607, 7607], 'mapped', [650]],
        [[7608, 7608], 'mapped', [7452]],
        [[7609, 7609], 'mapped', [651]],
        [[7610, 7610], 'mapped', [652]],
        [[7611, 7611], 'mapped', [122]],
        [[7612, 7612], 'mapped', [656]],
        [[7613, 7613], 'mapped', [657]],
        [[7614, 7614], 'mapped', [658]],
        [[7615, 7615], 'mapped', [952]],
        [[7616, 7619], 'valid'],
        [[7620, 7626], 'valid'],
        [[7627, 7654], 'valid'],
        [[7655, 7669], 'valid'],
        [[7670, 7675], 'disallowed'],
        [[7676, 7676], 'valid'],
        [[7677, 7677], 'valid'],
        [[7678, 7679], 'valid'],
        [[7680, 7680], 'mapped', [7681]],
        [[7681, 7681], 'valid'],
        [[7682, 7682], 'mapped', [7683]],
        [[7683, 7683], 'valid'],
        [[7684, 7684], 'mapped', [7685]],
        [[7685, 7685], 'valid'],
        [[7686, 7686], 'mapped', [7687]],
        [[7687, 7687], 'valid'],
        [[7688, 7688], 'mapped', [7689]],
        [[7689, 7689], 'valid'],
        [[7690, 7690], 'mapped', [7691]],
        [[7691, 7691], 'valid'],
        [[7692, 7692], 'mapped', [7693]],
        [[7693, 7693], 'valid'],
        [[7694, 7694], 'mapped', [7695]],
        [[7695, 7695], 'valid'],
        [[7696, 7696], 'mapped', [7697]],
        [[7697, 7697], 'valid'],
        [[7698, 7698], 'mapped', [7699]],
        [[7699, 7699], 'valid'],
        [[7700, 7700], 'mapped', [7701]],
        [[7701, 7701], 'valid'],
        [[7702, 7702], 'mapped', [7703]],
        [[7703, 7703], 'valid'],
        [[7704, 7704], 'mapped', [7705]],
        [[7705, 7705], 'valid'],
        [[7706, 7706], 'mapped', [7707]],
        [[7707, 7707], 'valid'],
        [[7708, 7708], 'mapped', [7709]],
        [[7709, 7709], 'valid'],
        [[7710, 7710], 'mapped', [7711]],
        [[7711, 7711], 'valid'],
        [[7712, 7712], 'mapped', [7713]],
        [[7713, 7713], 'valid'],
        [[7714, 7714], 'mapped', [7715]],
        [[7715, 7715], 'valid'],
        [[7716, 7716], 'mapped', [7717]],
        [[7717, 7717], 'valid'],
        [[7718, 7718], 'mapped', [7719]],
        [[7719, 7719], 'valid'],
        [[7720, 7720], 'mapped', [7721]],
        [[7721, 7721], 'valid'],
        [[7722, 7722], 'mapped', [7723]],
        [[7723, 7723], 'valid'],
        [[7724, 7724], 'mapped', [7725]],
        [[7725, 7725], 'valid'],
        [[7726, 7726], 'mapped', [7727]],
        [[7727, 7727], 'valid'],
        [[7728, 7728], 'mapped', [7729]],
        [[7729, 7729], 'valid'],
        [[7730, 7730], 'mapped', [7731]],
        [[7731, 7731], 'valid'],
        [[7732, 7732], 'mapped', [7733]],
        [[7733, 7733], 'valid'],
        [[7734, 7734], 'mapped', [7735]],
        [[7735, 7735], 'valid'],
        [[7736, 7736], 'mapped', [7737]],
        [[7737, 7737], 'valid'],
        [[7738, 7738], 'mapped', [7739]],
        [[7739, 7739], 'valid'],
        [[7740, 7740], 'mapped', [7741]],
        [[7741, 7741], 'valid'],
        [[7742, 7742], 'mapped', [7743]],
        [[7743, 7743], 'valid'],
        [[7744, 7744], 'mapped', [7745]],
        [[7745, 7745], 'valid'],
        [[7746, 7746], 'mapped', [7747]],
        [[7747, 7747], 'valid'],
        [[7748, 7748], 'mapped', [7749]],
        [[7749, 7749], 'valid'],
        [[7750, 7750], 'mapped', [7751]],
        [[7751, 7751], 'valid'],
        [[7752, 7752], 'mapped', [7753]],
        [[7753, 7753], 'valid'],
        [[7754, 7754], 'mapped', [7755]],
        [[7755, 7755], 'valid'],
        [[7756, 7756], 'mapped', [7757]],
        [[7757, 7757], 'valid'],
        [[7758, 7758], 'mapped', [7759]],
        [[7759, 7759], 'valid'],
        [[7760, 7760], 'mapped', [7761]],
        [[7761, 7761], 'valid'],
        [[7762, 7762], 'mapped', [7763]],
        [[7763, 7763], 'valid'],
        [[7764, 7764], 'mapped', [7765]],
        [[7765, 7765], 'valid'],
        [[7766, 7766], 'mapped', [7767]],
        [[7767, 7767], 'valid'],
        [[7768, 7768], 'mapped', [7769]],
        [[7769, 7769], 'valid'],
        [[7770, 7770], 'mapped', [7771]],
        [[7771, 7771], 'valid'],
        [[7772, 7772], 'mapped', [7773]],
        [[7773, 7773], 'valid'],
        [[7774, 7774], 'mapped', [7775]],
        [[7775, 7775], 'valid'],
        [[7776, 7776], 'mapped', [7777]],
        [[7777, 7777], 'valid'],
        [[7778, 7778], 'mapped', [7779]],
        [[7779, 7779], 'valid'],
        [[7780, 7780], 'mapped', [7781]],
        [[7781, 7781], 'valid'],
        [[7782, 7782], 'mapped', [7783]],
        [[7783, 7783], 'valid'],
        [[7784, 7784], 'mapped', [7785]],
        [[7785, 7785], 'valid'],
        [[7786, 7786], 'mapped', [7787]],
        [[7787, 7787], 'valid'],
        [[7788, 7788], 'mapped', [7789]],
        [[7789, 7789], 'valid'],
        [[7790, 7790], 'mapped', [7791]],
        [[7791, 7791], 'valid'],
        [[7792, 7792], 'mapped', [7793]],
        [[7793, 7793], 'valid'],
        [[7794, 7794], 'mapped', [7795]],
        [[7795, 7795], 'valid'],
        [[7796, 7796], 'mapped', [7797]],
        [[7797, 7797], 'valid'],
        [[7798, 7798], 'mapped', [7799]],
        [[7799, 7799], 'valid'],
        [[7800, 7800], 'mapped', [7801]],
        [[7801, 7801], 'valid'],
        [[7802, 7802], 'mapped', [7803]],
        [[7803, 7803], 'valid'],
        [[7804, 7804], 'mapped', [7805]],
        [[7805, 7805], 'valid'],
        [[7806, 7806], 'mapped', [7807]],
        [[7807, 7807], 'valid'],
        [[7808, 7808], 'mapped', [7809]],
        [[7809, 7809], 'valid'],
        [[7810, 7810], 'mapped', [7811]],
        [[7811, 7811], 'valid'],
        [[7812, 7812], 'mapped', [7813]],
        [[7813, 7813], 'valid'],
        [[7814, 7814], 'mapped', [7815]],
        [[7815, 7815], 'valid'],
        [[7816, 7816], 'mapped', [7817]],
        [[7817, 7817], 'valid'],
        [[7818, 7818], 'mapped', [7819]],
        [[7819, 7819], 'valid'],
        [[7820, 7820], 'mapped', [7821]],
        [[7821, 7821], 'valid'],
        [[7822, 7822], 'mapped', [7823]],
        [[7823, 7823], 'valid'],
        [[7824, 7824], 'mapped', [7825]],
        [[7825, 7825], 'valid'],
        [[7826, 7826], 'mapped', [7827]],
        [[7827, 7827], 'valid'],
        [[7828, 7828], 'mapped', [7829]],
        [[7829, 7833], 'valid'],
        [[7834, 7834], 'mapped', [97, 702]],
        [[7835, 7835], 'mapped', [7777]],
        [[7836, 7837], 'valid'],
        [[7838, 7838], 'mapped', [115, 115]],
        [[7839, 7839], 'valid'],
        [[7840, 7840], 'mapped', [7841]],
        [[7841, 7841], 'valid'],
        [[7842, 7842], 'mapped', [7843]],
        [[7843, 7843], 'valid'],
        [[7844, 7844], 'mapped', [7845]],
        [[7845, 7845], 'valid'],
        [[7846, 7846], 'mapped', [7847]],
        [[7847, 7847], 'valid'],
        [[7848, 7848], 'mapped', [7849]],
        [[7849, 7849], 'valid'],
        [[7850, 7850], 'mapped', [7851]],
        [[7851, 7851], 'valid'],
        [[7852, 7852], 'mapped', [7853]],
        [[7853, 7853], 'valid'],
        [[7854, 7854], 'mapped', [7855]],
        [[7855, 7855], 'valid'],
        [[7856, 7856], 'mapped', [7857]],
        [[7857, 7857], 'valid'],
        [[7858, 7858], 'mapped', [7859]],
        [[7859, 7859], 'valid'],
        [[7860, 7860], 'mapped', [7861]],
        [[7861, 7861], 'valid'],
        [[7862, 7862], 'mapped', [7863]],
        [[7863, 7863], 'valid'],
        [[7864, 7864], 'mapped', [7865]],
        [[7865, 7865], 'valid'],
        [[7866, 7866], 'mapped', [7867]],
        [[7867, 7867], 'valid'],
        [[7868, 7868], 'mapped', [7869]],
        [[7869, 7869], 'valid'],
        [[7870, 7870], 'mapped', [7871]],
        [[7871, 7871], 'valid'],
        [[7872, 7872], 'mapped', [7873]],
        [[7873, 7873], 'valid'],
        [[7874, 7874], 'mapped', [7875]],
        [[7875, 7875], 'valid'],
        [[7876, 7876], 'mapped', [7877]],
        [[7877, 7877], 'valid'],
        [[7878, 7878], 'mapped', [7879]],
        [[7879, 7879], 'valid'],
        [[7880, 7880], 'mapped', [7881]],
        [[7881, 7881], 'valid'],
        [[7882, 7882], 'mapped', [7883]],
        [[7883, 7883], 'valid'],
        [[7884, 7884], 'mapped', [7885]],
        [[7885, 7885], 'valid'],
        [[7886, 7886], 'mapped', [7887]],
        [[7887, 7887], 'valid'],
        [[7888, 7888], 'mapped', [7889]],
        [[7889, 7889], 'valid'],
        [[7890, 7890], 'mapped', [7891]],
        [[7891, 7891], 'valid'],
        [[7892, 7892], 'mapped', [7893]],
        [[7893, 7893], 'valid'],
        [[7894, 7894], 'mapped', [7895]],
        [[7895, 7895], 'valid'],
        [[7896, 7896], 'mapped', [7897]],
        [[7897, 7897], 'valid'],
        [[7898, 7898], 'mapped', [7899]],
        [[7899, 7899], 'valid'],
        [[7900, 7900], 'mapped', [7901]],
        [[7901, 7901], 'valid'],
        [[7902, 7902], 'mapped', [7903]],
        [[7903, 7903], 'valid'],
        [[7904, 7904], 'mapped', [7905]],
        [[7905, 7905], 'valid'],
        [[7906, 7906], 'mapped', [7907]],
        [[7907, 7907], 'valid'],
        [[7908, 7908], 'mapped', [7909]],
        [[7909, 7909], 'valid'],
        [[7910, 7910], 'mapped', [7911]],
        [[7911, 7911], 'valid'],
        [[7912, 7912], 'mapped', [7913]],
        [[7913, 7913], 'valid'],
        [[7914, 7914], 'mapped', [7915]],
        [[7915, 7915], 'valid'],
        [[7916, 7916], 'mapped', [7917]],
        [[7917, 7917], 'valid'],
        [[7918, 7918], 'mapped', [7919]],
        [[7919, 7919], 'valid'],
        [[7920, 7920], 'mapped', [7921]],
        [[7921, 7921], 'valid'],
        [[7922, 7922], 'mapped', [7923]],
        [[7923, 7923], 'valid'],
        [[7924, 7924], 'mapped', [7925]],
        [[7925, 7925], 'valid'],
        [[7926, 7926], 'mapped', [7927]],
        [[7927, 7927], 'valid'],
        [[7928, 7928], 'mapped', [7929]],
        [[7929, 7929], 'valid'],
        [[7930, 7930], 'mapped', [7931]],
        [[7931, 7931], 'valid'],
        [[7932, 7932], 'mapped', [7933]],
        [[7933, 7933], 'valid'],
        [[7934, 7934], 'mapped', [7935]],
        [[7935, 7935], 'valid'],
        [[7936, 7943], 'valid'],
        [[7944, 7944], 'mapped', [7936]],
        [[7945, 7945], 'mapped', [7937]],
        [[7946, 7946], 'mapped', [7938]],
        [[7947, 7947], 'mapped', [7939]],
        [[7948, 7948], 'mapped', [7940]],
        [[7949, 7949], 'mapped', [7941]],
        [[7950, 7950], 'mapped', [7942]],
        [[7951, 7951], 'mapped', [7943]],
        [[7952, 7957], 'valid'],
        [[7958, 7959], 'disallowed'],
        [[7960, 7960], 'mapped', [7952]],
        [[7961, 7961], 'mapped', [7953]],
        [[7962, 7962], 'mapped', [7954]],
        [[7963, 7963], 'mapped', [7955]],
        [[7964, 7964], 'mapped', [7956]],
        [[7965, 7965], 'mapped', [7957]],
        [[7966, 7967], 'disallowed'],
        [[7968, 7975], 'valid'],
        [[7976, 7976], 'mapped', [7968]],
        [[7977, 7977], 'mapped', [7969]],
        [[7978, 7978], 'mapped', [7970]],
        [[7979, 7979], 'mapped', [7971]],
        [[7980, 7980], 'mapped', [7972]],
        [[7981, 7981], 'mapped', [7973]],
        [[7982, 7982], 'mapped', [7974]],
        [[7983, 7983], 'mapped', [7975]],
        [[7984, 7991], 'valid'],
        [[7992, 7992], 'mapped', [7984]],
        [[7993, 7993], 'mapped', [7985]],
        [[7994, 7994], 'mapped', [7986]],
        [[7995, 7995], 'mapped', [7987]],
        [[7996, 7996], 'mapped', [7988]],
        [[7997, 7997], 'mapped', [7989]],
        [[7998, 7998], 'mapped', [7990]],
        [[7999, 7999], 'mapped', [7991]],
        [[8e3, 8005], 'valid'],
        [[8006, 8007], 'disallowed'],
        [[8008, 8008], 'mapped', [8e3]],
        [[8009, 8009], 'mapped', [8001]],
        [[8010, 8010], 'mapped', [8002]],
        [[8011, 8011], 'mapped', [8003]],
        [[8012, 8012], 'mapped', [8004]],
        [[8013, 8013], 'mapped', [8005]],
        [[8014, 8015], 'disallowed'],
        [[8016, 8023], 'valid'],
        [[8024, 8024], 'disallowed'],
        [[8025, 8025], 'mapped', [8017]],
        [[8026, 8026], 'disallowed'],
        [[8027, 8027], 'mapped', [8019]],
        [[8028, 8028], 'disallowed'],
        [[8029, 8029], 'mapped', [8021]],
        [[8030, 8030], 'disallowed'],
        [[8031, 8031], 'mapped', [8023]],
        [[8032, 8039], 'valid'],
        [[8040, 8040], 'mapped', [8032]],
        [[8041, 8041], 'mapped', [8033]],
        [[8042, 8042], 'mapped', [8034]],
        [[8043, 8043], 'mapped', [8035]],
        [[8044, 8044], 'mapped', [8036]],
        [[8045, 8045], 'mapped', [8037]],
        [[8046, 8046], 'mapped', [8038]],
        [[8047, 8047], 'mapped', [8039]],
        [[8048, 8048], 'valid'],
        [[8049, 8049], 'mapped', [940]],
        [[8050, 8050], 'valid'],
        [[8051, 8051], 'mapped', [941]],
        [[8052, 8052], 'valid'],
        [[8053, 8053], 'mapped', [942]],
        [[8054, 8054], 'valid'],
        [[8055, 8055], 'mapped', [943]],
        [[8056, 8056], 'valid'],
        [[8057, 8057], 'mapped', [972]],
        [[8058, 8058], 'valid'],
        [[8059, 8059], 'mapped', [973]],
        [[8060, 8060], 'valid'],
        [[8061, 8061], 'mapped', [974]],
        [[8062, 8063], 'disallowed'],
        [[8064, 8064], 'mapped', [7936, 953]],
        [[8065, 8065], 'mapped', [7937, 953]],
        [[8066, 8066], 'mapped', [7938, 953]],
        [[8067, 8067], 'mapped', [7939, 953]],
        [[8068, 8068], 'mapped', [7940, 953]],
        [[8069, 8069], 'mapped', [7941, 953]],
        [[8070, 8070], 'mapped', [7942, 953]],
        [[8071, 8071], 'mapped', [7943, 953]],
        [[8072, 8072], 'mapped', [7936, 953]],
        [[8073, 8073], 'mapped', [7937, 953]],
        [[8074, 8074], 'mapped', [7938, 953]],
        [[8075, 8075], 'mapped', [7939, 953]],
        [[8076, 8076], 'mapped', [7940, 953]],
        [[8077, 8077], 'mapped', [7941, 953]],
        [[8078, 8078], 'mapped', [7942, 953]],
        [[8079, 8079], 'mapped', [7943, 953]],
        [[8080, 8080], 'mapped', [7968, 953]],
        [[8081, 8081], 'mapped', [7969, 953]],
        [[8082, 8082], 'mapped', [7970, 953]],
        [[8083, 8083], 'mapped', [7971, 953]],
        [[8084, 8084], 'mapped', [7972, 953]],
        [[8085, 8085], 'mapped', [7973, 953]],
        [[8086, 8086], 'mapped', [7974, 953]],
        [[8087, 8087], 'mapped', [7975, 953]],
        [[8088, 8088], 'mapped', [7968, 953]],
        [[8089, 8089], 'mapped', [7969, 953]],
        [[8090, 8090], 'mapped', [7970, 953]],
        [[8091, 8091], 'mapped', [7971, 953]],
        [[8092, 8092], 'mapped', [7972, 953]],
        [[8093, 8093], 'mapped', [7973, 953]],
        [[8094, 8094], 'mapped', [7974, 953]],
        [[8095, 8095], 'mapped', [7975, 953]],
        [[8096, 8096], 'mapped', [8032, 953]],
        [[8097, 8097], 'mapped', [8033, 953]],
        [[8098, 8098], 'mapped', [8034, 953]],
        [[8099, 8099], 'mapped', [8035, 953]],
        [[8100, 8100], 'mapped', [8036, 953]],
        [[8101, 8101], 'mapped', [8037, 953]],
        [[8102, 8102], 'mapped', [8038, 953]],
        [[8103, 8103], 'mapped', [8039, 953]],
        [[8104, 8104], 'mapped', [8032, 953]],
        [[8105, 8105], 'mapped', [8033, 953]],
        [[8106, 8106], 'mapped', [8034, 953]],
        [[8107, 8107], 'mapped', [8035, 953]],
        [[8108, 8108], 'mapped', [8036, 953]],
        [[8109, 8109], 'mapped', [8037, 953]],
        [[8110, 8110], 'mapped', [8038, 953]],
        [[8111, 8111], 'mapped', [8039, 953]],
        [[8112, 8113], 'valid'],
        [[8114, 8114], 'mapped', [8048, 953]],
        [[8115, 8115], 'mapped', [945, 953]],
        [[8116, 8116], 'mapped', [940, 953]],
        [[8117, 8117], 'disallowed'],
        [[8118, 8118], 'valid'],
        [[8119, 8119], 'mapped', [8118, 953]],
        [[8120, 8120], 'mapped', [8112]],
        [[8121, 8121], 'mapped', [8113]],
        [[8122, 8122], 'mapped', [8048]],
        [[8123, 8123], 'mapped', [940]],
        [[8124, 8124], 'mapped', [945, 953]],
        [[8125, 8125], 'disallowed_STD3_mapped', [32, 787]],
        [[8126, 8126], 'mapped', [953]],
        [[8127, 8127], 'disallowed_STD3_mapped', [32, 787]],
        [[8128, 8128], 'disallowed_STD3_mapped', [32, 834]],
        [[8129, 8129], 'disallowed_STD3_mapped', [32, 776, 834]],
        [[8130, 8130], 'mapped', [8052, 953]],
        [[8131, 8131], 'mapped', [951, 953]],
        [[8132, 8132], 'mapped', [942, 953]],
        [[8133, 8133], 'disallowed'],
        [[8134, 8134], 'valid'],
        [[8135, 8135], 'mapped', [8134, 953]],
        [[8136, 8136], 'mapped', [8050]],
        [[8137, 8137], 'mapped', [941]],
        [[8138, 8138], 'mapped', [8052]],
        [[8139, 8139], 'mapped', [942]],
        [[8140, 8140], 'mapped', [951, 953]],
        [[8141, 8141], 'disallowed_STD3_mapped', [32, 787, 768]],
        [[8142, 8142], 'disallowed_STD3_mapped', [32, 787, 769]],
        [[8143, 8143], 'disallowed_STD3_mapped', [32, 787, 834]],
        [[8144, 8146], 'valid'],
        [[8147, 8147], 'mapped', [912]],
        [[8148, 8149], 'disallowed'],
        [[8150, 8151], 'valid'],
        [[8152, 8152], 'mapped', [8144]],
        [[8153, 8153], 'mapped', [8145]],
        [[8154, 8154], 'mapped', [8054]],
        [[8155, 8155], 'mapped', [943]],
        [[8156, 8156], 'disallowed'],
        [[8157, 8157], 'disallowed_STD3_mapped', [32, 788, 768]],
        [[8158, 8158], 'disallowed_STD3_mapped', [32, 788, 769]],
        [[8159, 8159], 'disallowed_STD3_mapped', [32, 788, 834]],
        [[8160, 8162], 'valid'],
        [[8163, 8163], 'mapped', [944]],
        [[8164, 8167], 'valid'],
        [[8168, 8168], 'mapped', [8160]],
        [[8169, 8169], 'mapped', [8161]],
        [[8170, 8170], 'mapped', [8058]],
        [[8171, 8171], 'mapped', [973]],
        [[8172, 8172], 'mapped', [8165]],
        [[8173, 8173], 'disallowed_STD3_mapped', [32, 776, 768]],
        [[8174, 8174], 'disallowed_STD3_mapped', [32, 776, 769]],
        [[8175, 8175], 'disallowed_STD3_mapped', [96]],
        [[8176, 8177], 'disallowed'],
        [[8178, 8178], 'mapped', [8060, 953]],
        [[8179, 8179], 'mapped', [969, 953]],
        [[8180, 8180], 'mapped', [974, 953]],
        [[8181, 8181], 'disallowed'],
        [[8182, 8182], 'valid'],
        [[8183, 8183], 'mapped', [8182, 953]],
        [[8184, 8184], 'mapped', [8056]],
        [[8185, 8185], 'mapped', [972]],
        [[8186, 8186], 'mapped', [8060]],
        [[8187, 8187], 'mapped', [974]],
        [[8188, 8188], 'mapped', [969, 953]],
        [[8189, 8189], 'disallowed_STD3_mapped', [32, 769]],
        [[8190, 8190], 'disallowed_STD3_mapped', [32, 788]],
        [[8191, 8191], 'disallowed'],
        [[8192, 8202], 'disallowed_STD3_mapped', [32]],
        [[8203, 8203], 'ignored'],
        [[8204, 8205], 'deviation', []],
        [[8206, 8207], 'disallowed'],
        [[8208, 8208], 'valid', [], 'NV8'],
        [[8209, 8209], 'mapped', [8208]],
        [[8210, 8214], 'valid', [], 'NV8'],
        [[8215, 8215], 'disallowed_STD3_mapped', [32, 819]],
        [[8216, 8227], 'valid', [], 'NV8'],
        [[8228, 8230], 'disallowed'],
        [[8231, 8231], 'valid', [], 'NV8'],
        [[8232, 8238], 'disallowed'],
        [[8239, 8239], 'disallowed_STD3_mapped', [32]],
        [[8240, 8242], 'valid', [], 'NV8'],
        [[8243, 8243], 'mapped', [8242, 8242]],
        [[8244, 8244], 'mapped', [8242, 8242, 8242]],
        [[8245, 8245], 'valid', [], 'NV8'],
        [[8246, 8246], 'mapped', [8245, 8245]],
        [[8247, 8247], 'mapped', [8245, 8245, 8245]],
        [[8248, 8251], 'valid', [], 'NV8'],
        [[8252, 8252], 'disallowed_STD3_mapped', [33, 33]],
        [[8253, 8253], 'valid', [], 'NV8'],
        [[8254, 8254], 'disallowed_STD3_mapped', [32, 773]],
        [[8255, 8262], 'valid', [], 'NV8'],
        [[8263, 8263], 'disallowed_STD3_mapped', [63, 63]],
        [[8264, 8264], 'disallowed_STD3_mapped', [63, 33]],
        [[8265, 8265], 'disallowed_STD3_mapped', [33, 63]],
        [[8266, 8269], 'valid', [], 'NV8'],
        [[8270, 8274], 'valid', [], 'NV8'],
        [[8275, 8276], 'valid', [], 'NV8'],
        [[8277, 8278], 'valid', [], 'NV8'],
        [[8279, 8279], 'mapped', [8242, 8242, 8242, 8242]],
        [[8280, 8286], 'valid', [], 'NV8'],
        [[8287, 8287], 'disallowed_STD3_mapped', [32]],
        [[8288, 8288], 'ignored'],
        [[8289, 8291], 'disallowed'],
        [[8292, 8292], 'ignored'],
        [[8293, 8293], 'disallowed'],
        [[8294, 8297], 'disallowed'],
        [[8298, 8303], 'disallowed'],
        [[8304, 8304], 'mapped', [48]],
        [[8305, 8305], 'mapped', [105]],
        [[8306, 8307], 'disallowed'],
        [[8308, 8308], 'mapped', [52]],
        [[8309, 8309], 'mapped', [53]],
        [[8310, 8310], 'mapped', [54]],
        [[8311, 8311], 'mapped', [55]],
        [[8312, 8312], 'mapped', [56]],
        [[8313, 8313], 'mapped', [57]],
        [[8314, 8314], 'disallowed_STD3_mapped', [43]],
        [[8315, 8315], 'mapped', [8722]],
        [[8316, 8316], 'disallowed_STD3_mapped', [61]],
        [[8317, 8317], 'disallowed_STD3_mapped', [40]],
        [[8318, 8318], 'disallowed_STD3_mapped', [41]],
        [[8319, 8319], 'mapped', [110]],
        [[8320, 8320], 'mapped', [48]],
        [[8321, 8321], 'mapped', [49]],
        [[8322, 8322], 'mapped', [50]],
        [[8323, 8323], 'mapped', [51]],
        [[8324, 8324], 'mapped', [52]],
        [[8325, 8325], 'mapped', [53]],
        [[8326, 8326], 'mapped', [54]],
        [[8327, 8327], 'mapped', [55]],
        [[8328, 8328], 'mapped', [56]],
        [[8329, 8329], 'mapped', [57]],
        [[8330, 8330], 'disallowed_STD3_mapped', [43]],
        [[8331, 8331], 'mapped', [8722]],
        [[8332, 8332], 'disallowed_STD3_mapped', [61]],
        [[8333, 8333], 'disallowed_STD3_mapped', [40]],
        [[8334, 8334], 'disallowed_STD3_mapped', [41]],
        [[8335, 8335], 'disallowed'],
        [[8336, 8336], 'mapped', [97]],
        [[8337, 8337], 'mapped', [101]],
        [[8338, 8338], 'mapped', [111]],
        [[8339, 8339], 'mapped', [120]],
        [[8340, 8340], 'mapped', [601]],
        [[8341, 8341], 'mapped', [104]],
        [[8342, 8342], 'mapped', [107]],
        [[8343, 8343], 'mapped', [108]],
        [[8344, 8344], 'mapped', [109]],
        [[8345, 8345], 'mapped', [110]],
        [[8346, 8346], 'mapped', [112]],
        [[8347, 8347], 'mapped', [115]],
        [[8348, 8348], 'mapped', [116]],
        [[8349, 8351], 'disallowed'],
        [[8352, 8359], 'valid', [], 'NV8'],
        [[8360, 8360], 'mapped', [114, 115]],
        [[8361, 8362], 'valid', [], 'NV8'],
        [[8363, 8363], 'valid', [], 'NV8'],
        [[8364, 8364], 'valid', [], 'NV8'],
        [[8365, 8367], 'valid', [], 'NV8'],
        [[8368, 8369], 'valid', [], 'NV8'],
        [[8370, 8373], 'valid', [], 'NV8'],
        [[8374, 8376], 'valid', [], 'NV8'],
        [[8377, 8377], 'valid', [], 'NV8'],
        [[8378, 8378], 'valid', [], 'NV8'],
        [[8379, 8381], 'valid', [], 'NV8'],
        [[8382, 8382], 'valid', [], 'NV8'],
        [[8383, 8399], 'disallowed'],
        [[8400, 8417], 'valid', [], 'NV8'],
        [[8418, 8419], 'valid', [], 'NV8'],
        [[8420, 8426], 'valid', [], 'NV8'],
        [[8427, 8427], 'valid', [], 'NV8'],
        [[8428, 8431], 'valid', [], 'NV8'],
        [[8432, 8432], 'valid', [], 'NV8'],
        [[8433, 8447], 'disallowed'],
        [[8448, 8448], 'disallowed_STD3_mapped', [97, 47, 99]],
        [[8449, 8449], 'disallowed_STD3_mapped', [97, 47, 115]],
        [[8450, 8450], 'mapped', [99]],
        [[8451, 8451], 'mapped', [176, 99]],
        [[8452, 8452], 'valid', [], 'NV8'],
        [[8453, 8453], 'disallowed_STD3_mapped', [99, 47, 111]],
        [[8454, 8454], 'disallowed_STD3_mapped', [99, 47, 117]],
        [[8455, 8455], 'mapped', [603]],
        [[8456, 8456], 'valid', [], 'NV8'],
        [[8457, 8457], 'mapped', [176, 102]],
        [[8458, 8458], 'mapped', [103]],
        [[8459, 8462], 'mapped', [104]],
        [[8463, 8463], 'mapped', [295]],
        [[8464, 8465], 'mapped', [105]],
        [[8466, 8467], 'mapped', [108]],
        [[8468, 8468], 'valid', [], 'NV8'],
        [[8469, 8469], 'mapped', [110]],
        [[8470, 8470], 'mapped', [110, 111]],
        [[8471, 8472], 'valid', [], 'NV8'],
        [[8473, 8473], 'mapped', [112]],
        [[8474, 8474], 'mapped', [113]],
        [[8475, 8477], 'mapped', [114]],
        [[8478, 8479], 'valid', [], 'NV8'],
        [[8480, 8480], 'mapped', [115, 109]],
        [[8481, 8481], 'mapped', [116, 101, 108]],
        [[8482, 8482], 'mapped', [116, 109]],
        [[8483, 8483], 'valid', [], 'NV8'],
        [[8484, 8484], 'mapped', [122]],
        [[8485, 8485], 'valid', [], 'NV8'],
        [[8486, 8486], 'mapped', [969]],
        [[8487, 8487], 'valid', [], 'NV8'],
        [[8488, 8488], 'mapped', [122]],
        [[8489, 8489], 'valid', [], 'NV8'],
        [[8490, 8490], 'mapped', [107]],
        [[8491, 8491], 'mapped', [229]],
        [[8492, 8492], 'mapped', [98]],
        [[8493, 8493], 'mapped', [99]],
        [[8494, 8494], 'valid', [], 'NV8'],
        [[8495, 8496], 'mapped', [101]],
        [[8497, 8497], 'mapped', [102]],
        [[8498, 8498], 'disallowed'],
        [[8499, 8499], 'mapped', [109]],
        [[8500, 8500], 'mapped', [111]],
        [[8501, 8501], 'mapped', [1488]],
        [[8502, 8502], 'mapped', [1489]],
        [[8503, 8503], 'mapped', [1490]],
        [[8504, 8504], 'mapped', [1491]],
        [[8505, 8505], 'mapped', [105]],
        [[8506, 8506], 'valid', [], 'NV8'],
        [[8507, 8507], 'mapped', [102, 97, 120]],
        [[8508, 8508], 'mapped', [960]],
        [[8509, 8510], 'mapped', [947]],
        [[8511, 8511], 'mapped', [960]],
        [[8512, 8512], 'mapped', [8721]],
        [[8513, 8516], 'valid', [], 'NV8'],
        [[8517, 8518], 'mapped', [100]],
        [[8519, 8519], 'mapped', [101]],
        [[8520, 8520], 'mapped', [105]],
        [[8521, 8521], 'mapped', [106]],
        [[8522, 8523], 'valid', [], 'NV8'],
        [[8524, 8524], 'valid', [], 'NV8'],
        [[8525, 8525], 'valid', [], 'NV8'],
        [[8526, 8526], 'valid'],
        [[8527, 8527], 'valid', [], 'NV8'],
        [[8528, 8528], 'mapped', [49, 8260, 55]],
        [[8529, 8529], 'mapped', [49, 8260, 57]],
        [[8530, 8530], 'mapped', [49, 8260, 49, 48]],
        [[8531, 8531], 'mapped', [49, 8260, 51]],
        [[8532, 8532], 'mapped', [50, 8260, 51]],
        [[8533, 8533], 'mapped', [49, 8260, 53]],
        [[8534, 8534], 'mapped', [50, 8260, 53]],
        [[8535, 8535], 'mapped', [51, 8260, 53]],
        [[8536, 8536], 'mapped', [52, 8260, 53]],
        [[8537, 8537], 'mapped', [49, 8260, 54]],
        [[8538, 8538], 'mapped', [53, 8260, 54]],
        [[8539, 8539], 'mapped', [49, 8260, 56]],
        [[8540, 8540], 'mapped', [51, 8260, 56]],
        [[8541, 8541], 'mapped', [53, 8260, 56]],
        [[8542, 8542], 'mapped', [55, 8260, 56]],
        [[8543, 8543], 'mapped', [49, 8260]],
        [[8544, 8544], 'mapped', [105]],
        [[8545, 8545], 'mapped', [105, 105]],
        [[8546, 8546], 'mapped', [105, 105, 105]],
        [[8547, 8547], 'mapped', [105, 118]],
        [[8548, 8548], 'mapped', [118]],
        [[8549, 8549], 'mapped', [118, 105]],
        [[8550, 8550], 'mapped', [118, 105, 105]],
        [[8551, 8551], 'mapped', [118, 105, 105, 105]],
        [[8552, 8552], 'mapped', [105, 120]],
        [[8553, 8553], 'mapped', [120]],
        [[8554, 8554], 'mapped', [120, 105]],
        [[8555, 8555], 'mapped', [120, 105, 105]],
        [[8556, 8556], 'mapped', [108]],
        [[8557, 8557], 'mapped', [99]],
        [[8558, 8558], 'mapped', [100]],
        [[8559, 8559], 'mapped', [109]],
        [[8560, 8560], 'mapped', [105]],
        [[8561, 8561], 'mapped', [105, 105]],
        [[8562, 8562], 'mapped', [105, 105, 105]],
        [[8563, 8563], 'mapped', [105, 118]],
        [[8564, 8564], 'mapped', [118]],
        [[8565, 8565], 'mapped', [118, 105]],
        [[8566, 8566], 'mapped', [118, 105, 105]],
        [[8567, 8567], 'mapped', [118, 105, 105, 105]],
        [[8568, 8568], 'mapped', [105, 120]],
        [[8569, 8569], 'mapped', [120]],
        [[8570, 8570], 'mapped', [120, 105]],
        [[8571, 8571], 'mapped', [120, 105, 105]],
        [[8572, 8572], 'mapped', [108]],
        [[8573, 8573], 'mapped', [99]],
        [[8574, 8574], 'mapped', [100]],
        [[8575, 8575], 'mapped', [109]],
        [[8576, 8578], 'valid', [], 'NV8'],
        [[8579, 8579], 'disallowed'],
        [[8580, 8580], 'valid'],
        [[8581, 8584], 'valid', [], 'NV8'],
        [[8585, 8585], 'mapped', [48, 8260, 51]],
        [[8586, 8587], 'valid', [], 'NV8'],
        [[8588, 8591], 'disallowed'],
        [[8592, 8682], 'valid', [], 'NV8'],
        [[8683, 8691], 'valid', [], 'NV8'],
        [[8692, 8703], 'valid', [], 'NV8'],
        [[8704, 8747], 'valid', [], 'NV8'],
        [[8748, 8748], 'mapped', [8747, 8747]],
        [[8749, 8749], 'mapped', [8747, 8747, 8747]],
        [[8750, 8750], 'valid', [], 'NV8'],
        [[8751, 8751], 'mapped', [8750, 8750]],
        [[8752, 8752], 'mapped', [8750, 8750, 8750]],
        [[8753, 8799], 'valid', [], 'NV8'],
        [[8800, 8800], 'disallowed_STD3_valid'],
        [[8801, 8813], 'valid', [], 'NV8'],
        [[8814, 8815], 'disallowed_STD3_valid'],
        [[8816, 8945], 'valid', [], 'NV8'],
        [[8946, 8959], 'valid', [], 'NV8'],
        [[8960, 8960], 'valid', [], 'NV8'],
        [[8961, 8961], 'valid', [], 'NV8'],
        [[8962, 9e3], 'valid', [], 'NV8'],
        [[9001, 9001], 'mapped', [12296]],
        [[9002, 9002], 'mapped', [12297]],
        [[9003, 9082], 'valid', [], 'NV8'],
        [[9083, 9083], 'valid', [], 'NV8'],
        [[9084, 9084], 'valid', [], 'NV8'],
        [[9085, 9114], 'valid', [], 'NV8'],
        [[9115, 9166], 'valid', [], 'NV8'],
        [[9167, 9168], 'valid', [], 'NV8'],
        [[9169, 9179], 'valid', [], 'NV8'],
        [[9180, 9191], 'valid', [], 'NV8'],
        [[9192, 9192], 'valid', [], 'NV8'],
        [[9193, 9203], 'valid', [], 'NV8'],
        [[9204, 9210], 'valid', [], 'NV8'],
        [[9211, 9215], 'disallowed'],
        [[9216, 9252], 'valid', [], 'NV8'],
        [[9253, 9254], 'valid', [], 'NV8'],
        [[9255, 9279], 'disallowed'],
        [[9280, 9290], 'valid', [], 'NV8'],
        [[9291, 9311], 'disallowed'],
        [[9312, 9312], 'mapped', [49]],
        [[9313, 9313], 'mapped', [50]],
        [[9314, 9314], 'mapped', [51]],
        [[9315, 9315], 'mapped', [52]],
        [[9316, 9316], 'mapped', [53]],
        [[9317, 9317], 'mapped', [54]],
        [[9318, 9318], 'mapped', [55]],
        [[9319, 9319], 'mapped', [56]],
        [[9320, 9320], 'mapped', [57]],
        [[9321, 9321], 'mapped', [49, 48]],
        [[9322, 9322], 'mapped', [49, 49]],
        [[9323, 9323], 'mapped', [49, 50]],
        [[9324, 9324], 'mapped', [49, 51]],
        [[9325, 9325], 'mapped', [49, 52]],
        [[9326, 9326], 'mapped', [49, 53]],
        [[9327, 9327], 'mapped', [49, 54]],
        [[9328, 9328], 'mapped', [49, 55]],
        [[9329, 9329], 'mapped', [49, 56]],
        [[9330, 9330], 'mapped', [49, 57]],
        [[9331, 9331], 'mapped', [50, 48]],
        [[9332, 9332], 'disallowed_STD3_mapped', [40, 49, 41]],
        [[9333, 9333], 'disallowed_STD3_mapped', [40, 50, 41]],
        [[9334, 9334], 'disallowed_STD3_mapped', [40, 51, 41]],
        [[9335, 9335], 'disallowed_STD3_mapped', [40, 52, 41]],
        [[9336, 9336], 'disallowed_STD3_mapped', [40, 53, 41]],
        [[9337, 9337], 'disallowed_STD3_mapped', [40, 54, 41]],
        [[9338, 9338], 'disallowed_STD3_mapped', [40, 55, 41]],
        [[9339, 9339], 'disallowed_STD3_mapped', [40, 56, 41]],
        [[9340, 9340], 'disallowed_STD3_mapped', [40, 57, 41]],
        [[9341, 9341], 'disallowed_STD3_mapped', [40, 49, 48, 41]],
        [[9342, 9342], 'disallowed_STD3_mapped', [40, 49, 49, 41]],
        [[9343, 9343], 'disallowed_STD3_mapped', [40, 49, 50, 41]],
        [[9344, 9344], 'disallowed_STD3_mapped', [40, 49, 51, 41]],
        [[9345, 9345], 'disallowed_STD3_mapped', [40, 49, 52, 41]],
        [[9346, 9346], 'disallowed_STD3_mapped', [40, 49, 53, 41]],
        [[9347, 9347], 'disallowed_STD3_mapped', [40, 49, 54, 41]],
        [[9348, 9348], 'disallowed_STD3_mapped', [40, 49, 55, 41]],
        [[9349, 9349], 'disallowed_STD3_mapped', [40, 49, 56, 41]],
        [[9350, 9350], 'disallowed_STD3_mapped', [40, 49, 57, 41]],
        [[9351, 9351], 'disallowed_STD3_mapped', [40, 50, 48, 41]],
        [[9352, 9371], 'disallowed'],
        [[9372, 9372], 'disallowed_STD3_mapped', [40, 97, 41]],
        [[9373, 9373], 'disallowed_STD3_mapped', [40, 98, 41]],
        [[9374, 9374], 'disallowed_STD3_mapped', [40, 99, 41]],
        [[9375, 9375], 'disallowed_STD3_mapped', [40, 100, 41]],
        [[9376, 9376], 'disallowed_STD3_mapped', [40, 101, 41]],
        [[9377, 9377], 'disallowed_STD3_mapped', [40, 102, 41]],
        [[9378, 9378], 'disallowed_STD3_mapped', [40, 103, 41]],
        [[9379, 9379], 'disallowed_STD3_mapped', [40, 104, 41]],
        [[9380, 9380], 'disallowed_STD3_mapped', [40, 105, 41]],
        [[9381, 9381], 'disallowed_STD3_mapped', [40, 106, 41]],
        [[9382, 9382], 'disallowed_STD3_mapped', [40, 107, 41]],
        [[9383, 9383], 'disallowed_STD3_mapped', [40, 108, 41]],
        [[9384, 9384], 'disallowed_STD3_mapped', [40, 109, 41]],
        [[9385, 9385], 'disallowed_STD3_mapped', [40, 110, 41]],
        [[9386, 9386], 'disallowed_STD3_mapped', [40, 111, 41]],
        [[9387, 9387], 'disallowed_STD3_mapped', [40, 112, 41]],
        [[9388, 9388], 'disallowed_STD3_mapped', [40, 113, 41]],
        [[9389, 9389], 'disallowed_STD3_mapped', [40, 114, 41]],
        [[9390, 9390], 'disallowed_STD3_mapped', [40, 115, 41]],
        [[9391, 9391], 'disallowed_STD3_mapped', [40, 116, 41]],
        [[9392, 9392], 'disallowed_STD3_mapped', [40, 117, 41]],
        [[9393, 9393], 'disallowed_STD3_mapped', [40, 118, 41]],
        [[9394, 9394], 'disallowed_STD3_mapped', [40, 119, 41]],
        [[9395, 9395], 'disallowed_STD3_mapped', [40, 120, 41]],
        [[9396, 9396], 'disallowed_STD3_mapped', [40, 121, 41]],
        [[9397, 9397], 'disallowed_STD3_mapped', [40, 122, 41]],
        [[9398, 9398], 'mapped', [97]],
        [[9399, 9399], 'mapped', [98]],
        [[9400, 9400], 'mapped', [99]],
        [[9401, 9401], 'mapped', [100]],
        [[9402, 9402], 'mapped', [101]],
        [[9403, 9403], 'mapped', [102]],
        [[9404, 9404], 'mapped', [103]],
        [[9405, 9405], 'mapped', [104]],
        [[9406, 9406], 'mapped', [105]],
        [[9407, 9407], 'mapped', [106]],
        [[9408, 9408], 'mapped', [107]],
        [[9409, 9409], 'mapped', [108]],
        [[9410, 9410], 'mapped', [109]],
        [[9411, 9411], 'mapped', [110]],
        [[9412, 9412], 'mapped', [111]],
        [[9413, 9413], 'mapped', [112]],
        [[9414, 9414], 'mapped', [113]],
        [[9415, 9415], 'mapped', [114]],
        [[9416, 9416], 'mapped', [115]],
        [[9417, 9417], 'mapped', [116]],
        [[9418, 9418], 'mapped', [117]],
        [[9419, 9419], 'mapped', [118]],
        [[9420, 9420], 'mapped', [119]],
        [[9421, 9421], 'mapped', [120]],
        [[9422, 9422], 'mapped', [121]],
        [[9423, 9423], 'mapped', [122]],
        [[9424, 9424], 'mapped', [97]],
        [[9425, 9425], 'mapped', [98]],
        [[9426, 9426], 'mapped', [99]],
        [[9427, 9427], 'mapped', [100]],
        [[9428, 9428], 'mapped', [101]],
        [[9429, 9429], 'mapped', [102]],
        [[9430, 9430], 'mapped', [103]],
        [[9431, 9431], 'mapped', [104]],
        [[9432, 9432], 'mapped', [105]],
        [[9433, 9433], 'mapped', [106]],
        [[9434, 9434], 'mapped', [107]],
        [[9435, 9435], 'mapped', [108]],
        [[9436, 9436], 'mapped', [109]],
        [[9437, 9437], 'mapped', [110]],
        [[9438, 9438], 'mapped', [111]],
        [[9439, 9439], 'mapped', [112]],
        [[9440, 9440], 'mapped', [113]],
        [[9441, 9441], 'mapped', [114]],
        [[9442, 9442], 'mapped', [115]],
        [[9443, 9443], 'mapped', [116]],
        [[9444, 9444], 'mapped', [117]],
        [[9445, 9445], 'mapped', [118]],
        [[9446, 9446], 'mapped', [119]],
        [[9447, 9447], 'mapped', [120]],
        [[9448, 9448], 'mapped', [121]],
        [[9449, 9449], 'mapped', [122]],
        [[9450, 9450], 'mapped', [48]],
        [[9451, 9470], 'valid', [], 'NV8'],
        [[9471, 9471], 'valid', [], 'NV8'],
        [[9472, 9621], 'valid', [], 'NV8'],
        [[9622, 9631], 'valid', [], 'NV8'],
        [[9632, 9711], 'valid', [], 'NV8'],
        [[9712, 9719], 'valid', [], 'NV8'],
        [[9720, 9727], 'valid', [], 'NV8'],
        [[9728, 9747], 'valid', [], 'NV8'],
        [[9748, 9749], 'valid', [], 'NV8'],
        [[9750, 9751], 'valid', [], 'NV8'],
        [[9752, 9752], 'valid', [], 'NV8'],
        [[9753, 9753], 'valid', [], 'NV8'],
        [[9754, 9839], 'valid', [], 'NV8'],
        [[9840, 9841], 'valid', [], 'NV8'],
        [[9842, 9853], 'valid', [], 'NV8'],
        [[9854, 9855], 'valid', [], 'NV8'],
        [[9856, 9865], 'valid', [], 'NV8'],
        [[9866, 9873], 'valid', [], 'NV8'],
        [[9874, 9884], 'valid', [], 'NV8'],
        [[9885, 9885], 'valid', [], 'NV8'],
        [[9886, 9887], 'valid', [], 'NV8'],
        [[9888, 9889], 'valid', [], 'NV8'],
        [[9890, 9905], 'valid', [], 'NV8'],
        [[9906, 9906], 'valid', [], 'NV8'],
        [[9907, 9916], 'valid', [], 'NV8'],
        [[9917, 9919], 'valid', [], 'NV8'],
        [[9920, 9923], 'valid', [], 'NV8'],
        [[9924, 9933], 'valid', [], 'NV8'],
        [[9934, 9934], 'valid', [], 'NV8'],
        [[9935, 9953], 'valid', [], 'NV8'],
        [[9954, 9954], 'valid', [], 'NV8'],
        [[9955, 9955], 'valid', [], 'NV8'],
        [[9956, 9959], 'valid', [], 'NV8'],
        [[9960, 9983], 'valid', [], 'NV8'],
        [[9984, 9984], 'valid', [], 'NV8'],
        [[9985, 9988], 'valid', [], 'NV8'],
        [[9989, 9989], 'valid', [], 'NV8'],
        [[9990, 9993], 'valid', [], 'NV8'],
        [[9994, 9995], 'valid', [], 'NV8'],
        [[9996, 10023], 'valid', [], 'NV8'],
        [[10024, 10024], 'valid', [], 'NV8'],
        [[10025, 10059], 'valid', [], 'NV8'],
        [[10060, 10060], 'valid', [], 'NV8'],
        [[10061, 10061], 'valid', [], 'NV8'],
        [[10062, 10062], 'valid', [], 'NV8'],
        [[10063, 10066], 'valid', [], 'NV8'],
        [[10067, 10069], 'valid', [], 'NV8'],
        [[10070, 10070], 'valid', [], 'NV8'],
        [[10071, 10071], 'valid', [], 'NV8'],
        [[10072, 10078], 'valid', [], 'NV8'],
        [[10079, 10080], 'valid', [], 'NV8'],
        [[10081, 10087], 'valid', [], 'NV8'],
        [[10088, 10101], 'valid', [], 'NV8'],
        [[10102, 10132], 'valid', [], 'NV8'],
        [[10133, 10135], 'valid', [], 'NV8'],
        [[10136, 10159], 'valid', [], 'NV8'],
        [[10160, 10160], 'valid', [], 'NV8'],
        [[10161, 10174], 'valid', [], 'NV8'],
        [[10175, 10175], 'valid', [], 'NV8'],
        [[10176, 10182], 'valid', [], 'NV8'],
        [[10183, 10186], 'valid', [], 'NV8'],
        [[10187, 10187], 'valid', [], 'NV8'],
        [[10188, 10188], 'valid', [], 'NV8'],
        [[10189, 10189], 'valid', [], 'NV8'],
        [[10190, 10191], 'valid', [], 'NV8'],
        [[10192, 10219], 'valid', [], 'NV8'],
        [[10220, 10223], 'valid', [], 'NV8'],
        [[10224, 10239], 'valid', [], 'NV8'],
        [[10240, 10495], 'valid', [], 'NV8'],
        [[10496, 10763], 'valid', [], 'NV8'],
        [[10764, 10764], 'mapped', [8747, 8747, 8747, 8747]],
        [[10765, 10867], 'valid', [], 'NV8'],
        [[10868, 10868], 'disallowed_STD3_mapped', [58, 58, 61]],
        [[10869, 10869], 'disallowed_STD3_mapped', [61, 61]],
        [[10870, 10870], 'disallowed_STD3_mapped', [61, 61, 61]],
        [[10871, 10971], 'valid', [], 'NV8'],
        [[10972, 10972], 'mapped', [10973, 824]],
        [[10973, 11007], 'valid', [], 'NV8'],
        [[11008, 11021], 'valid', [], 'NV8'],
        [[11022, 11027], 'valid', [], 'NV8'],
        [[11028, 11034], 'valid', [], 'NV8'],
        [[11035, 11039], 'valid', [], 'NV8'],
        [[11040, 11043], 'valid', [], 'NV8'],
        [[11044, 11084], 'valid', [], 'NV8'],
        [[11085, 11087], 'valid', [], 'NV8'],
        [[11088, 11092], 'valid', [], 'NV8'],
        [[11093, 11097], 'valid', [], 'NV8'],
        [[11098, 11123], 'valid', [], 'NV8'],
        [[11124, 11125], 'disallowed'],
        [[11126, 11157], 'valid', [], 'NV8'],
        [[11158, 11159], 'disallowed'],
        [[11160, 11193], 'valid', [], 'NV8'],
        [[11194, 11196], 'disallowed'],
        [[11197, 11208], 'valid', [], 'NV8'],
        [[11209, 11209], 'disallowed'],
        [[11210, 11217], 'valid', [], 'NV8'],
        [[11218, 11243], 'disallowed'],
        [[11244, 11247], 'valid', [], 'NV8'],
        [[11248, 11263], 'disallowed'],
        [[11264, 11264], 'mapped', [11312]],
        [[11265, 11265], 'mapped', [11313]],
        [[11266, 11266], 'mapped', [11314]],
        [[11267, 11267], 'mapped', [11315]],
        [[11268, 11268], 'mapped', [11316]],
        [[11269, 11269], 'mapped', [11317]],
        [[11270, 11270], 'mapped', [11318]],
        [[11271, 11271], 'mapped', [11319]],
        [[11272, 11272], 'mapped', [11320]],
        [[11273, 11273], 'mapped', [11321]],
        [[11274, 11274], 'mapped', [11322]],
        [[11275, 11275], 'mapped', [11323]],
        [[11276, 11276], 'mapped', [11324]],
        [[11277, 11277], 'mapped', [11325]],
        [[11278, 11278], 'mapped', [11326]],
        [[11279, 11279], 'mapped', [11327]],
        [[11280, 11280], 'mapped', [11328]],
        [[11281, 11281], 'mapped', [11329]],
        [[11282, 11282], 'mapped', [11330]],
        [[11283, 11283], 'mapped', [11331]],
        [[11284, 11284], 'mapped', [11332]],
        [[11285, 11285], 'mapped', [11333]],
        [[11286, 11286], 'mapped', [11334]],
        [[11287, 11287], 'mapped', [11335]],
        [[11288, 11288], 'mapped', [11336]],
        [[11289, 11289], 'mapped', [11337]],
        [[11290, 11290], 'mapped', [11338]],
        [[11291, 11291], 'mapped', [11339]],
        [[11292, 11292], 'mapped', [11340]],
        [[11293, 11293], 'mapped', [11341]],
        [[11294, 11294], 'mapped', [11342]],
        [[11295, 11295], 'mapped', [11343]],
        [[11296, 11296], 'mapped', [11344]],
        [[11297, 11297], 'mapped', [11345]],
        [[11298, 11298], 'mapped', [11346]],
        [[11299, 11299], 'mapped', [11347]],
        [[11300, 11300], 'mapped', [11348]],
        [[11301, 11301], 'mapped', [11349]],
        [[11302, 11302], 'mapped', [11350]],
        [[11303, 11303], 'mapped', [11351]],
        [[11304, 11304], 'mapped', [11352]],
        [[11305, 11305], 'mapped', [11353]],
        [[11306, 11306], 'mapped', [11354]],
        [[11307, 11307], 'mapped', [11355]],
        [[11308, 11308], 'mapped', [11356]],
        [[11309, 11309], 'mapped', [11357]],
        [[11310, 11310], 'mapped', [11358]],
        [[11311, 11311], 'disallowed'],
        [[11312, 11358], 'valid'],
        [[11359, 11359], 'disallowed'],
        [[11360, 11360], 'mapped', [11361]],
        [[11361, 11361], 'valid'],
        [[11362, 11362], 'mapped', [619]],
        [[11363, 11363], 'mapped', [7549]],
        [[11364, 11364], 'mapped', [637]],
        [[11365, 11366], 'valid'],
        [[11367, 11367], 'mapped', [11368]],
        [[11368, 11368], 'valid'],
        [[11369, 11369], 'mapped', [11370]],
        [[11370, 11370], 'valid'],
        [[11371, 11371], 'mapped', [11372]],
        [[11372, 11372], 'valid'],
        [[11373, 11373], 'mapped', [593]],
        [[11374, 11374], 'mapped', [625]],
        [[11375, 11375], 'mapped', [592]],
        [[11376, 11376], 'mapped', [594]],
        [[11377, 11377], 'valid'],
        [[11378, 11378], 'mapped', [11379]],
        [[11379, 11379], 'valid'],
        [[11380, 11380], 'valid'],
        [[11381, 11381], 'mapped', [11382]],
        [[11382, 11383], 'valid'],
        [[11384, 11387], 'valid'],
        [[11388, 11388], 'mapped', [106]],
        [[11389, 11389], 'mapped', [118]],
        [[11390, 11390], 'mapped', [575]],
        [[11391, 11391], 'mapped', [576]],
        [[11392, 11392], 'mapped', [11393]],
        [[11393, 11393], 'valid'],
        [[11394, 11394], 'mapped', [11395]],
        [[11395, 11395], 'valid'],
        [[11396, 11396], 'mapped', [11397]],
        [[11397, 11397], 'valid'],
        [[11398, 11398], 'mapped', [11399]],
        [[11399, 11399], 'valid'],
        [[11400, 11400], 'mapped', [11401]],
        [[11401, 11401], 'valid'],
        [[11402, 11402], 'mapped', [11403]],
        [[11403, 11403], 'valid'],
        [[11404, 11404], 'mapped', [11405]],
        [[11405, 11405], 'valid'],
        [[11406, 11406], 'mapped', [11407]],
        [[11407, 11407], 'valid'],
        [[11408, 11408], 'mapped', [11409]],
        [[11409, 11409], 'valid'],
        [[11410, 11410], 'mapped', [11411]],
        [[11411, 11411], 'valid'],
        [[11412, 11412], 'mapped', [11413]],
        [[11413, 11413], 'valid'],
        [[11414, 11414], 'mapped', [11415]],
        [[11415, 11415], 'valid'],
        [[11416, 11416], 'mapped', [11417]],
        [[11417, 11417], 'valid'],
        [[11418, 11418], 'mapped', [11419]],
        [[11419, 11419], 'valid'],
        [[11420, 11420], 'mapped', [11421]],
        [[11421, 11421], 'valid'],
        [[11422, 11422], 'mapped', [11423]],
        [[11423, 11423], 'valid'],
        [[11424, 11424], 'mapped', [11425]],
        [[11425, 11425], 'valid'],
        [[11426, 11426], 'mapped', [11427]],
        [[11427, 11427], 'valid'],
        [[11428, 11428], 'mapped', [11429]],
        [[11429, 11429], 'valid'],
        [[11430, 11430], 'mapped', [11431]],
        [[11431, 11431], 'valid'],
        [[11432, 11432], 'mapped', [11433]],
        [[11433, 11433], 'valid'],
        [[11434, 11434], 'mapped', [11435]],
        [[11435, 11435], 'valid'],
        [[11436, 11436], 'mapped', [11437]],
        [[11437, 11437], 'valid'],
        [[11438, 11438], 'mapped', [11439]],
        [[11439, 11439], 'valid'],
        [[11440, 11440], 'mapped', [11441]],
        [[11441, 11441], 'valid'],
        [[11442, 11442], 'mapped', [11443]],
        [[11443, 11443], 'valid'],
        [[11444, 11444], 'mapped', [11445]],
        [[11445, 11445], 'valid'],
        [[11446, 11446], 'mapped', [11447]],
        [[11447, 11447], 'valid'],
        [[11448, 11448], 'mapped', [11449]],
        [[11449, 11449], 'valid'],
        [[11450, 11450], 'mapped', [11451]],
        [[11451, 11451], 'valid'],
        [[11452, 11452], 'mapped', [11453]],
        [[11453, 11453], 'valid'],
        [[11454, 11454], 'mapped', [11455]],
        [[11455, 11455], 'valid'],
        [[11456, 11456], 'mapped', [11457]],
        [[11457, 11457], 'valid'],
        [[11458, 11458], 'mapped', [11459]],
        [[11459, 11459], 'valid'],
        [[11460, 11460], 'mapped', [11461]],
        [[11461, 11461], 'valid'],
        [[11462, 11462], 'mapped', [11463]],
        [[11463, 11463], 'valid'],
        [[11464, 11464], 'mapped', [11465]],
        [[11465, 11465], 'valid'],
        [[11466, 11466], 'mapped', [11467]],
        [[11467, 11467], 'valid'],
        [[11468, 11468], 'mapped', [11469]],
        [[11469, 11469], 'valid'],
        [[11470, 11470], 'mapped', [11471]],
        [[11471, 11471], 'valid'],
        [[11472, 11472], 'mapped', [11473]],
        [[11473, 11473], 'valid'],
        [[11474, 11474], 'mapped', [11475]],
        [[11475, 11475], 'valid'],
        [[11476, 11476], 'mapped', [11477]],
        [[11477, 11477], 'valid'],
        [[11478, 11478], 'mapped', [11479]],
        [[11479, 11479], 'valid'],
        [[11480, 11480], 'mapped', [11481]],
        [[11481, 11481], 'valid'],
        [[11482, 11482], 'mapped', [11483]],
        [[11483, 11483], 'valid'],
        [[11484, 11484], 'mapped', [11485]],
        [[11485, 11485], 'valid'],
        [[11486, 11486], 'mapped', [11487]],
        [[11487, 11487], 'valid'],
        [[11488, 11488], 'mapped', [11489]],
        [[11489, 11489], 'valid'],
        [[11490, 11490], 'mapped', [11491]],
        [[11491, 11492], 'valid'],
        [[11493, 11498], 'valid', [], 'NV8'],
        [[11499, 11499], 'mapped', [11500]],
        [[11500, 11500], 'valid'],
        [[11501, 11501], 'mapped', [11502]],
        [[11502, 11505], 'valid'],
        [[11506, 11506], 'mapped', [11507]],
        [[11507, 11507], 'valid'],
        [[11508, 11512], 'disallowed'],
        [[11513, 11519], 'valid', [], 'NV8'],
        [[11520, 11557], 'valid'],
        [[11558, 11558], 'disallowed'],
        [[11559, 11559], 'valid'],
        [[11560, 11564], 'disallowed'],
        [[11565, 11565], 'valid'],
        [[11566, 11567], 'disallowed'],
        [[11568, 11621], 'valid'],
        [[11622, 11623], 'valid'],
        [[11624, 11630], 'disallowed'],
        [[11631, 11631], 'mapped', [11617]],
        [[11632, 11632], 'valid', [], 'NV8'],
        [[11633, 11646], 'disallowed'],
        [[11647, 11647], 'valid'],
        [[11648, 11670], 'valid'],
        [[11671, 11679], 'disallowed'],
        [[11680, 11686], 'valid'],
        [[11687, 11687], 'disallowed'],
        [[11688, 11694], 'valid'],
        [[11695, 11695], 'disallowed'],
        [[11696, 11702], 'valid'],
        [[11703, 11703], 'disallowed'],
        [[11704, 11710], 'valid'],
        [[11711, 11711], 'disallowed'],
        [[11712, 11718], 'valid'],
        [[11719, 11719], 'disallowed'],
        [[11720, 11726], 'valid'],
        [[11727, 11727], 'disallowed'],
        [[11728, 11734], 'valid'],
        [[11735, 11735], 'disallowed'],
        [[11736, 11742], 'valid'],
        [[11743, 11743], 'disallowed'],
        [[11744, 11775], 'valid'],
        [[11776, 11799], 'valid', [], 'NV8'],
        [[11800, 11803], 'valid', [], 'NV8'],
        [[11804, 11805], 'valid', [], 'NV8'],
        [[11806, 11822], 'valid', [], 'NV8'],
        [[11823, 11823], 'valid'],
        [[11824, 11824], 'valid', [], 'NV8'],
        [[11825, 11825], 'valid', [], 'NV8'],
        [[11826, 11835], 'valid', [], 'NV8'],
        [[11836, 11842], 'valid', [], 'NV8'],
        [[11843, 11903], 'disallowed'],
        [[11904, 11929], 'valid', [], 'NV8'],
        [[11930, 11930], 'disallowed'],
        [[11931, 11934], 'valid', [], 'NV8'],
        [[11935, 11935], 'mapped', [27597]],
        [[11936, 12018], 'valid', [], 'NV8'],
        [[12019, 12019], 'mapped', [40863]],
        [[12020, 12031], 'disallowed'],
        [[12032, 12032], 'mapped', [19968]],
        [[12033, 12033], 'mapped', [20008]],
        [[12034, 12034], 'mapped', [20022]],
        [[12035, 12035], 'mapped', [20031]],
        [[12036, 12036], 'mapped', [20057]],
        [[12037, 12037], 'mapped', [20101]],
        [[12038, 12038], 'mapped', [20108]],
        [[12039, 12039], 'mapped', [20128]],
        [[12040, 12040], 'mapped', [20154]],
        [[12041, 12041], 'mapped', [20799]],
        [[12042, 12042], 'mapped', [20837]],
        [[12043, 12043], 'mapped', [20843]],
        [[12044, 12044], 'mapped', [20866]],
        [[12045, 12045], 'mapped', [20886]],
        [[12046, 12046], 'mapped', [20907]],
        [[12047, 12047], 'mapped', [20960]],
        [[12048, 12048], 'mapped', [20981]],
        [[12049, 12049], 'mapped', [20992]],
        [[12050, 12050], 'mapped', [21147]],
        [[12051, 12051], 'mapped', [21241]],
        [[12052, 12052], 'mapped', [21269]],
        [[12053, 12053], 'mapped', [21274]],
        [[12054, 12054], 'mapped', [21304]],
        [[12055, 12055], 'mapped', [21313]],
        [[12056, 12056], 'mapped', [21340]],
        [[12057, 12057], 'mapped', [21353]],
        [[12058, 12058], 'mapped', [21378]],
        [[12059, 12059], 'mapped', [21430]],
        [[12060, 12060], 'mapped', [21448]],
        [[12061, 12061], 'mapped', [21475]],
        [[12062, 12062], 'mapped', [22231]],
        [[12063, 12063], 'mapped', [22303]],
        [[12064, 12064], 'mapped', [22763]],
        [[12065, 12065], 'mapped', [22786]],
        [[12066, 12066], 'mapped', [22794]],
        [[12067, 12067], 'mapped', [22805]],
        [[12068, 12068], 'mapped', [22823]],
        [[12069, 12069], 'mapped', [22899]],
        [[12070, 12070], 'mapped', [23376]],
        [[12071, 12071], 'mapped', [23424]],
        [[12072, 12072], 'mapped', [23544]],
        [[12073, 12073], 'mapped', [23567]],
        [[12074, 12074], 'mapped', [23586]],
        [[12075, 12075], 'mapped', [23608]],
        [[12076, 12076], 'mapped', [23662]],
        [[12077, 12077], 'mapped', [23665]],
        [[12078, 12078], 'mapped', [24027]],
        [[12079, 12079], 'mapped', [24037]],
        [[12080, 12080], 'mapped', [24049]],
        [[12081, 12081], 'mapped', [24062]],
        [[12082, 12082], 'mapped', [24178]],
        [[12083, 12083], 'mapped', [24186]],
        [[12084, 12084], 'mapped', [24191]],
        [[12085, 12085], 'mapped', [24308]],
        [[12086, 12086], 'mapped', [24318]],
        [[12087, 12087], 'mapped', [24331]],
        [[12088, 12088], 'mapped', [24339]],
        [[12089, 12089], 'mapped', [24400]],
        [[12090, 12090], 'mapped', [24417]],
        [[12091, 12091], 'mapped', [24435]],
        [[12092, 12092], 'mapped', [24515]],
        [[12093, 12093], 'mapped', [25096]],
        [[12094, 12094], 'mapped', [25142]],
        [[12095, 12095], 'mapped', [25163]],
        [[12096, 12096], 'mapped', [25903]],
        [[12097, 12097], 'mapped', [25908]],
        [[12098, 12098], 'mapped', [25991]],
        [[12099, 12099], 'mapped', [26007]],
        [[12100, 12100], 'mapped', [26020]],
        [[12101, 12101], 'mapped', [26041]],
        [[12102, 12102], 'mapped', [26080]],
        [[12103, 12103], 'mapped', [26085]],
        [[12104, 12104], 'mapped', [26352]],
        [[12105, 12105], 'mapped', [26376]],
        [[12106, 12106], 'mapped', [26408]],
        [[12107, 12107], 'mapped', [27424]],
        [[12108, 12108], 'mapped', [27490]],
        [[12109, 12109], 'mapped', [27513]],
        [[12110, 12110], 'mapped', [27571]],
        [[12111, 12111], 'mapped', [27595]],
        [[12112, 12112], 'mapped', [27604]],
        [[12113, 12113], 'mapped', [27611]],
        [[12114, 12114], 'mapped', [27663]],
        [[12115, 12115], 'mapped', [27668]],
        [[12116, 12116], 'mapped', [27700]],
        [[12117, 12117], 'mapped', [28779]],
        [[12118, 12118], 'mapped', [29226]],
        [[12119, 12119], 'mapped', [29238]],
        [[12120, 12120], 'mapped', [29243]],
        [[12121, 12121], 'mapped', [29247]],
        [[12122, 12122], 'mapped', [29255]],
        [[12123, 12123], 'mapped', [29273]],
        [[12124, 12124], 'mapped', [29275]],
        [[12125, 12125], 'mapped', [29356]],
        [[12126, 12126], 'mapped', [29572]],
        [[12127, 12127], 'mapped', [29577]],
        [[12128, 12128], 'mapped', [29916]],
        [[12129, 12129], 'mapped', [29926]],
        [[12130, 12130], 'mapped', [29976]],
        [[12131, 12131], 'mapped', [29983]],
        [[12132, 12132], 'mapped', [29992]],
        [[12133, 12133], 'mapped', [3e4]],
        [[12134, 12134], 'mapped', [30091]],
        [[12135, 12135], 'mapped', [30098]],
        [[12136, 12136], 'mapped', [30326]],
        [[12137, 12137], 'mapped', [30333]],
        [[12138, 12138], 'mapped', [30382]],
        [[12139, 12139], 'mapped', [30399]],
        [[12140, 12140], 'mapped', [30446]],
        [[12141, 12141], 'mapped', [30683]],
        [[12142, 12142], 'mapped', [30690]],
        [[12143, 12143], 'mapped', [30707]],
        [[12144, 12144], 'mapped', [31034]],
        [[12145, 12145], 'mapped', [31160]],
        [[12146, 12146], 'mapped', [31166]],
        [[12147, 12147], 'mapped', [31348]],
        [[12148, 12148], 'mapped', [31435]],
        [[12149, 12149], 'mapped', [31481]],
        [[12150, 12150], 'mapped', [31859]],
        [[12151, 12151], 'mapped', [31992]],
        [[12152, 12152], 'mapped', [32566]],
        [[12153, 12153], 'mapped', [32593]],
        [[12154, 12154], 'mapped', [32650]],
        [[12155, 12155], 'mapped', [32701]],
        [[12156, 12156], 'mapped', [32769]],
        [[12157, 12157], 'mapped', [32780]],
        [[12158, 12158], 'mapped', [32786]],
        [[12159, 12159], 'mapped', [32819]],
        [[12160, 12160], 'mapped', [32895]],
        [[12161, 12161], 'mapped', [32905]],
        [[12162, 12162], 'mapped', [33251]],
        [[12163, 12163], 'mapped', [33258]],
        [[12164, 12164], 'mapped', [33267]],
        [[12165, 12165], 'mapped', [33276]],
        [[12166, 12166], 'mapped', [33292]],
        [[12167, 12167], 'mapped', [33307]],
        [[12168, 12168], 'mapped', [33311]],
        [[12169, 12169], 'mapped', [33390]],
        [[12170, 12170], 'mapped', [33394]],
        [[12171, 12171], 'mapped', [33400]],
        [[12172, 12172], 'mapped', [34381]],
        [[12173, 12173], 'mapped', [34411]],
        [[12174, 12174], 'mapped', [34880]],
        [[12175, 12175], 'mapped', [34892]],
        [[12176, 12176], 'mapped', [34915]],
        [[12177, 12177], 'mapped', [35198]],
        [[12178, 12178], 'mapped', [35211]],
        [[12179, 12179], 'mapped', [35282]],
        [[12180, 12180], 'mapped', [35328]],
        [[12181, 12181], 'mapped', [35895]],
        [[12182, 12182], 'mapped', [35910]],
        [[12183, 12183], 'mapped', [35925]],
        [[12184, 12184], 'mapped', [35960]],
        [[12185, 12185], 'mapped', [35997]],
        [[12186, 12186], 'mapped', [36196]],
        [[12187, 12187], 'mapped', [36208]],
        [[12188, 12188], 'mapped', [36275]],
        [[12189, 12189], 'mapped', [36523]],
        [[12190, 12190], 'mapped', [36554]],
        [[12191, 12191], 'mapped', [36763]],
        [[12192, 12192], 'mapped', [36784]],
        [[12193, 12193], 'mapped', [36789]],
        [[12194, 12194], 'mapped', [37009]],
        [[12195, 12195], 'mapped', [37193]],
        [[12196, 12196], 'mapped', [37318]],
        [[12197, 12197], 'mapped', [37324]],
        [[12198, 12198], 'mapped', [37329]],
        [[12199, 12199], 'mapped', [38263]],
        [[12200, 12200], 'mapped', [38272]],
        [[12201, 12201], 'mapped', [38428]],
        [[12202, 12202], 'mapped', [38582]],
        [[12203, 12203], 'mapped', [38585]],
        [[12204, 12204], 'mapped', [38632]],
        [[12205, 12205], 'mapped', [38737]],
        [[12206, 12206], 'mapped', [38750]],
        [[12207, 12207], 'mapped', [38754]],
        [[12208, 12208], 'mapped', [38761]],
        [[12209, 12209], 'mapped', [38859]],
        [[12210, 12210], 'mapped', [38893]],
        [[12211, 12211], 'mapped', [38899]],
        [[12212, 12212], 'mapped', [38913]],
        [[12213, 12213], 'mapped', [39080]],
        [[12214, 12214], 'mapped', [39131]],
        [[12215, 12215], 'mapped', [39135]],
        [[12216, 12216], 'mapped', [39318]],
        [[12217, 12217], 'mapped', [39321]],
        [[12218, 12218], 'mapped', [39340]],
        [[12219, 12219], 'mapped', [39592]],
        [[12220, 12220], 'mapped', [39640]],
        [[12221, 12221], 'mapped', [39647]],
        [[12222, 12222], 'mapped', [39717]],
        [[12223, 12223], 'mapped', [39727]],
        [[12224, 12224], 'mapped', [39730]],
        [[12225, 12225], 'mapped', [39740]],
        [[12226, 12226], 'mapped', [39770]],
        [[12227, 12227], 'mapped', [40165]],
        [[12228, 12228], 'mapped', [40565]],
        [[12229, 12229], 'mapped', [40575]],
        [[12230, 12230], 'mapped', [40613]],
        [[12231, 12231], 'mapped', [40635]],
        [[12232, 12232], 'mapped', [40643]],
        [[12233, 12233], 'mapped', [40653]],
        [[12234, 12234], 'mapped', [40657]],
        [[12235, 12235], 'mapped', [40697]],
        [[12236, 12236], 'mapped', [40701]],
        [[12237, 12237], 'mapped', [40718]],
        [[12238, 12238], 'mapped', [40723]],
        [[12239, 12239], 'mapped', [40736]],
        [[12240, 12240], 'mapped', [40763]],
        [[12241, 12241], 'mapped', [40778]],
        [[12242, 12242], 'mapped', [40786]],
        [[12243, 12243], 'mapped', [40845]],
        [[12244, 12244], 'mapped', [40860]],
        [[12245, 12245], 'mapped', [40864]],
        [[12246, 12271], 'disallowed'],
        [[12272, 12283], 'disallowed'],
        [[12284, 12287], 'disallowed'],
        [[12288, 12288], 'disallowed_STD3_mapped', [32]],
        [[12289, 12289], 'valid', [], 'NV8'],
        [[12290, 12290], 'mapped', [46]],
        [[12291, 12292], 'valid', [], 'NV8'],
        [[12293, 12295], 'valid'],
        [[12296, 12329], 'valid', [], 'NV8'],
        [[12330, 12333], 'valid'],
        [[12334, 12341], 'valid', [], 'NV8'],
        [[12342, 12342], 'mapped', [12306]],
        [[12343, 12343], 'valid', [], 'NV8'],
        [[12344, 12344], 'mapped', [21313]],
        [[12345, 12345], 'mapped', [21316]],
        [[12346, 12346], 'mapped', [21317]],
        [[12347, 12347], 'valid', [], 'NV8'],
        [[12348, 12348], 'valid'],
        [[12349, 12349], 'valid', [], 'NV8'],
        [[12350, 12350], 'valid', [], 'NV8'],
        [[12351, 12351], 'valid', [], 'NV8'],
        [[12352, 12352], 'disallowed'],
        [[12353, 12436], 'valid'],
        [[12437, 12438], 'valid'],
        [[12439, 12440], 'disallowed'],
        [[12441, 12442], 'valid'],
        [[12443, 12443], 'disallowed_STD3_mapped', [32, 12441]],
        [[12444, 12444], 'disallowed_STD3_mapped', [32, 12442]],
        [[12445, 12446], 'valid'],
        [[12447, 12447], 'mapped', [12424, 12426]],
        [[12448, 12448], 'valid', [], 'NV8'],
        [[12449, 12542], 'valid'],
        [[12543, 12543], 'mapped', [12467, 12488]],
        [[12544, 12548], 'disallowed'],
        [[12549, 12588], 'valid'],
        [[12589, 12589], 'valid'],
        [[12590, 12592], 'disallowed'],
        [[12593, 12593], 'mapped', [4352]],
        [[12594, 12594], 'mapped', [4353]],
        [[12595, 12595], 'mapped', [4522]],
        [[12596, 12596], 'mapped', [4354]],
        [[12597, 12597], 'mapped', [4524]],
        [[12598, 12598], 'mapped', [4525]],
        [[12599, 12599], 'mapped', [4355]],
        [[12600, 12600], 'mapped', [4356]],
        [[12601, 12601], 'mapped', [4357]],
        [[12602, 12602], 'mapped', [4528]],
        [[12603, 12603], 'mapped', [4529]],
        [[12604, 12604], 'mapped', [4530]],
        [[12605, 12605], 'mapped', [4531]],
        [[12606, 12606], 'mapped', [4532]],
        [[12607, 12607], 'mapped', [4533]],
        [[12608, 12608], 'mapped', [4378]],
        [[12609, 12609], 'mapped', [4358]],
        [[12610, 12610], 'mapped', [4359]],
        [[12611, 12611], 'mapped', [4360]],
        [[12612, 12612], 'mapped', [4385]],
        [[12613, 12613], 'mapped', [4361]],
        [[12614, 12614], 'mapped', [4362]],
        [[12615, 12615], 'mapped', [4363]],
        [[12616, 12616], 'mapped', [4364]],
        [[12617, 12617], 'mapped', [4365]],
        [[12618, 12618], 'mapped', [4366]],
        [[12619, 12619], 'mapped', [4367]],
        [[12620, 12620], 'mapped', [4368]],
        [[12621, 12621], 'mapped', [4369]],
        [[12622, 12622], 'mapped', [4370]],
        [[12623, 12623], 'mapped', [4449]],
        [[12624, 12624], 'mapped', [4450]],
        [[12625, 12625], 'mapped', [4451]],
        [[12626, 12626], 'mapped', [4452]],
        [[12627, 12627], 'mapped', [4453]],
        [[12628, 12628], 'mapped', [4454]],
        [[12629, 12629], 'mapped', [4455]],
        [[12630, 12630], 'mapped', [4456]],
        [[12631, 12631], 'mapped', [4457]],
        [[12632, 12632], 'mapped', [4458]],
        [[12633, 12633], 'mapped', [4459]],
        [[12634, 12634], 'mapped', [4460]],
        [[12635, 12635], 'mapped', [4461]],
        [[12636, 12636], 'mapped', [4462]],
        [[12637, 12637], 'mapped', [4463]],
        [[12638, 12638], 'mapped', [4464]],
        [[12639, 12639], 'mapped', [4465]],
        [[12640, 12640], 'mapped', [4466]],
        [[12641, 12641], 'mapped', [4467]],
        [[12642, 12642], 'mapped', [4468]],
        [[12643, 12643], 'mapped', [4469]],
        [[12644, 12644], 'disallowed'],
        [[12645, 12645], 'mapped', [4372]],
        [[12646, 12646], 'mapped', [4373]],
        [[12647, 12647], 'mapped', [4551]],
        [[12648, 12648], 'mapped', [4552]],
        [[12649, 12649], 'mapped', [4556]],
        [[12650, 12650], 'mapped', [4558]],
        [[12651, 12651], 'mapped', [4563]],
        [[12652, 12652], 'mapped', [4567]],
        [[12653, 12653], 'mapped', [4569]],
        [[12654, 12654], 'mapped', [4380]],
        [[12655, 12655], 'mapped', [4573]],
        [[12656, 12656], 'mapped', [4575]],
        [[12657, 12657], 'mapped', [4381]],
        [[12658, 12658], 'mapped', [4382]],
        [[12659, 12659], 'mapped', [4384]],
        [[12660, 12660], 'mapped', [4386]],
        [[12661, 12661], 'mapped', [4387]],
        [[12662, 12662], 'mapped', [4391]],
        [[12663, 12663], 'mapped', [4393]],
        [[12664, 12664], 'mapped', [4395]],
        [[12665, 12665], 'mapped', [4396]],
        [[12666, 12666], 'mapped', [4397]],
        [[12667, 12667], 'mapped', [4398]],
        [[12668, 12668], 'mapped', [4399]],
        [[12669, 12669], 'mapped', [4402]],
        [[12670, 12670], 'mapped', [4406]],
        [[12671, 12671], 'mapped', [4416]],
        [[12672, 12672], 'mapped', [4423]],
        [[12673, 12673], 'mapped', [4428]],
        [[12674, 12674], 'mapped', [4593]],
        [[12675, 12675], 'mapped', [4594]],
        [[12676, 12676], 'mapped', [4439]],
        [[12677, 12677], 'mapped', [4440]],
        [[12678, 12678], 'mapped', [4441]],
        [[12679, 12679], 'mapped', [4484]],
        [[12680, 12680], 'mapped', [4485]],
        [[12681, 12681], 'mapped', [4488]],
        [[12682, 12682], 'mapped', [4497]],
        [[12683, 12683], 'mapped', [4498]],
        [[12684, 12684], 'mapped', [4500]],
        [[12685, 12685], 'mapped', [4510]],
        [[12686, 12686], 'mapped', [4513]],
        [[12687, 12687], 'disallowed'],
        [[12688, 12689], 'valid', [], 'NV8'],
        [[12690, 12690], 'mapped', [19968]],
        [[12691, 12691], 'mapped', [20108]],
        [[12692, 12692], 'mapped', [19977]],
        [[12693, 12693], 'mapped', [22235]],
        [[12694, 12694], 'mapped', [19978]],
        [[12695, 12695], 'mapped', [20013]],
        [[12696, 12696], 'mapped', [19979]],
        [[12697, 12697], 'mapped', [30002]],
        [[12698, 12698], 'mapped', [20057]],
        [[12699, 12699], 'mapped', [19993]],
        [[12700, 12700], 'mapped', [19969]],
        [[12701, 12701], 'mapped', [22825]],
        [[12702, 12702], 'mapped', [22320]],
        [[12703, 12703], 'mapped', [20154]],
        [[12704, 12727], 'valid'],
        [[12728, 12730], 'valid'],
        [[12731, 12735], 'disallowed'],
        [[12736, 12751], 'valid', [], 'NV8'],
        [[12752, 12771], 'valid', [], 'NV8'],
        [[12772, 12783], 'disallowed'],
        [[12784, 12799], 'valid'],
        [[12800, 12800], 'disallowed_STD3_mapped', [40, 4352, 41]],
        [[12801, 12801], 'disallowed_STD3_mapped', [40, 4354, 41]],
        [[12802, 12802], 'disallowed_STD3_mapped', [40, 4355, 41]],
        [[12803, 12803], 'disallowed_STD3_mapped', [40, 4357, 41]],
        [[12804, 12804], 'disallowed_STD3_mapped', [40, 4358, 41]],
        [[12805, 12805], 'disallowed_STD3_mapped', [40, 4359, 41]],
        [[12806, 12806], 'disallowed_STD3_mapped', [40, 4361, 41]],
        [[12807, 12807], 'disallowed_STD3_mapped', [40, 4363, 41]],
        [[12808, 12808], 'disallowed_STD3_mapped', [40, 4364, 41]],
        [[12809, 12809], 'disallowed_STD3_mapped', [40, 4366, 41]],
        [[12810, 12810], 'disallowed_STD3_mapped', [40, 4367, 41]],
        [[12811, 12811], 'disallowed_STD3_mapped', [40, 4368, 41]],
        [[12812, 12812], 'disallowed_STD3_mapped', [40, 4369, 41]],
        [[12813, 12813], 'disallowed_STD3_mapped', [40, 4370, 41]],
        [[12814, 12814], 'disallowed_STD3_mapped', [40, 44032, 41]],
        [[12815, 12815], 'disallowed_STD3_mapped', [40, 45208, 41]],
        [[12816, 12816], 'disallowed_STD3_mapped', [40, 45796, 41]],
        [[12817, 12817], 'disallowed_STD3_mapped', [40, 46972, 41]],
        [[12818, 12818], 'disallowed_STD3_mapped', [40, 47560, 41]],
        [[12819, 12819], 'disallowed_STD3_mapped', [40, 48148, 41]],
        [[12820, 12820], 'disallowed_STD3_mapped', [40, 49324, 41]],
        [[12821, 12821], 'disallowed_STD3_mapped', [40, 50500, 41]],
        [[12822, 12822], 'disallowed_STD3_mapped', [40, 51088, 41]],
        [[12823, 12823], 'disallowed_STD3_mapped', [40, 52264, 41]],
        [[12824, 12824], 'disallowed_STD3_mapped', [40, 52852, 41]],
        [[12825, 12825], 'disallowed_STD3_mapped', [40, 53440, 41]],
        [[12826, 12826], 'disallowed_STD3_mapped', [40, 54028, 41]],
        [[12827, 12827], 'disallowed_STD3_mapped', [40, 54616, 41]],
        [[12828, 12828], 'disallowed_STD3_mapped', [40, 51452, 41]],
        [[12829, 12829], 'disallowed_STD3_mapped', [40, 50724, 51204, 41]],
        [[12830, 12830], 'disallowed_STD3_mapped', [40, 50724, 54980, 41]],
        [[12831, 12831], 'disallowed'],
        [[12832, 12832], 'disallowed_STD3_mapped', [40, 19968, 41]],
        [[12833, 12833], 'disallowed_STD3_mapped', [40, 20108, 41]],
        [[12834, 12834], 'disallowed_STD3_mapped', [40, 19977, 41]],
        [[12835, 12835], 'disallowed_STD3_mapped', [40, 22235, 41]],
        [[12836, 12836], 'disallowed_STD3_mapped', [40, 20116, 41]],
        [[12837, 12837], 'disallowed_STD3_mapped', [40, 20845, 41]],
        [[12838, 12838], 'disallowed_STD3_mapped', [40, 19971, 41]],
        [[12839, 12839], 'disallowed_STD3_mapped', [40, 20843, 41]],
        [[12840, 12840], 'disallowed_STD3_mapped', [40, 20061, 41]],
        [[12841, 12841], 'disallowed_STD3_mapped', [40, 21313, 41]],
        [[12842, 12842], 'disallowed_STD3_mapped', [40, 26376, 41]],
        [[12843, 12843], 'disallowed_STD3_mapped', [40, 28779, 41]],
        [[12844, 12844], 'disallowed_STD3_mapped', [40, 27700, 41]],
        [[12845, 12845], 'disallowed_STD3_mapped', [40, 26408, 41]],
        [[12846, 12846], 'disallowed_STD3_mapped', [40, 37329, 41]],
        [[12847, 12847], 'disallowed_STD3_mapped', [40, 22303, 41]],
        [[12848, 12848], 'disallowed_STD3_mapped', [40, 26085, 41]],
        [[12849, 12849], 'disallowed_STD3_mapped', [40, 26666, 41]],
        [[12850, 12850], 'disallowed_STD3_mapped', [40, 26377, 41]],
        [[12851, 12851], 'disallowed_STD3_mapped', [40, 31038, 41]],
        [[12852, 12852], 'disallowed_STD3_mapped', [40, 21517, 41]],
        [[12853, 12853], 'disallowed_STD3_mapped', [40, 29305, 41]],
        [[12854, 12854], 'disallowed_STD3_mapped', [40, 36001, 41]],
        [[12855, 12855], 'disallowed_STD3_mapped', [40, 31069, 41]],
        [[12856, 12856], 'disallowed_STD3_mapped', [40, 21172, 41]],
        [[12857, 12857], 'disallowed_STD3_mapped', [40, 20195, 41]],
        [[12858, 12858], 'disallowed_STD3_mapped', [40, 21628, 41]],
        [[12859, 12859], 'disallowed_STD3_mapped', [40, 23398, 41]],
        [[12860, 12860], 'disallowed_STD3_mapped', [40, 30435, 41]],
        [[12861, 12861], 'disallowed_STD3_mapped', [40, 20225, 41]],
        [[12862, 12862], 'disallowed_STD3_mapped', [40, 36039, 41]],
        [[12863, 12863], 'disallowed_STD3_mapped', [40, 21332, 41]],
        [[12864, 12864], 'disallowed_STD3_mapped', [40, 31085, 41]],
        [[12865, 12865], 'disallowed_STD3_mapped', [40, 20241, 41]],
        [[12866, 12866], 'disallowed_STD3_mapped', [40, 33258, 41]],
        [[12867, 12867], 'disallowed_STD3_mapped', [40, 33267, 41]],
        [[12868, 12868], 'mapped', [21839]],
        [[12869, 12869], 'mapped', [24188]],
        [[12870, 12870], 'mapped', [25991]],
        [[12871, 12871], 'mapped', [31631]],
        [[12872, 12879], 'valid', [], 'NV8'],
        [[12880, 12880], 'mapped', [112, 116, 101]],
        [[12881, 12881], 'mapped', [50, 49]],
        [[12882, 12882], 'mapped', [50, 50]],
        [[12883, 12883], 'mapped', [50, 51]],
        [[12884, 12884], 'mapped', [50, 52]],
        [[12885, 12885], 'mapped', [50, 53]],
        [[12886, 12886], 'mapped', [50, 54]],
        [[12887, 12887], 'mapped', [50, 55]],
        [[12888, 12888], 'mapped', [50, 56]],
        [[12889, 12889], 'mapped', [50, 57]],
        [[12890, 12890], 'mapped', [51, 48]],
        [[12891, 12891], 'mapped', [51, 49]],
        [[12892, 12892], 'mapped', [51, 50]],
        [[12893, 12893], 'mapped', [51, 51]],
        [[12894, 12894], 'mapped', [51, 52]],
        [[12895, 12895], 'mapped', [51, 53]],
        [[12896, 12896], 'mapped', [4352]],
        [[12897, 12897], 'mapped', [4354]],
        [[12898, 12898], 'mapped', [4355]],
        [[12899, 12899], 'mapped', [4357]],
        [[12900, 12900], 'mapped', [4358]],
        [[12901, 12901], 'mapped', [4359]],
        [[12902, 12902], 'mapped', [4361]],
        [[12903, 12903], 'mapped', [4363]],
        [[12904, 12904], 'mapped', [4364]],
        [[12905, 12905], 'mapped', [4366]],
        [[12906, 12906], 'mapped', [4367]],
        [[12907, 12907], 'mapped', [4368]],
        [[12908, 12908], 'mapped', [4369]],
        [[12909, 12909], 'mapped', [4370]],
        [[12910, 12910], 'mapped', [44032]],
        [[12911, 12911], 'mapped', [45208]],
        [[12912, 12912], 'mapped', [45796]],
        [[12913, 12913], 'mapped', [46972]],
        [[12914, 12914], 'mapped', [47560]],
        [[12915, 12915], 'mapped', [48148]],
        [[12916, 12916], 'mapped', [49324]],
        [[12917, 12917], 'mapped', [50500]],
        [[12918, 12918], 'mapped', [51088]],
        [[12919, 12919], 'mapped', [52264]],
        [[12920, 12920], 'mapped', [52852]],
        [[12921, 12921], 'mapped', [53440]],
        [[12922, 12922], 'mapped', [54028]],
        [[12923, 12923], 'mapped', [54616]],
        [[12924, 12924], 'mapped', [52280, 44256]],
        [[12925, 12925], 'mapped', [51452, 51032]],
        [[12926, 12926], 'mapped', [50864]],
        [[12927, 12927], 'valid', [], 'NV8'],
        [[12928, 12928], 'mapped', [19968]],
        [[12929, 12929], 'mapped', [20108]],
        [[12930, 12930], 'mapped', [19977]],
        [[12931, 12931], 'mapped', [22235]],
        [[12932, 12932], 'mapped', [20116]],
        [[12933, 12933], 'mapped', [20845]],
        [[12934, 12934], 'mapped', [19971]],
        [[12935, 12935], 'mapped', [20843]],
        [[12936, 12936], 'mapped', [20061]],
        [[12937, 12937], 'mapped', [21313]],
        [[12938, 12938], 'mapped', [26376]],
        [[12939, 12939], 'mapped', [28779]],
        [[12940, 12940], 'mapped', [27700]],
        [[12941, 12941], 'mapped', [26408]],
        [[12942, 12942], 'mapped', [37329]],
        [[12943, 12943], 'mapped', [22303]],
        [[12944, 12944], 'mapped', [26085]],
        [[12945, 12945], 'mapped', [26666]],
        [[12946, 12946], 'mapped', [26377]],
        [[12947, 12947], 'mapped', [31038]],
        [[12948, 12948], 'mapped', [21517]],
        [[12949, 12949], 'mapped', [29305]],
        [[12950, 12950], 'mapped', [36001]],
        [[12951, 12951], 'mapped', [31069]],
        [[12952, 12952], 'mapped', [21172]],
        [[12953, 12953], 'mapped', [31192]],
        [[12954, 12954], 'mapped', [30007]],
        [[12955, 12955], 'mapped', [22899]],
        [[12956, 12956], 'mapped', [36969]],
        [[12957, 12957], 'mapped', [20778]],
        [[12958, 12958], 'mapped', [21360]],
        [[12959, 12959], 'mapped', [27880]],
        [[12960, 12960], 'mapped', [38917]],
        [[12961, 12961], 'mapped', [20241]],
        [[12962, 12962], 'mapped', [20889]],
        [[12963, 12963], 'mapped', [27491]],
        [[12964, 12964], 'mapped', [19978]],
        [[12965, 12965], 'mapped', [20013]],
        [[12966, 12966], 'mapped', [19979]],
        [[12967, 12967], 'mapped', [24038]],
        [[12968, 12968], 'mapped', [21491]],
        [[12969, 12969], 'mapped', [21307]],
        [[12970, 12970], 'mapped', [23447]],
        [[12971, 12971], 'mapped', [23398]],
        [[12972, 12972], 'mapped', [30435]],
        [[12973, 12973], 'mapped', [20225]],
        [[12974, 12974], 'mapped', [36039]],
        [[12975, 12975], 'mapped', [21332]],
        [[12976, 12976], 'mapped', [22812]],
        [[12977, 12977], 'mapped', [51, 54]],
        [[12978, 12978], 'mapped', [51, 55]],
        [[12979, 12979], 'mapped', [51, 56]],
        [[12980, 12980], 'mapped', [51, 57]],
        [[12981, 12981], 'mapped', [52, 48]],
        [[12982, 12982], 'mapped', [52, 49]],
        [[12983, 12983], 'mapped', [52, 50]],
        [[12984, 12984], 'mapped', [52, 51]],
        [[12985, 12985], 'mapped', [52, 52]],
        [[12986, 12986], 'mapped', [52, 53]],
        [[12987, 12987], 'mapped', [52, 54]],
        [[12988, 12988], 'mapped', [52, 55]],
        [[12989, 12989], 'mapped', [52, 56]],
        [[12990, 12990], 'mapped', [52, 57]],
        [[12991, 12991], 'mapped', [53, 48]],
        [[12992, 12992], 'mapped', [49, 26376]],
        [[12993, 12993], 'mapped', [50, 26376]],
        [[12994, 12994], 'mapped', [51, 26376]],
        [[12995, 12995], 'mapped', [52, 26376]],
        [[12996, 12996], 'mapped', [53, 26376]],
        [[12997, 12997], 'mapped', [54, 26376]],
        [[12998, 12998], 'mapped', [55, 26376]],
        [[12999, 12999], 'mapped', [56, 26376]],
        [[13e3, 13e3], 'mapped', [57, 26376]],
        [[13001, 13001], 'mapped', [49, 48, 26376]],
        [[13002, 13002], 'mapped', [49, 49, 26376]],
        [[13003, 13003], 'mapped', [49, 50, 26376]],
        [[13004, 13004], 'mapped', [104, 103]],
        [[13005, 13005], 'mapped', [101, 114, 103]],
        [[13006, 13006], 'mapped', [101, 118]],
        [[13007, 13007], 'mapped', [108, 116, 100]],
        [[13008, 13008], 'mapped', [12450]],
        [[13009, 13009], 'mapped', [12452]],
        [[13010, 13010], 'mapped', [12454]],
        [[13011, 13011], 'mapped', [12456]],
        [[13012, 13012], 'mapped', [12458]],
        [[13013, 13013], 'mapped', [12459]],
        [[13014, 13014], 'mapped', [12461]],
        [[13015, 13015], 'mapped', [12463]],
        [[13016, 13016], 'mapped', [12465]],
        [[13017, 13017], 'mapped', [12467]],
        [[13018, 13018], 'mapped', [12469]],
        [[13019, 13019], 'mapped', [12471]],
        [[13020, 13020], 'mapped', [12473]],
        [[13021, 13021], 'mapped', [12475]],
        [[13022, 13022], 'mapped', [12477]],
        [[13023, 13023], 'mapped', [12479]],
        [[13024, 13024], 'mapped', [12481]],
        [[13025, 13025], 'mapped', [12484]],
        [[13026, 13026], 'mapped', [12486]],
        [[13027, 13027], 'mapped', [12488]],
        [[13028, 13028], 'mapped', [12490]],
        [[13029, 13029], 'mapped', [12491]],
        [[13030, 13030], 'mapped', [12492]],
        [[13031, 13031], 'mapped', [12493]],
        [[13032, 13032], 'mapped', [12494]],
        [[13033, 13033], 'mapped', [12495]],
        [[13034, 13034], 'mapped', [12498]],
        [[13035, 13035], 'mapped', [12501]],
        [[13036, 13036], 'mapped', [12504]],
        [[13037, 13037], 'mapped', [12507]],
        [[13038, 13038], 'mapped', [12510]],
        [[13039, 13039], 'mapped', [12511]],
        [[13040, 13040], 'mapped', [12512]],
        [[13041, 13041], 'mapped', [12513]],
        [[13042, 13042], 'mapped', [12514]],
        [[13043, 13043], 'mapped', [12516]],
        [[13044, 13044], 'mapped', [12518]],
        [[13045, 13045], 'mapped', [12520]],
        [[13046, 13046], 'mapped', [12521]],
        [[13047, 13047], 'mapped', [12522]],
        [[13048, 13048], 'mapped', [12523]],
        [[13049, 13049], 'mapped', [12524]],
        [[13050, 13050], 'mapped', [12525]],
        [[13051, 13051], 'mapped', [12527]],
        [[13052, 13052], 'mapped', [12528]],
        [[13053, 13053], 'mapped', [12529]],
        [[13054, 13054], 'mapped', [12530]],
        [[13055, 13055], 'disallowed'],
        [[13056, 13056], 'mapped', [12450, 12497, 12540, 12488]],
        [[13057, 13057], 'mapped', [12450, 12523, 12501, 12449]],
        [[13058, 13058], 'mapped', [12450, 12531, 12506, 12450]],
        [[13059, 13059], 'mapped', [12450, 12540, 12523]],
        [[13060, 13060], 'mapped', [12452, 12491, 12531, 12464]],
        [[13061, 13061], 'mapped', [12452, 12531, 12481]],
        [[13062, 13062], 'mapped', [12454, 12457, 12531]],
        [[13063, 13063], 'mapped', [12456, 12473, 12463, 12540, 12489]],
        [[13064, 13064], 'mapped', [12456, 12540, 12459, 12540]],
        [[13065, 13065], 'mapped', [12458, 12531, 12473]],
        [[13066, 13066], 'mapped', [12458, 12540, 12512]],
        [[13067, 13067], 'mapped', [12459, 12452, 12522]],
        [[13068, 13068], 'mapped', [12459, 12521, 12483, 12488]],
        [[13069, 13069], 'mapped', [12459, 12525, 12522, 12540]],
        [[13070, 13070], 'mapped', [12460, 12525, 12531]],
        [[13071, 13071], 'mapped', [12460, 12531, 12510]],
        [[13072, 13072], 'mapped', [12462, 12460]],
        [[13073, 13073], 'mapped', [12462, 12491, 12540]],
        [[13074, 13074], 'mapped', [12461, 12517, 12522, 12540]],
        [[13075, 13075], 'mapped', [12462, 12523, 12480, 12540]],
        [[13076, 13076], 'mapped', [12461, 12525]],
        [[13077, 13077], 'mapped', [12461, 12525, 12464, 12521, 12512]],
        [[13078, 13078], 'mapped', [12461, 12525, 12513, 12540, 12488, 12523]],
        [[13079, 13079], 'mapped', [12461, 12525, 12527, 12483, 12488]],
        [[13080, 13080], 'mapped', [12464, 12521, 12512]],
        [[13081, 13081], 'mapped', [12464, 12521, 12512, 12488, 12531]],
        [[13082, 13082], 'mapped', [12463, 12523, 12476, 12452, 12525]],
        [[13083, 13083], 'mapped', [12463, 12525, 12540, 12493]],
        [[13084, 13084], 'mapped', [12465, 12540, 12473]],
        [[13085, 13085], 'mapped', [12467, 12523, 12490]],
        [[13086, 13086], 'mapped', [12467, 12540, 12509]],
        [[13087, 13087], 'mapped', [12469, 12452, 12463, 12523]],
        [[13088, 13088], 'mapped', [12469, 12531, 12481, 12540, 12512]],
        [[13089, 13089], 'mapped', [12471, 12522, 12531, 12464]],
        [[13090, 13090], 'mapped', [12475, 12531, 12481]],
        [[13091, 13091], 'mapped', [12475, 12531, 12488]],
        [[13092, 13092], 'mapped', [12480, 12540, 12473]],
        [[13093, 13093], 'mapped', [12487, 12471]],
        [[13094, 13094], 'mapped', [12489, 12523]],
        [[13095, 13095], 'mapped', [12488, 12531]],
        [[13096, 13096], 'mapped', [12490, 12494]],
        [[13097, 13097], 'mapped', [12494, 12483, 12488]],
        [[13098, 13098], 'mapped', [12495, 12452, 12484]],
        [[13099, 13099], 'mapped', [12497, 12540, 12475, 12531, 12488]],
        [[13100, 13100], 'mapped', [12497, 12540, 12484]],
        [[13101, 13101], 'mapped', [12496, 12540, 12524, 12523]],
        [[13102, 13102], 'mapped', [12500, 12450, 12473, 12488, 12523]],
        [[13103, 13103], 'mapped', [12500, 12463, 12523]],
        [[13104, 13104], 'mapped', [12500, 12467]],
        [[13105, 13105], 'mapped', [12499, 12523]],
        [[13106, 13106], 'mapped', [12501, 12449, 12521, 12483, 12489]],
        [[13107, 13107], 'mapped', [12501, 12451, 12540, 12488]],
        [[13108, 13108], 'mapped', [12502, 12483, 12471, 12455, 12523]],
        [[13109, 13109], 'mapped', [12501, 12521, 12531]],
        [[13110, 13110], 'mapped', [12504, 12463, 12479, 12540, 12523]],
        [[13111, 13111], 'mapped', [12506, 12477]],
        [[13112, 13112], 'mapped', [12506, 12491, 12498]],
        [[13113, 13113], 'mapped', [12504, 12523, 12484]],
        [[13114, 13114], 'mapped', [12506, 12531, 12473]],
        [[13115, 13115], 'mapped', [12506, 12540, 12472]],
        [[13116, 13116], 'mapped', [12505, 12540, 12479]],
        [[13117, 13117], 'mapped', [12509, 12452, 12531, 12488]],
        [[13118, 13118], 'mapped', [12508, 12523, 12488]],
        [[13119, 13119], 'mapped', [12507, 12531]],
        [[13120, 13120], 'mapped', [12509, 12531, 12489]],
        [[13121, 13121], 'mapped', [12507, 12540, 12523]],
        [[13122, 13122], 'mapped', [12507, 12540, 12531]],
        [[13123, 13123], 'mapped', [12510, 12452, 12463, 12525]],
        [[13124, 13124], 'mapped', [12510, 12452, 12523]],
        [[13125, 13125], 'mapped', [12510, 12483, 12495]],
        [[13126, 13126], 'mapped', [12510, 12523, 12463]],
        [[13127, 13127], 'mapped', [12510, 12531, 12471, 12519, 12531]],
        [[13128, 13128], 'mapped', [12511, 12463, 12525, 12531]],
        [[13129, 13129], 'mapped', [12511, 12522]],
        [[13130, 13130], 'mapped', [12511, 12522, 12496, 12540, 12523]],
        [[13131, 13131], 'mapped', [12513, 12460]],
        [[13132, 13132], 'mapped', [12513, 12460, 12488, 12531]],
        [[13133, 13133], 'mapped', [12513, 12540, 12488, 12523]],
        [[13134, 13134], 'mapped', [12516, 12540, 12489]],
        [[13135, 13135], 'mapped', [12516, 12540, 12523]],
        [[13136, 13136], 'mapped', [12518, 12450, 12531]],
        [[13137, 13137], 'mapped', [12522, 12483, 12488, 12523]],
        [[13138, 13138], 'mapped', [12522, 12521]],
        [[13139, 13139], 'mapped', [12523, 12500, 12540]],
        [[13140, 13140], 'mapped', [12523, 12540, 12502, 12523]],
        [[13141, 13141], 'mapped', [12524, 12512]],
        [[13142, 13142], 'mapped', [12524, 12531, 12488, 12466, 12531]],
        [[13143, 13143], 'mapped', [12527, 12483, 12488]],
        [[13144, 13144], 'mapped', [48, 28857]],
        [[13145, 13145], 'mapped', [49, 28857]],
        [[13146, 13146], 'mapped', [50, 28857]],
        [[13147, 13147], 'mapped', [51, 28857]],
        [[13148, 13148], 'mapped', [52, 28857]],
        [[13149, 13149], 'mapped', [53, 28857]],
        [[13150, 13150], 'mapped', [54, 28857]],
        [[13151, 13151], 'mapped', [55, 28857]],
        [[13152, 13152], 'mapped', [56, 28857]],
        [[13153, 13153], 'mapped', [57, 28857]],
        [[13154, 13154], 'mapped', [49, 48, 28857]],
        [[13155, 13155], 'mapped', [49, 49, 28857]],
        [[13156, 13156], 'mapped', [49, 50, 28857]],
        [[13157, 13157], 'mapped', [49, 51, 28857]],
        [[13158, 13158], 'mapped', [49, 52, 28857]],
        [[13159, 13159], 'mapped', [49, 53, 28857]],
        [[13160, 13160], 'mapped', [49, 54, 28857]],
        [[13161, 13161], 'mapped', [49, 55, 28857]],
        [[13162, 13162], 'mapped', [49, 56, 28857]],
        [[13163, 13163], 'mapped', [49, 57, 28857]],
        [[13164, 13164], 'mapped', [50, 48, 28857]],
        [[13165, 13165], 'mapped', [50, 49, 28857]],
        [[13166, 13166], 'mapped', [50, 50, 28857]],
        [[13167, 13167], 'mapped', [50, 51, 28857]],
        [[13168, 13168], 'mapped', [50, 52, 28857]],
        [[13169, 13169], 'mapped', [104, 112, 97]],
        [[13170, 13170], 'mapped', [100, 97]],
        [[13171, 13171], 'mapped', [97, 117]],
        [[13172, 13172], 'mapped', [98, 97, 114]],
        [[13173, 13173], 'mapped', [111, 118]],
        [[13174, 13174], 'mapped', [112, 99]],
        [[13175, 13175], 'mapped', [100, 109]],
        [[13176, 13176], 'mapped', [100, 109, 50]],
        [[13177, 13177], 'mapped', [100, 109, 51]],
        [[13178, 13178], 'mapped', [105, 117]],
        [[13179, 13179], 'mapped', [24179, 25104]],
        [[13180, 13180], 'mapped', [26157, 21644]],
        [[13181, 13181], 'mapped', [22823, 27491]],
        [[13182, 13182], 'mapped', [26126, 27835]],
        [[13183, 13183], 'mapped', [26666, 24335, 20250, 31038]],
        [[13184, 13184], 'mapped', [112, 97]],
        [[13185, 13185], 'mapped', [110, 97]],
        [[13186, 13186], 'mapped', [956, 97]],
        [[13187, 13187], 'mapped', [109, 97]],
        [[13188, 13188], 'mapped', [107, 97]],
        [[13189, 13189], 'mapped', [107, 98]],
        [[13190, 13190], 'mapped', [109, 98]],
        [[13191, 13191], 'mapped', [103, 98]],
        [[13192, 13192], 'mapped', [99, 97, 108]],
        [[13193, 13193], 'mapped', [107, 99, 97, 108]],
        [[13194, 13194], 'mapped', [112, 102]],
        [[13195, 13195], 'mapped', [110, 102]],
        [[13196, 13196], 'mapped', [956, 102]],
        [[13197, 13197], 'mapped', [956, 103]],
        [[13198, 13198], 'mapped', [109, 103]],
        [[13199, 13199], 'mapped', [107, 103]],
        [[13200, 13200], 'mapped', [104, 122]],
        [[13201, 13201], 'mapped', [107, 104, 122]],
        [[13202, 13202], 'mapped', [109, 104, 122]],
        [[13203, 13203], 'mapped', [103, 104, 122]],
        [[13204, 13204], 'mapped', [116, 104, 122]],
        [[13205, 13205], 'mapped', [956, 108]],
        [[13206, 13206], 'mapped', [109, 108]],
        [[13207, 13207], 'mapped', [100, 108]],
        [[13208, 13208], 'mapped', [107, 108]],
        [[13209, 13209], 'mapped', [102, 109]],
        [[13210, 13210], 'mapped', [110, 109]],
        [[13211, 13211], 'mapped', [956, 109]],
        [[13212, 13212], 'mapped', [109, 109]],
        [[13213, 13213], 'mapped', [99, 109]],
        [[13214, 13214], 'mapped', [107, 109]],
        [[13215, 13215], 'mapped', [109, 109, 50]],
        [[13216, 13216], 'mapped', [99, 109, 50]],
        [[13217, 13217], 'mapped', [109, 50]],
        [[13218, 13218], 'mapped', [107, 109, 50]],
        [[13219, 13219], 'mapped', [109, 109, 51]],
        [[13220, 13220], 'mapped', [99, 109, 51]],
        [[13221, 13221], 'mapped', [109, 51]],
        [[13222, 13222], 'mapped', [107, 109, 51]],
        [[13223, 13223], 'mapped', [109, 8725, 115]],
        [[13224, 13224], 'mapped', [109, 8725, 115, 50]],
        [[13225, 13225], 'mapped', [112, 97]],
        [[13226, 13226], 'mapped', [107, 112, 97]],
        [[13227, 13227], 'mapped', [109, 112, 97]],
        [[13228, 13228], 'mapped', [103, 112, 97]],
        [[13229, 13229], 'mapped', [114, 97, 100]],
        [[13230, 13230], 'mapped', [114, 97, 100, 8725, 115]],
        [[13231, 13231], 'mapped', [114, 97, 100, 8725, 115, 50]],
        [[13232, 13232], 'mapped', [112, 115]],
        [[13233, 13233], 'mapped', [110, 115]],
        [[13234, 13234], 'mapped', [956, 115]],
        [[13235, 13235], 'mapped', [109, 115]],
        [[13236, 13236], 'mapped', [112, 118]],
        [[13237, 13237], 'mapped', [110, 118]],
        [[13238, 13238], 'mapped', [956, 118]],
        [[13239, 13239], 'mapped', [109, 118]],
        [[13240, 13240], 'mapped', [107, 118]],
        [[13241, 13241], 'mapped', [109, 118]],
        [[13242, 13242], 'mapped', [112, 119]],
        [[13243, 13243], 'mapped', [110, 119]],
        [[13244, 13244], 'mapped', [956, 119]],
        [[13245, 13245], 'mapped', [109, 119]],
        [[13246, 13246], 'mapped', [107, 119]],
        [[13247, 13247], 'mapped', [109, 119]],
        [[13248, 13248], 'mapped', [107, 969]],
        [[13249, 13249], 'mapped', [109, 969]],
        [[13250, 13250], 'disallowed'],
        [[13251, 13251], 'mapped', [98, 113]],
        [[13252, 13252], 'mapped', [99, 99]],
        [[13253, 13253], 'mapped', [99, 100]],
        [[13254, 13254], 'mapped', [99, 8725, 107, 103]],
        [[13255, 13255], 'disallowed'],
        [[13256, 13256], 'mapped', [100, 98]],
        [[13257, 13257], 'mapped', [103, 121]],
        [[13258, 13258], 'mapped', [104, 97]],
        [[13259, 13259], 'mapped', [104, 112]],
        [[13260, 13260], 'mapped', [105, 110]],
        [[13261, 13261], 'mapped', [107, 107]],
        [[13262, 13262], 'mapped', [107, 109]],
        [[13263, 13263], 'mapped', [107, 116]],
        [[13264, 13264], 'mapped', [108, 109]],
        [[13265, 13265], 'mapped', [108, 110]],
        [[13266, 13266], 'mapped', [108, 111, 103]],
        [[13267, 13267], 'mapped', [108, 120]],
        [[13268, 13268], 'mapped', [109, 98]],
        [[13269, 13269], 'mapped', [109, 105, 108]],
        [[13270, 13270], 'mapped', [109, 111, 108]],
        [[13271, 13271], 'mapped', [112, 104]],
        [[13272, 13272], 'disallowed'],
        [[13273, 13273], 'mapped', [112, 112, 109]],
        [[13274, 13274], 'mapped', [112, 114]],
        [[13275, 13275], 'mapped', [115, 114]],
        [[13276, 13276], 'mapped', [115, 118]],
        [[13277, 13277], 'mapped', [119, 98]],
        [[13278, 13278], 'mapped', [118, 8725, 109]],
        [[13279, 13279], 'mapped', [97, 8725, 109]],
        [[13280, 13280], 'mapped', [49, 26085]],
        [[13281, 13281], 'mapped', [50, 26085]],
        [[13282, 13282], 'mapped', [51, 26085]],
        [[13283, 13283], 'mapped', [52, 26085]],
        [[13284, 13284], 'mapped', [53, 26085]],
        [[13285, 13285], 'mapped', [54, 26085]],
        [[13286, 13286], 'mapped', [55, 26085]],
        [[13287, 13287], 'mapped', [56, 26085]],
        [[13288, 13288], 'mapped', [57, 26085]],
        [[13289, 13289], 'mapped', [49, 48, 26085]],
        [[13290, 13290], 'mapped', [49, 49, 26085]],
        [[13291, 13291], 'mapped', [49, 50, 26085]],
        [[13292, 13292], 'mapped', [49, 51, 26085]],
        [[13293, 13293], 'mapped', [49, 52, 26085]],
        [[13294, 13294], 'mapped', [49, 53, 26085]],
        [[13295, 13295], 'mapped', [49, 54, 26085]],
        [[13296, 13296], 'mapped', [49, 55, 26085]],
        [[13297, 13297], 'mapped', [49, 56, 26085]],
        [[13298, 13298], 'mapped', [49, 57, 26085]],
        [[13299, 13299], 'mapped', [50, 48, 26085]],
        [[13300, 13300], 'mapped', [50, 49, 26085]],
        [[13301, 13301], 'mapped', [50, 50, 26085]],
        [[13302, 13302], 'mapped', [50, 51, 26085]],
        [[13303, 13303], 'mapped', [50, 52, 26085]],
        [[13304, 13304], 'mapped', [50, 53, 26085]],
        [[13305, 13305], 'mapped', [50, 54, 26085]],
        [[13306, 13306], 'mapped', [50, 55, 26085]],
        [[13307, 13307], 'mapped', [50, 56, 26085]],
        [[13308, 13308], 'mapped', [50, 57, 26085]],
        [[13309, 13309], 'mapped', [51, 48, 26085]],
        [[13310, 13310], 'mapped', [51, 49, 26085]],
        [[13311, 13311], 'mapped', [103, 97, 108]],
        [[13312, 19893], 'valid'],
        [[19894, 19903], 'disallowed'],
        [[19904, 19967], 'valid', [], 'NV8'],
        [[19968, 40869], 'valid'],
        [[40870, 40891], 'valid'],
        [[40892, 40899], 'valid'],
        [[40900, 40907], 'valid'],
        [[40908, 40908], 'valid'],
        [[40909, 40917], 'valid'],
        [[40918, 40959], 'disallowed'],
        [[40960, 42124], 'valid'],
        [[42125, 42127], 'disallowed'],
        [[42128, 42145], 'valid', [], 'NV8'],
        [[42146, 42147], 'valid', [], 'NV8'],
        [[42148, 42163], 'valid', [], 'NV8'],
        [[42164, 42164], 'valid', [], 'NV8'],
        [[42165, 42176], 'valid', [], 'NV8'],
        [[42177, 42177], 'valid', [], 'NV8'],
        [[42178, 42180], 'valid', [], 'NV8'],
        [[42181, 42181], 'valid', [], 'NV8'],
        [[42182, 42182], 'valid', [], 'NV8'],
        [[42183, 42191], 'disallowed'],
        [[42192, 42237], 'valid'],
        [[42238, 42239], 'valid', [], 'NV8'],
        [[42240, 42508], 'valid'],
        [[42509, 42511], 'valid', [], 'NV8'],
        [[42512, 42539], 'valid'],
        [[42540, 42559], 'disallowed'],
        [[42560, 42560], 'mapped', [42561]],
        [[42561, 42561], 'valid'],
        [[42562, 42562], 'mapped', [42563]],
        [[42563, 42563], 'valid'],
        [[42564, 42564], 'mapped', [42565]],
        [[42565, 42565], 'valid'],
        [[42566, 42566], 'mapped', [42567]],
        [[42567, 42567], 'valid'],
        [[42568, 42568], 'mapped', [42569]],
        [[42569, 42569], 'valid'],
        [[42570, 42570], 'mapped', [42571]],
        [[42571, 42571], 'valid'],
        [[42572, 42572], 'mapped', [42573]],
        [[42573, 42573], 'valid'],
        [[42574, 42574], 'mapped', [42575]],
        [[42575, 42575], 'valid'],
        [[42576, 42576], 'mapped', [42577]],
        [[42577, 42577], 'valid'],
        [[42578, 42578], 'mapped', [42579]],
        [[42579, 42579], 'valid'],
        [[42580, 42580], 'mapped', [42581]],
        [[42581, 42581], 'valid'],
        [[42582, 42582], 'mapped', [42583]],
        [[42583, 42583], 'valid'],
        [[42584, 42584], 'mapped', [42585]],
        [[42585, 42585], 'valid'],
        [[42586, 42586], 'mapped', [42587]],
        [[42587, 42587], 'valid'],
        [[42588, 42588], 'mapped', [42589]],
        [[42589, 42589], 'valid'],
        [[42590, 42590], 'mapped', [42591]],
        [[42591, 42591], 'valid'],
        [[42592, 42592], 'mapped', [42593]],
        [[42593, 42593], 'valid'],
        [[42594, 42594], 'mapped', [42595]],
        [[42595, 42595], 'valid'],
        [[42596, 42596], 'mapped', [42597]],
        [[42597, 42597], 'valid'],
        [[42598, 42598], 'mapped', [42599]],
        [[42599, 42599], 'valid'],
        [[42600, 42600], 'mapped', [42601]],
        [[42601, 42601], 'valid'],
        [[42602, 42602], 'mapped', [42603]],
        [[42603, 42603], 'valid'],
        [[42604, 42604], 'mapped', [42605]],
        [[42605, 42607], 'valid'],
        [[42608, 42611], 'valid', [], 'NV8'],
        [[42612, 42619], 'valid'],
        [[42620, 42621], 'valid'],
        [[42622, 42622], 'valid', [], 'NV8'],
        [[42623, 42623], 'valid'],
        [[42624, 42624], 'mapped', [42625]],
        [[42625, 42625], 'valid'],
        [[42626, 42626], 'mapped', [42627]],
        [[42627, 42627], 'valid'],
        [[42628, 42628], 'mapped', [42629]],
        [[42629, 42629], 'valid'],
        [[42630, 42630], 'mapped', [42631]],
        [[42631, 42631], 'valid'],
        [[42632, 42632], 'mapped', [42633]],
        [[42633, 42633], 'valid'],
        [[42634, 42634], 'mapped', [42635]],
        [[42635, 42635], 'valid'],
        [[42636, 42636], 'mapped', [42637]],
        [[42637, 42637], 'valid'],
        [[42638, 42638], 'mapped', [42639]],
        [[42639, 42639], 'valid'],
        [[42640, 42640], 'mapped', [42641]],
        [[42641, 42641], 'valid'],
        [[42642, 42642], 'mapped', [42643]],
        [[42643, 42643], 'valid'],
        [[42644, 42644], 'mapped', [42645]],
        [[42645, 42645], 'valid'],
        [[42646, 42646], 'mapped', [42647]],
        [[42647, 42647], 'valid'],
        [[42648, 42648], 'mapped', [42649]],
        [[42649, 42649], 'valid'],
        [[42650, 42650], 'mapped', [42651]],
        [[42651, 42651], 'valid'],
        [[42652, 42652], 'mapped', [1098]],
        [[42653, 42653], 'mapped', [1100]],
        [[42654, 42654], 'valid'],
        [[42655, 42655], 'valid'],
        [[42656, 42725], 'valid'],
        [[42726, 42735], 'valid', [], 'NV8'],
        [[42736, 42737], 'valid'],
        [[42738, 42743], 'valid', [], 'NV8'],
        [[42744, 42751], 'disallowed'],
        [[42752, 42774], 'valid', [], 'NV8'],
        [[42775, 42778], 'valid'],
        [[42779, 42783], 'valid'],
        [[42784, 42785], 'valid', [], 'NV8'],
        [[42786, 42786], 'mapped', [42787]],
        [[42787, 42787], 'valid'],
        [[42788, 42788], 'mapped', [42789]],
        [[42789, 42789], 'valid'],
        [[42790, 42790], 'mapped', [42791]],
        [[42791, 42791], 'valid'],
        [[42792, 42792], 'mapped', [42793]],
        [[42793, 42793], 'valid'],
        [[42794, 42794], 'mapped', [42795]],
        [[42795, 42795], 'valid'],
        [[42796, 42796], 'mapped', [42797]],
        [[42797, 42797], 'valid'],
        [[42798, 42798], 'mapped', [42799]],
        [[42799, 42801], 'valid'],
        [[42802, 42802], 'mapped', [42803]],
        [[42803, 42803], 'valid'],
        [[42804, 42804], 'mapped', [42805]],
        [[42805, 42805], 'valid'],
        [[42806, 42806], 'mapped', [42807]],
        [[42807, 42807], 'valid'],
        [[42808, 42808], 'mapped', [42809]],
        [[42809, 42809], 'valid'],
        [[42810, 42810], 'mapped', [42811]],
        [[42811, 42811], 'valid'],
        [[42812, 42812], 'mapped', [42813]],
        [[42813, 42813], 'valid'],
        [[42814, 42814], 'mapped', [42815]],
        [[42815, 42815], 'valid'],
        [[42816, 42816], 'mapped', [42817]],
        [[42817, 42817], 'valid'],
        [[42818, 42818], 'mapped', [42819]],
        [[42819, 42819], 'valid'],
        [[42820, 42820], 'mapped', [42821]],
        [[42821, 42821], 'valid'],
        [[42822, 42822], 'mapped', [42823]],
        [[42823, 42823], 'valid'],
        [[42824, 42824], 'mapped', [42825]],
        [[42825, 42825], 'valid'],
        [[42826, 42826], 'mapped', [42827]],
        [[42827, 42827], 'valid'],
        [[42828, 42828], 'mapped', [42829]],
        [[42829, 42829], 'valid'],
        [[42830, 42830], 'mapped', [42831]],
        [[42831, 42831], 'valid'],
        [[42832, 42832], 'mapped', [42833]],
        [[42833, 42833], 'valid'],
        [[42834, 42834], 'mapped', [42835]],
        [[42835, 42835], 'valid'],
        [[42836, 42836], 'mapped', [42837]],
        [[42837, 42837], 'valid'],
        [[42838, 42838], 'mapped', [42839]],
        [[42839, 42839], 'valid'],
        [[42840, 42840], 'mapped', [42841]],
        [[42841, 42841], 'valid'],
        [[42842, 42842], 'mapped', [42843]],
        [[42843, 42843], 'valid'],
        [[42844, 42844], 'mapped', [42845]],
        [[42845, 42845], 'valid'],
        [[42846, 42846], 'mapped', [42847]],
        [[42847, 42847], 'valid'],
        [[42848, 42848], 'mapped', [42849]],
        [[42849, 42849], 'valid'],
        [[42850, 42850], 'mapped', [42851]],
        [[42851, 42851], 'valid'],
        [[42852, 42852], 'mapped', [42853]],
        [[42853, 42853], 'valid'],
        [[42854, 42854], 'mapped', [42855]],
        [[42855, 42855], 'valid'],
        [[42856, 42856], 'mapped', [42857]],
        [[42857, 42857], 'valid'],
        [[42858, 42858], 'mapped', [42859]],
        [[42859, 42859], 'valid'],
        [[42860, 42860], 'mapped', [42861]],
        [[42861, 42861], 'valid'],
        [[42862, 42862], 'mapped', [42863]],
        [[42863, 42863], 'valid'],
        [[42864, 42864], 'mapped', [42863]],
        [[42865, 42872], 'valid'],
        [[42873, 42873], 'mapped', [42874]],
        [[42874, 42874], 'valid'],
        [[42875, 42875], 'mapped', [42876]],
        [[42876, 42876], 'valid'],
        [[42877, 42877], 'mapped', [7545]],
        [[42878, 42878], 'mapped', [42879]],
        [[42879, 42879], 'valid'],
        [[42880, 42880], 'mapped', [42881]],
        [[42881, 42881], 'valid'],
        [[42882, 42882], 'mapped', [42883]],
        [[42883, 42883], 'valid'],
        [[42884, 42884], 'mapped', [42885]],
        [[42885, 42885], 'valid'],
        [[42886, 42886], 'mapped', [42887]],
        [[42887, 42888], 'valid'],
        [[42889, 42890], 'valid', [], 'NV8'],
        [[42891, 42891], 'mapped', [42892]],
        [[42892, 42892], 'valid'],
        [[42893, 42893], 'mapped', [613]],
        [[42894, 42894], 'valid'],
        [[42895, 42895], 'valid'],
        [[42896, 42896], 'mapped', [42897]],
        [[42897, 42897], 'valid'],
        [[42898, 42898], 'mapped', [42899]],
        [[42899, 42899], 'valid'],
        [[42900, 42901], 'valid'],
        [[42902, 42902], 'mapped', [42903]],
        [[42903, 42903], 'valid'],
        [[42904, 42904], 'mapped', [42905]],
        [[42905, 42905], 'valid'],
        [[42906, 42906], 'mapped', [42907]],
        [[42907, 42907], 'valid'],
        [[42908, 42908], 'mapped', [42909]],
        [[42909, 42909], 'valid'],
        [[42910, 42910], 'mapped', [42911]],
        [[42911, 42911], 'valid'],
        [[42912, 42912], 'mapped', [42913]],
        [[42913, 42913], 'valid'],
        [[42914, 42914], 'mapped', [42915]],
        [[42915, 42915], 'valid'],
        [[42916, 42916], 'mapped', [42917]],
        [[42917, 42917], 'valid'],
        [[42918, 42918], 'mapped', [42919]],
        [[42919, 42919], 'valid'],
        [[42920, 42920], 'mapped', [42921]],
        [[42921, 42921], 'valid'],
        [[42922, 42922], 'mapped', [614]],
        [[42923, 42923], 'mapped', [604]],
        [[42924, 42924], 'mapped', [609]],
        [[42925, 42925], 'mapped', [620]],
        [[42926, 42927], 'disallowed'],
        [[42928, 42928], 'mapped', [670]],
        [[42929, 42929], 'mapped', [647]],
        [[42930, 42930], 'mapped', [669]],
        [[42931, 42931], 'mapped', [43859]],
        [[42932, 42932], 'mapped', [42933]],
        [[42933, 42933], 'valid'],
        [[42934, 42934], 'mapped', [42935]],
        [[42935, 42935], 'valid'],
        [[42936, 42998], 'disallowed'],
        [[42999, 42999], 'valid'],
        [[43e3, 43e3], 'mapped', [295]],
        [[43001, 43001], 'mapped', [339]],
        [[43002, 43002], 'valid'],
        [[43003, 43007], 'valid'],
        [[43008, 43047], 'valid'],
        [[43048, 43051], 'valid', [], 'NV8'],
        [[43052, 43055], 'disallowed'],
        [[43056, 43065], 'valid', [], 'NV8'],
        [[43066, 43071], 'disallowed'],
        [[43072, 43123], 'valid'],
        [[43124, 43127], 'valid', [], 'NV8'],
        [[43128, 43135], 'disallowed'],
        [[43136, 43204], 'valid'],
        [[43205, 43213], 'disallowed'],
        [[43214, 43215], 'valid', [], 'NV8'],
        [[43216, 43225], 'valid'],
        [[43226, 43231], 'disallowed'],
        [[43232, 43255], 'valid'],
        [[43256, 43258], 'valid', [], 'NV8'],
        [[43259, 43259], 'valid'],
        [[43260, 43260], 'valid', [], 'NV8'],
        [[43261, 43261], 'valid'],
        [[43262, 43263], 'disallowed'],
        [[43264, 43309], 'valid'],
        [[43310, 43311], 'valid', [], 'NV8'],
        [[43312, 43347], 'valid'],
        [[43348, 43358], 'disallowed'],
        [[43359, 43359], 'valid', [], 'NV8'],
        [[43360, 43388], 'valid', [], 'NV8'],
        [[43389, 43391], 'disallowed'],
        [[43392, 43456], 'valid'],
        [[43457, 43469], 'valid', [], 'NV8'],
        [[43470, 43470], 'disallowed'],
        [[43471, 43481], 'valid'],
        [[43482, 43485], 'disallowed'],
        [[43486, 43487], 'valid', [], 'NV8'],
        [[43488, 43518], 'valid'],
        [[43519, 43519], 'disallowed'],
        [[43520, 43574], 'valid'],
        [[43575, 43583], 'disallowed'],
        [[43584, 43597], 'valid'],
        [[43598, 43599], 'disallowed'],
        [[43600, 43609], 'valid'],
        [[43610, 43611], 'disallowed'],
        [[43612, 43615], 'valid', [], 'NV8'],
        [[43616, 43638], 'valid'],
        [[43639, 43641], 'valid', [], 'NV8'],
        [[43642, 43643], 'valid'],
        [[43644, 43647], 'valid'],
        [[43648, 43714], 'valid'],
        [[43715, 43738], 'disallowed'],
        [[43739, 43741], 'valid'],
        [[43742, 43743], 'valid', [], 'NV8'],
        [[43744, 43759], 'valid'],
        [[43760, 43761], 'valid', [], 'NV8'],
        [[43762, 43766], 'valid'],
        [[43767, 43776], 'disallowed'],
        [[43777, 43782], 'valid'],
        [[43783, 43784], 'disallowed'],
        [[43785, 43790], 'valid'],
        [[43791, 43792], 'disallowed'],
        [[43793, 43798], 'valid'],
        [[43799, 43807], 'disallowed'],
        [[43808, 43814], 'valid'],
        [[43815, 43815], 'disallowed'],
        [[43816, 43822], 'valid'],
        [[43823, 43823], 'disallowed'],
        [[43824, 43866], 'valid'],
        [[43867, 43867], 'valid', [], 'NV8'],
        [[43868, 43868], 'mapped', [42791]],
        [[43869, 43869], 'mapped', [43831]],
        [[43870, 43870], 'mapped', [619]],
        [[43871, 43871], 'mapped', [43858]],
        [[43872, 43875], 'valid'],
        [[43876, 43877], 'valid'],
        [[43878, 43887], 'disallowed'],
        [[43888, 43888], 'mapped', [5024]],
        [[43889, 43889], 'mapped', [5025]],
        [[43890, 43890], 'mapped', [5026]],
        [[43891, 43891], 'mapped', [5027]],
        [[43892, 43892], 'mapped', [5028]],
        [[43893, 43893], 'mapped', [5029]],
        [[43894, 43894], 'mapped', [5030]],
        [[43895, 43895], 'mapped', [5031]],
        [[43896, 43896], 'mapped', [5032]],
        [[43897, 43897], 'mapped', [5033]],
        [[43898, 43898], 'mapped', [5034]],
        [[43899, 43899], 'mapped', [5035]],
        [[43900, 43900], 'mapped', [5036]],
        [[43901, 43901], 'mapped', [5037]],
        [[43902, 43902], 'mapped', [5038]],
        [[43903, 43903], 'mapped', [5039]],
        [[43904, 43904], 'mapped', [5040]],
        [[43905, 43905], 'mapped', [5041]],
        [[43906, 43906], 'mapped', [5042]],
        [[43907, 43907], 'mapped', [5043]],
        [[43908, 43908], 'mapped', [5044]],
        [[43909, 43909], 'mapped', [5045]],
        [[43910, 43910], 'mapped', [5046]],
        [[43911, 43911], 'mapped', [5047]],
        [[43912, 43912], 'mapped', [5048]],
        [[43913, 43913], 'mapped', [5049]],
        [[43914, 43914], 'mapped', [5050]],
        [[43915, 43915], 'mapped', [5051]],
        [[43916, 43916], 'mapped', [5052]],
        [[43917, 43917], 'mapped', [5053]],
        [[43918, 43918], 'mapped', [5054]],
        [[43919, 43919], 'mapped', [5055]],
        [[43920, 43920], 'mapped', [5056]],
        [[43921, 43921], 'mapped', [5057]],
        [[43922, 43922], 'mapped', [5058]],
        [[43923, 43923], 'mapped', [5059]],
        [[43924, 43924], 'mapped', [5060]],
        [[43925, 43925], 'mapped', [5061]],
        [[43926, 43926], 'mapped', [5062]],
        [[43927, 43927], 'mapped', [5063]],
        [[43928, 43928], 'mapped', [5064]],
        [[43929, 43929], 'mapped', [5065]],
        [[43930, 43930], 'mapped', [5066]],
        [[43931, 43931], 'mapped', [5067]],
        [[43932, 43932], 'mapped', [5068]],
        [[43933, 43933], 'mapped', [5069]],
        [[43934, 43934], 'mapped', [5070]],
        [[43935, 43935], 'mapped', [5071]],
        [[43936, 43936], 'mapped', [5072]],
        [[43937, 43937], 'mapped', [5073]],
        [[43938, 43938], 'mapped', [5074]],
        [[43939, 43939], 'mapped', [5075]],
        [[43940, 43940], 'mapped', [5076]],
        [[43941, 43941], 'mapped', [5077]],
        [[43942, 43942], 'mapped', [5078]],
        [[43943, 43943], 'mapped', [5079]],
        [[43944, 43944], 'mapped', [5080]],
        [[43945, 43945], 'mapped', [5081]],
        [[43946, 43946], 'mapped', [5082]],
        [[43947, 43947], 'mapped', [5083]],
        [[43948, 43948], 'mapped', [5084]],
        [[43949, 43949], 'mapped', [5085]],
        [[43950, 43950], 'mapped', [5086]],
        [[43951, 43951], 'mapped', [5087]],
        [[43952, 43952], 'mapped', [5088]],
        [[43953, 43953], 'mapped', [5089]],
        [[43954, 43954], 'mapped', [5090]],
        [[43955, 43955], 'mapped', [5091]],
        [[43956, 43956], 'mapped', [5092]],
        [[43957, 43957], 'mapped', [5093]],
        [[43958, 43958], 'mapped', [5094]],
        [[43959, 43959], 'mapped', [5095]],
        [[43960, 43960], 'mapped', [5096]],
        [[43961, 43961], 'mapped', [5097]],
        [[43962, 43962], 'mapped', [5098]],
        [[43963, 43963], 'mapped', [5099]],
        [[43964, 43964], 'mapped', [5100]],
        [[43965, 43965], 'mapped', [5101]],
        [[43966, 43966], 'mapped', [5102]],
        [[43967, 43967], 'mapped', [5103]],
        [[43968, 44010], 'valid'],
        [[44011, 44011], 'valid', [], 'NV8'],
        [[44012, 44013], 'valid'],
        [[44014, 44015], 'disallowed'],
        [[44016, 44025], 'valid'],
        [[44026, 44031], 'disallowed'],
        [[44032, 55203], 'valid'],
        [[55204, 55215], 'disallowed'],
        [[55216, 55238], 'valid', [], 'NV8'],
        [[55239, 55242], 'disallowed'],
        [[55243, 55291], 'valid', [], 'NV8'],
        [[55292, 55295], 'disallowed'],
        [[55296, 57343], 'disallowed'],
        [[57344, 63743], 'disallowed'],
        [[63744, 63744], 'mapped', [35912]],
        [[63745, 63745], 'mapped', [26356]],
        [[63746, 63746], 'mapped', [36554]],
        [[63747, 63747], 'mapped', [36040]],
        [[63748, 63748], 'mapped', [28369]],
        [[63749, 63749], 'mapped', [20018]],
        [[63750, 63750], 'mapped', [21477]],
        [[63751, 63752], 'mapped', [40860]],
        [[63753, 63753], 'mapped', [22865]],
        [[63754, 63754], 'mapped', [37329]],
        [[63755, 63755], 'mapped', [21895]],
        [[63756, 63756], 'mapped', [22856]],
        [[63757, 63757], 'mapped', [25078]],
        [[63758, 63758], 'mapped', [30313]],
        [[63759, 63759], 'mapped', [32645]],
        [[63760, 63760], 'mapped', [34367]],
        [[63761, 63761], 'mapped', [34746]],
        [[63762, 63762], 'mapped', [35064]],
        [[63763, 63763], 'mapped', [37007]],
        [[63764, 63764], 'mapped', [27138]],
        [[63765, 63765], 'mapped', [27931]],
        [[63766, 63766], 'mapped', [28889]],
        [[63767, 63767], 'mapped', [29662]],
        [[63768, 63768], 'mapped', [33853]],
        [[63769, 63769], 'mapped', [37226]],
        [[63770, 63770], 'mapped', [39409]],
        [[63771, 63771], 'mapped', [20098]],
        [[63772, 63772], 'mapped', [21365]],
        [[63773, 63773], 'mapped', [27396]],
        [[63774, 63774], 'mapped', [29211]],
        [[63775, 63775], 'mapped', [34349]],
        [[63776, 63776], 'mapped', [40478]],
        [[63777, 63777], 'mapped', [23888]],
        [[63778, 63778], 'mapped', [28651]],
        [[63779, 63779], 'mapped', [34253]],
        [[63780, 63780], 'mapped', [35172]],
        [[63781, 63781], 'mapped', [25289]],
        [[63782, 63782], 'mapped', [33240]],
        [[63783, 63783], 'mapped', [34847]],
        [[63784, 63784], 'mapped', [24266]],
        [[63785, 63785], 'mapped', [26391]],
        [[63786, 63786], 'mapped', [28010]],
        [[63787, 63787], 'mapped', [29436]],
        [[63788, 63788], 'mapped', [37070]],
        [[63789, 63789], 'mapped', [20358]],
        [[63790, 63790], 'mapped', [20919]],
        [[63791, 63791], 'mapped', [21214]],
        [[63792, 63792], 'mapped', [25796]],
        [[63793, 63793], 'mapped', [27347]],
        [[63794, 63794], 'mapped', [29200]],
        [[63795, 63795], 'mapped', [30439]],
        [[63796, 63796], 'mapped', [32769]],
        [[63797, 63797], 'mapped', [34310]],
        [[63798, 63798], 'mapped', [34396]],
        [[63799, 63799], 'mapped', [36335]],
        [[63800, 63800], 'mapped', [38706]],
        [[63801, 63801], 'mapped', [39791]],
        [[63802, 63802], 'mapped', [40442]],
        [[63803, 63803], 'mapped', [30860]],
        [[63804, 63804], 'mapped', [31103]],
        [[63805, 63805], 'mapped', [32160]],
        [[63806, 63806], 'mapped', [33737]],
        [[63807, 63807], 'mapped', [37636]],
        [[63808, 63808], 'mapped', [40575]],
        [[63809, 63809], 'mapped', [35542]],
        [[63810, 63810], 'mapped', [22751]],
        [[63811, 63811], 'mapped', [24324]],
        [[63812, 63812], 'mapped', [31840]],
        [[63813, 63813], 'mapped', [32894]],
        [[63814, 63814], 'mapped', [29282]],
        [[63815, 63815], 'mapped', [30922]],
        [[63816, 63816], 'mapped', [36034]],
        [[63817, 63817], 'mapped', [38647]],
        [[63818, 63818], 'mapped', [22744]],
        [[63819, 63819], 'mapped', [23650]],
        [[63820, 63820], 'mapped', [27155]],
        [[63821, 63821], 'mapped', [28122]],
        [[63822, 63822], 'mapped', [28431]],
        [[63823, 63823], 'mapped', [32047]],
        [[63824, 63824], 'mapped', [32311]],
        [[63825, 63825], 'mapped', [38475]],
        [[63826, 63826], 'mapped', [21202]],
        [[63827, 63827], 'mapped', [32907]],
        [[63828, 63828], 'mapped', [20956]],
        [[63829, 63829], 'mapped', [20940]],
        [[63830, 63830], 'mapped', [31260]],
        [[63831, 63831], 'mapped', [32190]],
        [[63832, 63832], 'mapped', [33777]],
        [[63833, 63833], 'mapped', [38517]],
        [[63834, 63834], 'mapped', [35712]],
        [[63835, 63835], 'mapped', [25295]],
        [[63836, 63836], 'mapped', [27138]],
        [[63837, 63837], 'mapped', [35582]],
        [[63838, 63838], 'mapped', [20025]],
        [[63839, 63839], 'mapped', [23527]],
        [[63840, 63840], 'mapped', [24594]],
        [[63841, 63841], 'mapped', [29575]],
        [[63842, 63842], 'mapped', [30064]],
        [[63843, 63843], 'mapped', [21271]],
        [[63844, 63844], 'mapped', [30971]],
        [[63845, 63845], 'mapped', [20415]],
        [[63846, 63846], 'mapped', [24489]],
        [[63847, 63847], 'mapped', [19981]],
        [[63848, 63848], 'mapped', [27852]],
        [[63849, 63849], 'mapped', [25976]],
        [[63850, 63850], 'mapped', [32034]],
        [[63851, 63851], 'mapped', [21443]],
        [[63852, 63852], 'mapped', [22622]],
        [[63853, 63853], 'mapped', [30465]],
        [[63854, 63854], 'mapped', [33865]],
        [[63855, 63855], 'mapped', [35498]],
        [[63856, 63856], 'mapped', [27578]],
        [[63857, 63857], 'mapped', [36784]],
        [[63858, 63858], 'mapped', [27784]],
        [[63859, 63859], 'mapped', [25342]],
        [[63860, 63860], 'mapped', [33509]],
        [[63861, 63861], 'mapped', [25504]],
        [[63862, 63862], 'mapped', [30053]],
        [[63863, 63863], 'mapped', [20142]],
        [[63864, 63864], 'mapped', [20841]],
        [[63865, 63865], 'mapped', [20937]],
        [[63866, 63866], 'mapped', [26753]],
        [[63867, 63867], 'mapped', [31975]],
        [[63868, 63868], 'mapped', [33391]],
        [[63869, 63869], 'mapped', [35538]],
        [[63870, 63870], 'mapped', [37327]],
        [[63871, 63871], 'mapped', [21237]],
        [[63872, 63872], 'mapped', [21570]],
        [[63873, 63873], 'mapped', [22899]],
        [[63874, 63874], 'mapped', [24300]],
        [[63875, 63875], 'mapped', [26053]],
        [[63876, 63876], 'mapped', [28670]],
        [[63877, 63877], 'mapped', [31018]],
        [[63878, 63878], 'mapped', [38317]],
        [[63879, 63879], 'mapped', [39530]],
        [[63880, 63880], 'mapped', [40599]],
        [[63881, 63881], 'mapped', [40654]],
        [[63882, 63882], 'mapped', [21147]],
        [[63883, 63883], 'mapped', [26310]],
        [[63884, 63884], 'mapped', [27511]],
        [[63885, 63885], 'mapped', [36706]],
        [[63886, 63886], 'mapped', [24180]],
        [[63887, 63887], 'mapped', [24976]],
        [[63888, 63888], 'mapped', [25088]],
        [[63889, 63889], 'mapped', [25754]],
        [[63890, 63890], 'mapped', [28451]],
        [[63891, 63891], 'mapped', [29001]],
        [[63892, 63892], 'mapped', [29833]],
        [[63893, 63893], 'mapped', [31178]],
        [[63894, 63894], 'mapped', [32244]],
        [[63895, 63895], 'mapped', [32879]],
        [[63896, 63896], 'mapped', [36646]],
        [[63897, 63897], 'mapped', [34030]],
        [[63898, 63898], 'mapped', [36899]],
        [[63899, 63899], 'mapped', [37706]],
        [[63900, 63900], 'mapped', [21015]],
        [[63901, 63901], 'mapped', [21155]],
        [[63902, 63902], 'mapped', [21693]],
        [[63903, 63903], 'mapped', [28872]],
        [[63904, 63904], 'mapped', [35010]],
        [[63905, 63905], 'mapped', [35498]],
        [[63906, 63906], 'mapped', [24265]],
        [[63907, 63907], 'mapped', [24565]],
        [[63908, 63908], 'mapped', [25467]],
        [[63909, 63909], 'mapped', [27566]],
        [[63910, 63910], 'mapped', [31806]],
        [[63911, 63911], 'mapped', [29557]],
        [[63912, 63912], 'mapped', [20196]],
        [[63913, 63913], 'mapped', [22265]],
        [[63914, 63914], 'mapped', [23527]],
        [[63915, 63915], 'mapped', [23994]],
        [[63916, 63916], 'mapped', [24604]],
        [[63917, 63917], 'mapped', [29618]],
        [[63918, 63918], 'mapped', [29801]],
        [[63919, 63919], 'mapped', [32666]],
        [[63920, 63920], 'mapped', [32838]],
        [[63921, 63921], 'mapped', [37428]],
        [[63922, 63922], 'mapped', [38646]],
        [[63923, 63923], 'mapped', [38728]],
        [[63924, 63924], 'mapped', [38936]],
        [[63925, 63925], 'mapped', [20363]],
        [[63926, 63926], 'mapped', [31150]],
        [[63927, 63927], 'mapped', [37300]],
        [[63928, 63928], 'mapped', [38584]],
        [[63929, 63929], 'mapped', [24801]],
        [[63930, 63930], 'mapped', [20102]],
        [[63931, 63931], 'mapped', [20698]],
        [[63932, 63932], 'mapped', [23534]],
        [[63933, 63933], 'mapped', [23615]],
        [[63934, 63934], 'mapped', [26009]],
        [[63935, 63935], 'mapped', [27138]],
        [[63936, 63936], 'mapped', [29134]],
        [[63937, 63937], 'mapped', [30274]],
        [[63938, 63938], 'mapped', [34044]],
        [[63939, 63939], 'mapped', [36988]],
        [[63940, 63940], 'mapped', [40845]],
        [[63941, 63941], 'mapped', [26248]],
        [[63942, 63942], 'mapped', [38446]],
        [[63943, 63943], 'mapped', [21129]],
        [[63944, 63944], 'mapped', [26491]],
        [[63945, 63945], 'mapped', [26611]],
        [[63946, 63946], 'mapped', [27969]],
        [[63947, 63947], 'mapped', [28316]],
        [[63948, 63948], 'mapped', [29705]],
        [[63949, 63949], 'mapped', [30041]],
        [[63950, 63950], 'mapped', [30827]],
        [[63951, 63951], 'mapped', [32016]],
        [[63952, 63952], 'mapped', [39006]],
        [[63953, 63953], 'mapped', [20845]],
        [[63954, 63954], 'mapped', [25134]],
        [[63955, 63955], 'mapped', [38520]],
        [[63956, 63956], 'mapped', [20523]],
        [[63957, 63957], 'mapped', [23833]],
        [[63958, 63958], 'mapped', [28138]],
        [[63959, 63959], 'mapped', [36650]],
        [[63960, 63960], 'mapped', [24459]],
        [[63961, 63961], 'mapped', [24900]],
        [[63962, 63962], 'mapped', [26647]],
        [[63963, 63963], 'mapped', [29575]],
        [[63964, 63964], 'mapped', [38534]],
        [[63965, 63965], 'mapped', [21033]],
        [[63966, 63966], 'mapped', [21519]],
        [[63967, 63967], 'mapped', [23653]],
        [[63968, 63968], 'mapped', [26131]],
        [[63969, 63969], 'mapped', [26446]],
        [[63970, 63970], 'mapped', [26792]],
        [[63971, 63971], 'mapped', [27877]],
        [[63972, 63972], 'mapped', [29702]],
        [[63973, 63973], 'mapped', [30178]],
        [[63974, 63974], 'mapped', [32633]],
        [[63975, 63975], 'mapped', [35023]],
        [[63976, 63976], 'mapped', [35041]],
        [[63977, 63977], 'mapped', [37324]],
        [[63978, 63978], 'mapped', [38626]],
        [[63979, 63979], 'mapped', [21311]],
        [[63980, 63980], 'mapped', [28346]],
        [[63981, 63981], 'mapped', [21533]],
        [[63982, 63982], 'mapped', [29136]],
        [[63983, 63983], 'mapped', [29848]],
        [[63984, 63984], 'mapped', [34298]],
        [[63985, 63985], 'mapped', [38563]],
        [[63986, 63986], 'mapped', [40023]],
        [[63987, 63987], 'mapped', [40607]],
        [[63988, 63988], 'mapped', [26519]],
        [[63989, 63989], 'mapped', [28107]],
        [[63990, 63990], 'mapped', [33256]],
        [[63991, 63991], 'mapped', [31435]],
        [[63992, 63992], 'mapped', [31520]],
        [[63993, 63993], 'mapped', [31890]],
        [[63994, 63994], 'mapped', [29376]],
        [[63995, 63995], 'mapped', [28825]],
        [[63996, 63996], 'mapped', [35672]],
        [[63997, 63997], 'mapped', [20160]],
        [[63998, 63998], 'mapped', [33590]],
        [[63999, 63999], 'mapped', [21050]],
        [[64e3, 64e3], 'mapped', [20999]],
        [[64001, 64001], 'mapped', [24230]],
        [[64002, 64002], 'mapped', [25299]],
        [[64003, 64003], 'mapped', [31958]],
        [[64004, 64004], 'mapped', [23429]],
        [[64005, 64005], 'mapped', [27934]],
        [[64006, 64006], 'mapped', [26292]],
        [[64007, 64007], 'mapped', [36667]],
        [[64008, 64008], 'mapped', [34892]],
        [[64009, 64009], 'mapped', [38477]],
        [[64010, 64010], 'mapped', [35211]],
        [[64011, 64011], 'mapped', [24275]],
        [[64012, 64012], 'mapped', [20800]],
        [[64013, 64013], 'mapped', [21952]],
        [[64014, 64015], 'valid'],
        [[64016, 64016], 'mapped', [22618]],
        [[64017, 64017], 'valid'],
        [[64018, 64018], 'mapped', [26228]],
        [[64019, 64020], 'valid'],
        [[64021, 64021], 'mapped', [20958]],
        [[64022, 64022], 'mapped', [29482]],
        [[64023, 64023], 'mapped', [30410]],
        [[64024, 64024], 'mapped', [31036]],
        [[64025, 64025], 'mapped', [31070]],
        [[64026, 64026], 'mapped', [31077]],
        [[64027, 64027], 'mapped', [31119]],
        [[64028, 64028], 'mapped', [38742]],
        [[64029, 64029], 'mapped', [31934]],
        [[64030, 64030], 'mapped', [32701]],
        [[64031, 64031], 'valid'],
        [[64032, 64032], 'mapped', [34322]],
        [[64033, 64033], 'valid'],
        [[64034, 64034], 'mapped', [35576]],
        [[64035, 64036], 'valid'],
        [[64037, 64037], 'mapped', [36920]],
        [[64038, 64038], 'mapped', [37117]],
        [[64039, 64041], 'valid'],
        [[64042, 64042], 'mapped', [39151]],
        [[64043, 64043], 'mapped', [39164]],
        [[64044, 64044], 'mapped', [39208]],
        [[64045, 64045], 'mapped', [40372]],
        [[64046, 64046], 'mapped', [37086]],
        [[64047, 64047], 'mapped', [38583]],
        [[64048, 64048], 'mapped', [20398]],
        [[64049, 64049], 'mapped', [20711]],
        [[64050, 64050], 'mapped', [20813]],
        [[64051, 64051], 'mapped', [21193]],
        [[64052, 64052], 'mapped', [21220]],
        [[64053, 64053], 'mapped', [21329]],
        [[64054, 64054], 'mapped', [21917]],
        [[64055, 64055], 'mapped', [22022]],
        [[64056, 64056], 'mapped', [22120]],
        [[64057, 64057], 'mapped', [22592]],
        [[64058, 64058], 'mapped', [22696]],
        [[64059, 64059], 'mapped', [23652]],
        [[64060, 64060], 'mapped', [23662]],
        [[64061, 64061], 'mapped', [24724]],
        [[64062, 64062], 'mapped', [24936]],
        [[64063, 64063], 'mapped', [24974]],
        [[64064, 64064], 'mapped', [25074]],
        [[64065, 64065], 'mapped', [25935]],
        [[64066, 64066], 'mapped', [26082]],
        [[64067, 64067], 'mapped', [26257]],
        [[64068, 64068], 'mapped', [26757]],
        [[64069, 64069], 'mapped', [28023]],
        [[64070, 64070], 'mapped', [28186]],
        [[64071, 64071], 'mapped', [28450]],
        [[64072, 64072], 'mapped', [29038]],
        [[64073, 64073], 'mapped', [29227]],
        [[64074, 64074], 'mapped', [29730]],
        [[64075, 64075], 'mapped', [30865]],
        [[64076, 64076], 'mapped', [31038]],
        [[64077, 64077], 'mapped', [31049]],
        [[64078, 64078], 'mapped', [31048]],
        [[64079, 64079], 'mapped', [31056]],
        [[64080, 64080], 'mapped', [31062]],
        [[64081, 64081], 'mapped', [31069]],
        [[64082, 64082], 'mapped', [31117]],
        [[64083, 64083], 'mapped', [31118]],
        [[64084, 64084], 'mapped', [31296]],
        [[64085, 64085], 'mapped', [31361]],
        [[64086, 64086], 'mapped', [31680]],
        [[64087, 64087], 'mapped', [32244]],
        [[64088, 64088], 'mapped', [32265]],
        [[64089, 64089], 'mapped', [32321]],
        [[64090, 64090], 'mapped', [32626]],
        [[64091, 64091], 'mapped', [32773]],
        [[64092, 64092], 'mapped', [33261]],
        [[64093, 64094], 'mapped', [33401]],
        [[64095, 64095], 'mapped', [33879]],
        [[64096, 64096], 'mapped', [35088]],
        [[64097, 64097], 'mapped', [35222]],
        [[64098, 64098], 'mapped', [35585]],
        [[64099, 64099], 'mapped', [35641]],
        [[64100, 64100], 'mapped', [36051]],
        [[64101, 64101], 'mapped', [36104]],
        [[64102, 64102], 'mapped', [36790]],
        [[64103, 64103], 'mapped', [36920]],
        [[64104, 64104], 'mapped', [38627]],
        [[64105, 64105], 'mapped', [38911]],
        [[64106, 64106], 'mapped', [38971]],
        [[64107, 64107], 'mapped', [24693]],
        [[64108, 64108], 'mapped', [148206]],
        [[64109, 64109], 'mapped', [33304]],
        [[64110, 64111], 'disallowed'],
        [[64112, 64112], 'mapped', [20006]],
        [[64113, 64113], 'mapped', [20917]],
        [[64114, 64114], 'mapped', [20840]],
        [[64115, 64115], 'mapped', [20352]],
        [[64116, 64116], 'mapped', [20805]],
        [[64117, 64117], 'mapped', [20864]],
        [[64118, 64118], 'mapped', [21191]],
        [[64119, 64119], 'mapped', [21242]],
        [[64120, 64120], 'mapped', [21917]],
        [[64121, 64121], 'mapped', [21845]],
        [[64122, 64122], 'mapped', [21913]],
        [[64123, 64123], 'mapped', [21986]],
        [[64124, 64124], 'mapped', [22618]],
        [[64125, 64125], 'mapped', [22707]],
        [[64126, 64126], 'mapped', [22852]],
        [[64127, 64127], 'mapped', [22868]],
        [[64128, 64128], 'mapped', [23138]],
        [[64129, 64129], 'mapped', [23336]],
        [[64130, 64130], 'mapped', [24274]],
        [[64131, 64131], 'mapped', [24281]],
        [[64132, 64132], 'mapped', [24425]],
        [[64133, 64133], 'mapped', [24493]],
        [[64134, 64134], 'mapped', [24792]],
        [[64135, 64135], 'mapped', [24910]],
        [[64136, 64136], 'mapped', [24840]],
        [[64137, 64137], 'mapped', [24974]],
        [[64138, 64138], 'mapped', [24928]],
        [[64139, 64139], 'mapped', [25074]],
        [[64140, 64140], 'mapped', [25140]],
        [[64141, 64141], 'mapped', [25540]],
        [[64142, 64142], 'mapped', [25628]],
        [[64143, 64143], 'mapped', [25682]],
        [[64144, 64144], 'mapped', [25942]],
        [[64145, 64145], 'mapped', [26228]],
        [[64146, 64146], 'mapped', [26391]],
        [[64147, 64147], 'mapped', [26395]],
        [[64148, 64148], 'mapped', [26454]],
        [[64149, 64149], 'mapped', [27513]],
        [[64150, 64150], 'mapped', [27578]],
        [[64151, 64151], 'mapped', [27969]],
        [[64152, 64152], 'mapped', [28379]],
        [[64153, 64153], 'mapped', [28363]],
        [[64154, 64154], 'mapped', [28450]],
        [[64155, 64155], 'mapped', [28702]],
        [[64156, 64156], 'mapped', [29038]],
        [[64157, 64157], 'mapped', [30631]],
        [[64158, 64158], 'mapped', [29237]],
        [[64159, 64159], 'mapped', [29359]],
        [[64160, 64160], 'mapped', [29482]],
        [[64161, 64161], 'mapped', [29809]],
        [[64162, 64162], 'mapped', [29958]],
        [[64163, 64163], 'mapped', [30011]],
        [[64164, 64164], 'mapped', [30237]],
        [[64165, 64165], 'mapped', [30239]],
        [[64166, 64166], 'mapped', [30410]],
        [[64167, 64167], 'mapped', [30427]],
        [[64168, 64168], 'mapped', [30452]],
        [[64169, 64169], 'mapped', [30538]],
        [[64170, 64170], 'mapped', [30528]],
        [[64171, 64171], 'mapped', [30924]],
        [[64172, 64172], 'mapped', [31409]],
        [[64173, 64173], 'mapped', [31680]],
        [[64174, 64174], 'mapped', [31867]],
        [[64175, 64175], 'mapped', [32091]],
        [[64176, 64176], 'mapped', [32244]],
        [[64177, 64177], 'mapped', [32574]],
        [[64178, 64178], 'mapped', [32773]],
        [[64179, 64179], 'mapped', [33618]],
        [[64180, 64180], 'mapped', [33775]],
        [[64181, 64181], 'mapped', [34681]],
        [[64182, 64182], 'mapped', [35137]],
        [[64183, 64183], 'mapped', [35206]],
        [[64184, 64184], 'mapped', [35222]],
        [[64185, 64185], 'mapped', [35519]],
        [[64186, 64186], 'mapped', [35576]],
        [[64187, 64187], 'mapped', [35531]],
        [[64188, 64188], 'mapped', [35585]],
        [[64189, 64189], 'mapped', [35582]],
        [[64190, 64190], 'mapped', [35565]],
        [[64191, 64191], 'mapped', [35641]],
        [[64192, 64192], 'mapped', [35722]],
        [[64193, 64193], 'mapped', [36104]],
        [[64194, 64194], 'mapped', [36664]],
        [[64195, 64195], 'mapped', [36978]],
        [[64196, 64196], 'mapped', [37273]],
        [[64197, 64197], 'mapped', [37494]],
        [[64198, 64198], 'mapped', [38524]],
        [[64199, 64199], 'mapped', [38627]],
        [[64200, 64200], 'mapped', [38742]],
        [[64201, 64201], 'mapped', [38875]],
        [[64202, 64202], 'mapped', [38911]],
        [[64203, 64203], 'mapped', [38923]],
        [[64204, 64204], 'mapped', [38971]],
        [[64205, 64205], 'mapped', [39698]],
        [[64206, 64206], 'mapped', [40860]],
        [[64207, 64207], 'mapped', [141386]],
        [[64208, 64208], 'mapped', [141380]],
        [[64209, 64209], 'mapped', [144341]],
        [[64210, 64210], 'mapped', [15261]],
        [[64211, 64211], 'mapped', [16408]],
        [[64212, 64212], 'mapped', [16441]],
        [[64213, 64213], 'mapped', [152137]],
        [[64214, 64214], 'mapped', [154832]],
        [[64215, 64215], 'mapped', [163539]],
        [[64216, 64216], 'mapped', [40771]],
        [[64217, 64217], 'mapped', [40846]],
        [[64218, 64255], 'disallowed'],
        [[64256, 64256], 'mapped', [102, 102]],
        [[64257, 64257], 'mapped', [102, 105]],
        [[64258, 64258], 'mapped', [102, 108]],
        [[64259, 64259], 'mapped', [102, 102, 105]],
        [[64260, 64260], 'mapped', [102, 102, 108]],
        [[64261, 64262], 'mapped', [115, 116]],
        [[64263, 64274], 'disallowed'],
        [[64275, 64275], 'mapped', [1396, 1398]],
        [[64276, 64276], 'mapped', [1396, 1381]],
        [[64277, 64277], 'mapped', [1396, 1387]],
        [[64278, 64278], 'mapped', [1406, 1398]],
        [[64279, 64279], 'mapped', [1396, 1389]],
        [[64280, 64284], 'disallowed'],
        [[64285, 64285], 'mapped', [1497, 1460]],
        [[64286, 64286], 'valid'],
        [[64287, 64287], 'mapped', [1522, 1463]],
        [[64288, 64288], 'mapped', [1506]],
        [[64289, 64289], 'mapped', [1488]],
        [[64290, 64290], 'mapped', [1491]],
        [[64291, 64291], 'mapped', [1492]],
        [[64292, 64292], 'mapped', [1499]],
        [[64293, 64293], 'mapped', [1500]],
        [[64294, 64294], 'mapped', [1501]],
        [[64295, 64295], 'mapped', [1512]],
        [[64296, 64296], 'mapped', [1514]],
        [[64297, 64297], 'disallowed_STD3_mapped', [43]],
        [[64298, 64298], 'mapped', [1513, 1473]],
        [[64299, 64299], 'mapped', [1513, 1474]],
        [[64300, 64300], 'mapped', [1513, 1468, 1473]],
        [[64301, 64301], 'mapped', [1513, 1468, 1474]],
        [[64302, 64302], 'mapped', [1488, 1463]],
        [[64303, 64303], 'mapped', [1488, 1464]],
        [[64304, 64304], 'mapped', [1488, 1468]],
        [[64305, 64305], 'mapped', [1489, 1468]],
        [[64306, 64306], 'mapped', [1490, 1468]],
        [[64307, 64307], 'mapped', [1491, 1468]],
        [[64308, 64308], 'mapped', [1492, 1468]],
        [[64309, 64309], 'mapped', [1493, 1468]],
        [[64310, 64310], 'mapped', [1494, 1468]],
        [[64311, 64311], 'disallowed'],
        [[64312, 64312], 'mapped', [1496, 1468]],
        [[64313, 64313], 'mapped', [1497, 1468]],
        [[64314, 64314], 'mapped', [1498, 1468]],
        [[64315, 64315], 'mapped', [1499, 1468]],
        [[64316, 64316], 'mapped', [1500, 1468]],
        [[64317, 64317], 'disallowed'],
        [[64318, 64318], 'mapped', [1502, 1468]],
        [[64319, 64319], 'disallowed'],
        [[64320, 64320], 'mapped', [1504, 1468]],
        [[64321, 64321], 'mapped', [1505, 1468]],
        [[64322, 64322], 'disallowed'],
        [[64323, 64323], 'mapped', [1507, 1468]],
        [[64324, 64324], 'mapped', [1508, 1468]],
        [[64325, 64325], 'disallowed'],
        [[64326, 64326], 'mapped', [1510, 1468]],
        [[64327, 64327], 'mapped', [1511, 1468]],
        [[64328, 64328], 'mapped', [1512, 1468]],
        [[64329, 64329], 'mapped', [1513, 1468]],
        [[64330, 64330], 'mapped', [1514, 1468]],
        [[64331, 64331], 'mapped', [1493, 1465]],
        [[64332, 64332], 'mapped', [1489, 1471]],
        [[64333, 64333], 'mapped', [1499, 1471]],
        [[64334, 64334], 'mapped', [1508, 1471]],
        [[64335, 64335], 'mapped', [1488, 1500]],
        [[64336, 64337], 'mapped', [1649]],
        [[64338, 64341], 'mapped', [1659]],
        [[64342, 64345], 'mapped', [1662]],
        [[64346, 64349], 'mapped', [1664]],
        [[64350, 64353], 'mapped', [1658]],
        [[64354, 64357], 'mapped', [1663]],
        [[64358, 64361], 'mapped', [1657]],
        [[64362, 64365], 'mapped', [1700]],
        [[64366, 64369], 'mapped', [1702]],
        [[64370, 64373], 'mapped', [1668]],
        [[64374, 64377], 'mapped', [1667]],
        [[64378, 64381], 'mapped', [1670]],
        [[64382, 64385], 'mapped', [1671]],
        [[64386, 64387], 'mapped', [1677]],
        [[64388, 64389], 'mapped', [1676]],
        [[64390, 64391], 'mapped', [1678]],
        [[64392, 64393], 'mapped', [1672]],
        [[64394, 64395], 'mapped', [1688]],
        [[64396, 64397], 'mapped', [1681]],
        [[64398, 64401], 'mapped', [1705]],
        [[64402, 64405], 'mapped', [1711]],
        [[64406, 64409], 'mapped', [1715]],
        [[64410, 64413], 'mapped', [1713]],
        [[64414, 64415], 'mapped', [1722]],
        [[64416, 64419], 'mapped', [1723]],
        [[64420, 64421], 'mapped', [1728]],
        [[64422, 64425], 'mapped', [1729]],
        [[64426, 64429], 'mapped', [1726]],
        [[64430, 64431], 'mapped', [1746]],
        [[64432, 64433], 'mapped', [1747]],
        [[64434, 64449], 'valid', [], 'NV8'],
        [[64450, 64466], 'disallowed'],
        [[64467, 64470], 'mapped', [1709]],
        [[64471, 64472], 'mapped', [1735]],
        [[64473, 64474], 'mapped', [1734]],
        [[64475, 64476], 'mapped', [1736]],
        [[64477, 64477], 'mapped', [1735, 1652]],
        [[64478, 64479], 'mapped', [1739]],
        [[64480, 64481], 'mapped', [1733]],
        [[64482, 64483], 'mapped', [1737]],
        [[64484, 64487], 'mapped', [1744]],
        [[64488, 64489], 'mapped', [1609]],
        [[64490, 64491], 'mapped', [1574, 1575]],
        [[64492, 64493], 'mapped', [1574, 1749]],
        [[64494, 64495], 'mapped', [1574, 1608]],
        [[64496, 64497], 'mapped', [1574, 1735]],
        [[64498, 64499], 'mapped', [1574, 1734]],
        [[64500, 64501], 'mapped', [1574, 1736]],
        [[64502, 64504], 'mapped', [1574, 1744]],
        [[64505, 64507], 'mapped', [1574, 1609]],
        [[64508, 64511], 'mapped', [1740]],
        [[64512, 64512], 'mapped', [1574, 1580]],
        [[64513, 64513], 'mapped', [1574, 1581]],
        [[64514, 64514], 'mapped', [1574, 1605]],
        [[64515, 64515], 'mapped', [1574, 1609]],
        [[64516, 64516], 'mapped', [1574, 1610]],
        [[64517, 64517], 'mapped', [1576, 1580]],
        [[64518, 64518], 'mapped', [1576, 1581]],
        [[64519, 64519], 'mapped', [1576, 1582]],
        [[64520, 64520], 'mapped', [1576, 1605]],
        [[64521, 64521], 'mapped', [1576, 1609]],
        [[64522, 64522], 'mapped', [1576, 1610]],
        [[64523, 64523], 'mapped', [1578, 1580]],
        [[64524, 64524], 'mapped', [1578, 1581]],
        [[64525, 64525], 'mapped', [1578, 1582]],
        [[64526, 64526], 'mapped', [1578, 1605]],
        [[64527, 64527], 'mapped', [1578, 1609]],
        [[64528, 64528], 'mapped', [1578, 1610]],
        [[64529, 64529], 'mapped', [1579, 1580]],
        [[64530, 64530], 'mapped', [1579, 1605]],
        [[64531, 64531], 'mapped', [1579, 1609]],
        [[64532, 64532], 'mapped', [1579, 1610]],
        [[64533, 64533], 'mapped', [1580, 1581]],
        [[64534, 64534], 'mapped', [1580, 1605]],
        [[64535, 64535], 'mapped', [1581, 1580]],
        [[64536, 64536], 'mapped', [1581, 1605]],
        [[64537, 64537], 'mapped', [1582, 1580]],
        [[64538, 64538], 'mapped', [1582, 1581]],
        [[64539, 64539], 'mapped', [1582, 1605]],
        [[64540, 64540], 'mapped', [1587, 1580]],
        [[64541, 64541], 'mapped', [1587, 1581]],
        [[64542, 64542], 'mapped', [1587, 1582]],
        [[64543, 64543], 'mapped', [1587, 1605]],
        [[64544, 64544], 'mapped', [1589, 1581]],
        [[64545, 64545], 'mapped', [1589, 1605]],
        [[64546, 64546], 'mapped', [1590, 1580]],
        [[64547, 64547], 'mapped', [1590, 1581]],
        [[64548, 64548], 'mapped', [1590, 1582]],
        [[64549, 64549], 'mapped', [1590, 1605]],
        [[64550, 64550], 'mapped', [1591, 1581]],
        [[64551, 64551], 'mapped', [1591, 1605]],
        [[64552, 64552], 'mapped', [1592, 1605]],
        [[64553, 64553], 'mapped', [1593, 1580]],
        [[64554, 64554], 'mapped', [1593, 1605]],
        [[64555, 64555], 'mapped', [1594, 1580]],
        [[64556, 64556], 'mapped', [1594, 1605]],
        [[64557, 64557], 'mapped', [1601, 1580]],
        [[64558, 64558], 'mapped', [1601, 1581]],
        [[64559, 64559], 'mapped', [1601, 1582]],
        [[64560, 64560], 'mapped', [1601, 1605]],
        [[64561, 64561], 'mapped', [1601, 1609]],
        [[64562, 64562], 'mapped', [1601, 1610]],
        [[64563, 64563], 'mapped', [1602, 1581]],
        [[64564, 64564], 'mapped', [1602, 1605]],
        [[64565, 64565], 'mapped', [1602, 1609]],
        [[64566, 64566], 'mapped', [1602, 1610]],
        [[64567, 64567], 'mapped', [1603, 1575]],
        [[64568, 64568], 'mapped', [1603, 1580]],
        [[64569, 64569], 'mapped', [1603, 1581]],
        [[64570, 64570], 'mapped', [1603, 1582]],
        [[64571, 64571], 'mapped', [1603, 1604]],
        [[64572, 64572], 'mapped', [1603, 1605]],
        [[64573, 64573], 'mapped', [1603, 1609]],
        [[64574, 64574], 'mapped', [1603, 1610]],
        [[64575, 64575], 'mapped', [1604, 1580]],
        [[64576, 64576], 'mapped', [1604, 1581]],
        [[64577, 64577], 'mapped', [1604, 1582]],
        [[64578, 64578], 'mapped', [1604, 1605]],
        [[64579, 64579], 'mapped', [1604, 1609]],
        [[64580, 64580], 'mapped', [1604, 1610]],
        [[64581, 64581], 'mapped', [1605, 1580]],
        [[64582, 64582], 'mapped', [1605, 1581]],
        [[64583, 64583], 'mapped', [1605, 1582]],
        [[64584, 64584], 'mapped', [1605, 1605]],
        [[64585, 64585], 'mapped', [1605, 1609]],
        [[64586, 64586], 'mapped', [1605, 1610]],
        [[64587, 64587], 'mapped', [1606, 1580]],
        [[64588, 64588], 'mapped', [1606, 1581]],
        [[64589, 64589], 'mapped', [1606, 1582]],
        [[64590, 64590], 'mapped', [1606, 1605]],
        [[64591, 64591], 'mapped', [1606, 1609]],
        [[64592, 64592], 'mapped', [1606, 1610]],
        [[64593, 64593], 'mapped', [1607, 1580]],
        [[64594, 64594], 'mapped', [1607, 1605]],
        [[64595, 64595], 'mapped', [1607, 1609]],
        [[64596, 64596], 'mapped', [1607, 1610]],
        [[64597, 64597], 'mapped', [1610, 1580]],
        [[64598, 64598], 'mapped', [1610, 1581]],
        [[64599, 64599], 'mapped', [1610, 1582]],
        [[64600, 64600], 'mapped', [1610, 1605]],
        [[64601, 64601], 'mapped', [1610, 1609]],
        [[64602, 64602], 'mapped', [1610, 1610]],
        [[64603, 64603], 'mapped', [1584, 1648]],
        [[64604, 64604], 'mapped', [1585, 1648]],
        [[64605, 64605], 'mapped', [1609, 1648]],
        [[64606, 64606], 'disallowed_STD3_mapped', [32, 1612, 1617]],
        [[64607, 64607], 'disallowed_STD3_mapped', [32, 1613, 1617]],
        [[64608, 64608], 'disallowed_STD3_mapped', [32, 1614, 1617]],
        [[64609, 64609], 'disallowed_STD3_mapped', [32, 1615, 1617]],
        [[64610, 64610], 'disallowed_STD3_mapped', [32, 1616, 1617]],
        [[64611, 64611], 'disallowed_STD3_mapped', [32, 1617, 1648]],
        [[64612, 64612], 'mapped', [1574, 1585]],
        [[64613, 64613], 'mapped', [1574, 1586]],
        [[64614, 64614], 'mapped', [1574, 1605]],
        [[64615, 64615], 'mapped', [1574, 1606]],
        [[64616, 64616], 'mapped', [1574, 1609]],
        [[64617, 64617], 'mapped', [1574, 1610]],
        [[64618, 64618], 'mapped', [1576, 1585]],
        [[64619, 64619], 'mapped', [1576, 1586]],
        [[64620, 64620], 'mapped', [1576, 1605]],
        [[64621, 64621], 'mapped', [1576, 1606]],
        [[64622, 64622], 'mapped', [1576, 1609]],
        [[64623, 64623], 'mapped', [1576, 1610]],
        [[64624, 64624], 'mapped', [1578, 1585]],
        [[64625, 64625], 'mapped', [1578, 1586]],
        [[64626, 64626], 'mapped', [1578, 1605]],
        [[64627, 64627], 'mapped', [1578, 1606]],
        [[64628, 64628], 'mapped', [1578, 1609]],
        [[64629, 64629], 'mapped', [1578, 1610]],
        [[64630, 64630], 'mapped', [1579, 1585]],
        [[64631, 64631], 'mapped', [1579, 1586]],
        [[64632, 64632], 'mapped', [1579, 1605]],
        [[64633, 64633], 'mapped', [1579, 1606]],
        [[64634, 64634], 'mapped', [1579, 1609]],
        [[64635, 64635], 'mapped', [1579, 1610]],
        [[64636, 64636], 'mapped', [1601, 1609]],
        [[64637, 64637], 'mapped', [1601, 1610]],
        [[64638, 64638], 'mapped', [1602, 1609]],
        [[64639, 64639], 'mapped', [1602, 1610]],
        [[64640, 64640], 'mapped', [1603, 1575]],
        [[64641, 64641], 'mapped', [1603, 1604]],
        [[64642, 64642], 'mapped', [1603, 1605]],
        [[64643, 64643], 'mapped', [1603, 1609]],
        [[64644, 64644], 'mapped', [1603, 1610]],
        [[64645, 64645], 'mapped', [1604, 1605]],
        [[64646, 64646], 'mapped', [1604, 1609]],
        [[64647, 64647], 'mapped', [1604, 1610]],
        [[64648, 64648], 'mapped', [1605, 1575]],
        [[64649, 64649], 'mapped', [1605, 1605]],
        [[64650, 64650], 'mapped', [1606, 1585]],
        [[64651, 64651], 'mapped', [1606, 1586]],
        [[64652, 64652], 'mapped', [1606, 1605]],
        [[64653, 64653], 'mapped', [1606, 1606]],
        [[64654, 64654], 'mapped', [1606, 1609]],
        [[64655, 64655], 'mapped', [1606, 1610]],
        [[64656, 64656], 'mapped', [1609, 1648]],
        [[64657, 64657], 'mapped', [1610, 1585]],
        [[64658, 64658], 'mapped', [1610, 1586]],
        [[64659, 64659], 'mapped', [1610, 1605]],
        [[64660, 64660], 'mapped', [1610, 1606]],
        [[64661, 64661], 'mapped', [1610, 1609]],
        [[64662, 64662], 'mapped', [1610, 1610]],
        [[64663, 64663], 'mapped', [1574, 1580]],
        [[64664, 64664], 'mapped', [1574, 1581]],
        [[64665, 64665], 'mapped', [1574, 1582]],
        [[64666, 64666], 'mapped', [1574, 1605]],
        [[64667, 64667], 'mapped', [1574, 1607]],
        [[64668, 64668], 'mapped', [1576, 1580]],
        [[64669, 64669], 'mapped', [1576, 1581]],
        [[64670, 64670], 'mapped', [1576, 1582]],
        [[64671, 64671], 'mapped', [1576, 1605]],
        [[64672, 64672], 'mapped', [1576, 1607]],
        [[64673, 64673], 'mapped', [1578, 1580]],
        [[64674, 64674], 'mapped', [1578, 1581]],
        [[64675, 64675], 'mapped', [1578, 1582]],
        [[64676, 64676], 'mapped', [1578, 1605]],
        [[64677, 64677], 'mapped', [1578, 1607]],
        [[64678, 64678], 'mapped', [1579, 1605]],
        [[64679, 64679], 'mapped', [1580, 1581]],
        [[64680, 64680], 'mapped', [1580, 1605]],
        [[64681, 64681], 'mapped', [1581, 1580]],
        [[64682, 64682], 'mapped', [1581, 1605]],
        [[64683, 64683], 'mapped', [1582, 1580]],
        [[64684, 64684], 'mapped', [1582, 1605]],
        [[64685, 64685], 'mapped', [1587, 1580]],
        [[64686, 64686], 'mapped', [1587, 1581]],
        [[64687, 64687], 'mapped', [1587, 1582]],
        [[64688, 64688], 'mapped', [1587, 1605]],
        [[64689, 64689], 'mapped', [1589, 1581]],
        [[64690, 64690], 'mapped', [1589, 1582]],
        [[64691, 64691], 'mapped', [1589, 1605]],
        [[64692, 64692], 'mapped', [1590, 1580]],
        [[64693, 64693], 'mapped', [1590, 1581]],
        [[64694, 64694], 'mapped', [1590, 1582]],
        [[64695, 64695], 'mapped', [1590, 1605]],
        [[64696, 64696], 'mapped', [1591, 1581]],
        [[64697, 64697], 'mapped', [1592, 1605]],
        [[64698, 64698], 'mapped', [1593, 1580]],
        [[64699, 64699], 'mapped', [1593, 1605]],
        [[64700, 64700], 'mapped', [1594, 1580]],
        [[64701, 64701], 'mapped', [1594, 1605]],
        [[64702, 64702], 'mapped', [1601, 1580]],
        [[64703, 64703], 'mapped', [1601, 1581]],
        [[64704, 64704], 'mapped', [1601, 1582]],
        [[64705, 64705], 'mapped', [1601, 1605]],
        [[64706, 64706], 'mapped', [1602, 1581]],
        [[64707, 64707], 'mapped', [1602, 1605]],
        [[64708, 64708], 'mapped', [1603, 1580]],
        [[64709, 64709], 'mapped', [1603, 1581]],
        [[64710, 64710], 'mapped', [1603, 1582]],
        [[64711, 64711], 'mapped', [1603, 1604]],
        [[64712, 64712], 'mapped', [1603, 1605]],
        [[64713, 64713], 'mapped', [1604, 1580]],
        [[64714, 64714], 'mapped', [1604, 1581]],
        [[64715, 64715], 'mapped', [1604, 1582]],
        [[64716, 64716], 'mapped', [1604, 1605]],
        [[64717, 64717], 'mapped', [1604, 1607]],
        [[64718, 64718], 'mapped', [1605, 1580]],
        [[64719, 64719], 'mapped', [1605, 1581]],
        [[64720, 64720], 'mapped', [1605, 1582]],
        [[64721, 64721], 'mapped', [1605, 1605]],
        [[64722, 64722], 'mapped', [1606, 1580]],
        [[64723, 64723], 'mapped', [1606, 1581]],
        [[64724, 64724], 'mapped', [1606, 1582]],
        [[64725, 64725], 'mapped', [1606, 1605]],
        [[64726, 64726], 'mapped', [1606, 1607]],
        [[64727, 64727], 'mapped', [1607, 1580]],
        [[64728, 64728], 'mapped', [1607, 1605]],
        [[64729, 64729], 'mapped', [1607, 1648]],
        [[64730, 64730], 'mapped', [1610, 1580]],
        [[64731, 64731], 'mapped', [1610, 1581]],
        [[64732, 64732], 'mapped', [1610, 1582]],
        [[64733, 64733], 'mapped', [1610, 1605]],
        [[64734, 64734], 'mapped', [1610, 1607]],
        [[64735, 64735], 'mapped', [1574, 1605]],
        [[64736, 64736], 'mapped', [1574, 1607]],
        [[64737, 64737], 'mapped', [1576, 1605]],
        [[64738, 64738], 'mapped', [1576, 1607]],
        [[64739, 64739], 'mapped', [1578, 1605]],
        [[64740, 64740], 'mapped', [1578, 1607]],
        [[64741, 64741], 'mapped', [1579, 1605]],
        [[64742, 64742], 'mapped', [1579, 1607]],
        [[64743, 64743], 'mapped', [1587, 1605]],
        [[64744, 64744], 'mapped', [1587, 1607]],
        [[64745, 64745], 'mapped', [1588, 1605]],
        [[64746, 64746], 'mapped', [1588, 1607]],
        [[64747, 64747], 'mapped', [1603, 1604]],
        [[64748, 64748], 'mapped', [1603, 1605]],
        [[64749, 64749], 'mapped', [1604, 1605]],
        [[64750, 64750], 'mapped', [1606, 1605]],
        [[64751, 64751], 'mapped', [1606, 1607]],
        [[64752, 64752], 'mapped', [1610, 1605]],
        [[64753, 64753], 'mapped', [1610, 1607]],
        [[64754, 64754], 'mapped', [1600, 1614, 1617]],
        [[64755, 64755], 'mapped', [1600, 1615, 1617]],
        [[64756, 64756], 'mapped', [1600, 1616, 1617]],
        [[64757, 64757], 'mapped', [1591, 1609]],
        [[64758, 64758], 'mapped', [1591, 1610]],
        [[64759, 64759], 'mapped', [1593, 1609]],
        [[64760, 64760], 'mapped', [1593, 1610]],
        [[64761, 64761], 'mapped', [1594, 1609]],
        [[64762, 64762], 'mapped', [1594, 1610]],
        [[64763, 64763], 'mapped', [1587, 1609]],
        [[64764, 64764], 'mapped', [1587, 1610]],
        [[64765, 64765], 'mapped', [1588, 1609]],
        [[64766, 64766], 'mapped', [1588, 1610]],
        [[64767, 64767], 'mapped', [1581, 1609]],
        [[64768, 64768], 'mapped', [1581, 1610]],
        [[64769, 64769], 'mapped', [1580, 1609]],
        [[64770, 64770], 'mapped', [1580, 1610]],
        [[64771, 64771], 'mapped', [1582, 1609]],
        [[64772, 64772], 'mapped', [1582, 1610]],
        [[64773, 64773], 'mapped', [1589, 1609]],
        [[64774, 64774], 'mapped', [1589, 1610]],
        [[64775, 64775], 'mapped', [1590, 1609]],
        [[64776, 64776], 'mapped', [1590, 1610]],
        [[64777, 64777], 'mapped', [1588, 1580]],
        [[64778, 64778], 'mapped', [1588, 1581]],
        [[64779, 64779], 'mapped', [1588, 1582]],
        [[64780, 64780], 'mapped', [1588, 1605]],
        [[64781, 64781], 'mapped', [1588, 1585]],
        [[64782, 64782], 'mapped', [1587, 1585]],
        [[64783, 64783], 'mapped', [1589, 1585]],
        [[64784, 64784], 'mapped', [1590, 1585]],
        [[64785, 64785], 'mapped', [1591, 1609]],
        [[64786, 64786], 'mapped', [1591, 1610]],
        [[64787, 64787], 'mapped', [1593, 1609]],
        [[64788, 64788], 'mapped', [1593, 1610]],
        [[64789, 64789], 'mapped', [1594, 1609]],
        [[64790, 64790], 'mapped', [1594, 1610]],
        [[64791, 64791], 'mapped', [1587, 1609]],
        [[64792, 64792], 'mapped', [1587, 1610]],
        [[64793, 64793], 'mapped', [1588, 1609]],
        [[64794, 64794], 'mapped', [1588, 1610]],
        [[64795, 64795], 'mapped', [1581, 1609]],
        [[64796, 64796], 'mapped', [1581, 1610]],
        [[64797, 64797], 'mapped', [1580, 1609]],
        [[64798, 64798], 'mapped', [1580, 1610]],
        [[64799, 64799], 'mapped', [1582, 1609]],
        [[64800, 64800], 'mapped', [1582, 1610]],
        [[64801, 64801], 'mapped', [1589, 1609]],
        [[64802, 64802], 'mapped', [1589, 1610]],
        [[64803, 64803], 'mapped', [1590, 1609]],
        [[64804, 64804], 'mapped', [1590, 1610]],
        [[64805, 64805], 'mapped', [1588, 1580]],
        [[64806, 64806], 'mapped', [1588, 1581]],
        [[64807, 64807], 'mapped', [1588, 1582]],
        [[64808, 64808], 'mapped', [1588, 1605]],
        [[64809, 64809], 'mapped', [1588, 1585]],
        [[64810, 64810], 'mapped', [1587, 1585]],
        [[64811, 64811], 'mapped', [1589, 1585]],
        [[64812, 64812], 'mapped', [1590, 1585]],
        [[64813, 64813], 'mapped', [1588, 1580]],
        [[64814, 64814], 'mapped', [1588, 1581]],
        [[64815, 64815], 'mapped', [1588, 1582]],
        [[64816, 64816], 'mapped', [1588, 1605]],
        [[64817, 64817], 'mapped', [1587, 1607]],
        [[64818, 64818], 'mapped', [1588, 1607]],
        [[64819, 64819], 'mapped', [1591, 1605]],
        [[64820, 64820], 'mapped', [1587, 1580]],
        [[64821, 64821], 'mapped', [1587, 1581]],
        [[64822, 64822], 'mapped', [1587, 1582]],
        [[64823, 64823], 'mapped', [1588, 1580]],
        [[64824, 64824], 'mapped', [1588, 1581]],
        [[64825, 64825], 'mapped', [1588, 1582]],
        [[64826, 64826], 'mapped', [1591, 1605]],
        [[64827, 64827], 'mapped', [1592, 1605]],
        [[64828, 64829], 'mapped', [1575, 1611]],
        [[64830, 64831], 'valid', [], 'NV8'],
        [[64832, 64847], 'disallowed'],
        [[64848, 64848], 'mapped', [1578, 1580, 1605]],
        [[64849, 64850], 'mapped', [1578, 1581, 1580]],
        [[64851, 64851], 'mapped', [1578, 1581, 1605]],
        [[64852, 64852], 'mapped', [1578, 1582, 1605]],
        [[64853, 64853], 'mapped', [1578, 1605, 1580]],
        [[64854, 64854], 'mapped', [1578, 1605, 1581]],
        [[64855, 64855], 'mapped', [1578, 1605, 1582]],
        [[64856, 64857], 'mapped', [1580, 1605, 1581]],
        [[64858, 64858], 'mapped', [1581, 1605, 1610]],
        [[64859, 64859], 'mapped', [1581, 1605, 1609]],
        [[64860, 64860], 'mapped', [1587, 1581, 1580]],
        [[64861, 64861], 'mapped', [1587, 1580, 1581]],
        [[64862, 64862], 'mapped', [1587, 1580, 1609]],
        [[64863, 64864], 'mapped', [1587, 1605, 1581]],
        [[64865, 64865], 'mapped', [1587, 1605, 1580]],
        [[64866, 64867], 'mapped', [1587, 1605, 1605]],
        [[64868, 64869], 'mapped', [1589, 1581, 1581]],
        [[64870, 64870], 'mapped', [1589, 1605, 1605]],
        [[64871, 64872], 'mapped', [1588, 1581, 1605]],
        [[64873, 64873], 'mapped', [1588, 1580, 1610]],
        [[64874, 64875], 'mapped', [1588, 1605, 1582]],
        [[64876, 64877], 'mapped', [1588, 1605, 1605]],
        [[64878, 64878], 'mapped', [1590, 1581, 1609]],
        [[64879, 64880], 'mapped', [1590, 1582, 1605]],
        [[64881, 64882], 'mapped', [1591, 1605, 1581]],
        [[64883, 64883], 'mapped', [1591, 1605, 1605]],
        [[64884, 64884], 'mapped', [1591, 1605, 1610]],
        [[64885, 64885], 'mapped', [1593, 1580, 1605]],
        [[64886, 64887], 'mapped', [1593, 1605, 1605]],
        [[64888, 64888], 'mapped', [1593, 1605, 1609]],
        [[64889, 64889], 'mapped', [1594, 1605, 1605]],
        [[64890, 64890], 'mapped', [1594, 1605, 1610]],
        [[64891, 64891], 'mapped', [1594, 1605, 1609]],
        [[64892, 64893], 'mapped', [1601, 1582, 1605]],
        [[64894, 64894], 'mapped', [1602, 1605, 1581]],
        [[64895, 64895], 'mapped', [1602, 1605, 1605]],
        [[64896, 64896], 'mapped', [1604, 1581, 1605]],
        [[64897, 64897], 'mapped', [1604, 1581, 1610]],
        [[64898, 64898], 'mapped', [1604, 1581, 1609]],
        [[64899, 64900], 'mapped', [1604, 1580, 1580]],
        [[64901, 64902], 'mapped', [1604, 1582, 1605]],
        [[64903, 64904], 'mapped', [1604, 1605, 1581]],
        [[64905, 64905], 'mapped', [1605, 1581, 1580]],
        [[64906, 64906], 'mapped', [1605, 1581, 1605]],
        [[64907, 64907], 'mapped', [1605, 1581, 1610]],
        [[64908, 64908], 'mapped', [1605, 1580, 1581]],
        [[64909, 64909], 'mapped', [1605, 1580, 1605]],
        [[64910, 64910], 'mapped', [1605, 1582, 1580]],
        [[64911, 64911], 'mapped', [1605, 1582, 1605]],
        [[64912, 64913], 'disallowed'],
        [[64914, 64914], 'mapped', [1605, 1580, 1582]],
        [[64915, 64915], 'mapped', [1607, 1605, 1580]],
        [[64916, 64916], 'mapped', [1607, 1605, 1605]],
        [[64917, 64917], 'mapped', [1606, 1581, 1605]],
        [[64918, 64918], 'mapped', [1606, 1581, 1609]],
        [[64919, 64920], 'mapped', [1606, 1580, 1605]],
        [[64921, 64921], 'mapped', [1606, 1580, 1609]],
        [[64922, 64922], 'mapped', [1606, 1605, 1610]],
        [[64923, 64923], 'mapped', [1606, 1605, 1609]],
        [[64924, 64925], 'mapped', [1610, 1605, 1605]],
        [[64926, 64926], 'mapped', [1576, 1582, 1610]],
        [[64927, 64927], 'mapped', [1578, 1580, 1610]],
        [[64928, 64928], 'mapped', [1578, 1580, 1609]],
        [[64929, 64929], 'mapped', [1578, 1582, 1610]],
        [[64930, 64930], 'mapped', [1578, 1582, 1609]],
        [[64931, 64931], 'mapped', [1578, 1605, 1610]],
        [[64932, 64932], 'mapped', [1578, 1605, 1609]],
        [[64933, 64933], 'mapped', [1580, 1605, 1610]],
        [[64934, 64934], 'mapped', [1580, 1581, 1609]],
        [[64935, 64935], 'mapped', [1580, 1605, 1609]],
        [[64936, 64936], 'mapped', [1587, 1582, 1609]],
        [[64937, 64937], 'mapped', [1589, 1581, 1610]],
        [[64938, 64938], 'mapped', [1588, 1581, 1610]],
        [[64939, 64939], 'mapped', [1590, 1581, 1610]],
        [[64940, 64940], 'mapped', [1604, 1580, 1610]],
        [[64941, 64941], 'mapped', [1604, 1605, 1610]],
        [[64942, 64942], 'mapped', [1610, 1581, 1610]],
        [[64943, 64943], 'mapped', [1610, 1580, 1610]],
        [[64944, 64944], 'mapped', [1610, 1605, 1610]],
        [[64945, 64945], 'mapped', [1605, 1605, 1610]],
        [[64946, 64946], 'mapped', [1602, 1605, 1610]],
        [[64947, 64947], 'mapped', [1606, 1581, 1610]],
        [[64948, 64948], 'mapped', [1602, 1605, 1581]],
        [[64949, 64949], 'mapped', [1604, 1581, 1605]],
        [[64950, 64950], 'mapped', [1593, 1605, 1610]],
        [[64951, 64951], 'mapped', [1603, 1605, 1610]],
        [[64952, 64952], 'mapped', [1606, 1580, 1581]],
        [[64953, 64953], 'mapped', [1605, 1582, 1610]],
        [[64954, 64954], 'mapped', [1604, 1580, 1605]],
        [[64955, 64955], 'mapped', [1603, 1605, 1605]],
        [[64956, 64956], 'mapped', [1604, 1580, 1605]],
        [[64957, 64957], 'mapped', [1606, 1580, 1581]],
        [[64958, 64958], 'mapped', [1580, 1581, 1610]],
        [[64959, 64959], 'mapped', [1581, 1580, 1610]],
        [[64960, 64960], 'mapped', [1605, 1580, 1610]],
        [[64961, 64961], 'mapped', [1601, 1605, 1610]],
        [[64962, 64962], 'mapped', [1576, 1581, 1610]],
        [[64963, 64963], 'mapped', [1603, 1605, 1605]],
        [[64964, 64964], 'mapped', [1593, 1580, 1605]],
        [[64965, 64965], 'mapped', [1589, 1605, 1605]],
        [[64966, 64966], 'mapped', [1587, 1582, 1610]],
        [[64967, 64967], 'mapped', [1606, 1580, 1610]],
        [[64968, 64975], 'disallowed'],
        [[64976, 65007], 'disallowed'],
        [[65008, 65008], 'mapped', [1589, 1604, 1746]],
        [[65009, 65009], 'mapped', [1602, 1604, 1746]],
        [[65010, 65010], 'mapped', [1575, 1604, 1604, 1607]],
        [[65011, 65011], 'mapped', [1575, 1603, 1576, 1585]],
        [[65012, 65012], 'mapped', [1605, 1581, 1605, 1583]],
        [[65013, 65013], 'mapped', [1589, 1604, 1593, 1605]],
        [[65014, 65014], 'mapped', [1585, 1587, 1608, 1604]],
        [[65015, 65015], 'mapped', [1593, 1604, 1610, 1607]],
        [[65016, 65016], 'mapped', [1608, 1587, 1604, 1605]],
        [[65017, 65017], 'mapped', [1589, 1604, 1609]],
        [
          [65018, 65018],
          'disallowed_STD3_mapped',
          [
            1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608,
            1587, 1604, 1605
          ]
        ],
        [[65019, 65019], 'disallowed_STD3_mapped', [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]],
        [[65020, 65020], 'mapped', [1585, 1740, 1575, 1604]],
        [[65021, 65021], 'valid', [], 'NV8'],
        [[65022, 65023], 'disallowed'],
        [[65024, 65039], 'ignored'],
        [[65040, 65040], 'disallowed_STD3_mapped', [44]],
        [[65041, 65041], 'mapped', [12289]],
        [[65042, 65042], 'disallowed'],
        [[65043, 65043], 'disallowed_STD3_mapped', [58]],
        [[65044, 65044], 'disallowed_STD3_mapped', [59]],
        [[65045, 65045], 'disallowed_STD3_mapped', [33]],
        [[65046, 65046], 'disallowed_STD3_mapped', [63]],
        [[65047, 65047], 'mapped', [12310]],
        [[65048, 65048], 'mapped', [12311]],
        [[65049, 65049], 'disallowed'],
        [[65050, 65055], 'disallowed'],
        [[65056, 65059], 'valid'],
        [[65060, 65062], 'valid'],
        [[65063, 65069], 'valid'],
        [[65070, 65071], 'valid'],
        [[65072, 65072], 'disallowed'],
        [[65073, 65073], 'mapped', [8212]],
        [[65074, 65074], 'mapped', [8211]],
        [[65075, 65076], 'disallowed_STD3_mapped', [95]],
        [[65077, 65077], 'disallowed_STD3_mapped', [40]],
        [[65078, 65078], 'disallowed_STD3_mapped', [41]],
        [[65079, 65079], 'disallowed_STD3_mapped', [123]],
        [[65080, 65080], 'disallowed_STD3_mapped', [125]],
        [[65081, 65081], 'mapped', [12308]],
        [[65082, 65082], 'mapped', [12309]],
        [[65083, 65083], 'mapped', [12304]],
        [[65084, 65084], 'mapped', [12305]],
        [[65085, 65085], 'mapped', [12298]],
        [[65086, 65086], 'mapped', [12299]],
        [[65087, 65087], 'mapped', [12296]],
        [[65088, 65088], 'mapped', [12297]],
        [[65089, 65089], 'mapped', [12300]],
        [[65090, 65090], 'mapped', [12301]],
        [[65091, 65091], 'mapped', [12302]],
        [[65092, 65092], 'mapped', [12303]],
        [[65093, 65094], 'valid', [], 'NV8'],
        [[65095, 65095], 'disallowed_STD3_mapped', [91]],
        [[65096, 65096], 'disallowed_STD3_mapped', [93]],
        [[65097, 65100], 'disallowed_STD3_mapped', [32, 773]],
        [[65101, 65103], 'disallowed_STD3_mapped', [95]],
        [[65104, 65104], 'disallowed_STD3_mapped', [44]],
        [[65105, 65105], 'mapped', [12289]],
        [[65106, 65106], 'disallowed'],
        [[65107, 65107], 'disallowed'],
        [[65108, 65108], 'disallowed_STD3_mapped', [59]],
        [[65109, 65109], 'disallowed_STD3_mapped', [58]],
        [[65110, 65110], 'disallowed_STD3_mapped', [63]],
        [[65111, 65111], 'disallowed_STD3_mapped', [33]],
        [[65112, 65112], 'mapped', [8212]],
        [[65113, 65113], 'disallowed_STD3_mapped', [40]],
        [[65114, 65114], 'disallowed_STD3_mapped', [41]],
        [[65115, 65115], 'disallowed_STD3_mapped', [123]],
        [[65116, 65116], 'disallowed_STD3_mapped', [125]],
        [[65117, 65117], 'mapped', [12308]],
        [[65118, 65118], 'mapped', [12309]],
        [[65119, 65119], 'disallowed_STD3_mapped', [35]],
        [[65120, 65120], 'disallowed_STD3_mapped', [38]],
        [[65121, 65121], 'disallowed_STD3_mapped', [42]],
        [[65122, 65122], 'disallowed_STD3_mapped', [43]],
        [[65123, 65123], 'mapped', [45]],
        [[65124, 65124], 'disallowed_STD3_mapped', [60]],
        [[65125, 65125], 'disallowed_STD3_mapped', [62]],
        [[65126, 65126], 'disallowed_STD3_mapped', [61]],
        [[65127, 65127], 'disallowed'],
        [[65128, 65128], 'disallowed_STD3_mapped', [92]],
        [[65129, 65129], 'disallowed_STD3_mapped', [36]],
        [[65130, 65130], 'disallowed_STD3_mapped', [37]],
        [[65131, 65131], 'disallowed_STD3_mapped', [64]],
        [[65132, 65135], 'disallowed'],
        [[65136, 65136], 'disallowed_STD3_mapped', [32, 1611]],
        [[65137, 65137], 'mapped', [1600, 1611]],
        [[65138, 65138], 'disallowed_STD3_mapped', [32, 1612]],
        [[65139, 65139], 'valid'],
        [[65140, 65140], 'disallowed_STD3_mapped', [32, 1613]],
        [[65141, 65141], 'disallowed'],
        [[65142, 65142], 'disallowed_STD3_mapped', [32, 1614]],
        [[65143, 65143], 'mapped', [1600, 1614]],
        [[65144, 65144], 'disallowed_STD3_mapped', [32, 1615]],
        [[65145, 65145], 'mapped', [1600, 1615]],
        [[65146, 65146], 'disallowed_STD3_mapped', [32, 1616]],
        [[65147, 65147], 'mapped', [1600, 1616]],
        [[65148, 65148], 'disallowed_STD3_mapped', [32, 1617]],
        [[65149, 65149], 'mapped', [1600, 1617]],
        [[65150, 65150], 'disallowed_STD3_mapped', [32, 1618]],
        [[65151, 65151], 'mapped', [1600, 1618]],
        [[65152, 65152], 'mapped', [1569]],
        [[65153, 65154], 'mapped', [1570]],
        [[65155, 65156], 'mapped', [1571]],
        [[65157, 65158], 'mapped', [1572]],
        [[65159, 65160], 'mapped', [1573]],
        [[65161, 65164], 'mapped', [1574]],
        [[65165, 65166], 'mapped', [1575]],
        [[65167, 65170], 'mapped', [1576]],
        [[65171, 65172], 'mapped', [1577]],
        [[65173, 65176], 'mapped', [1578]],
        [[65177, 65180], 'mapped', [1579]],
        [[65181, 65184], 'mapped', [1580]],
        [[65185, 65188], 'mapped', [1581]],
        [[65189, 65192], 'mapped', [1582]],
        [[65193, 65194], 'mapped', [1583]],
        [[65195, 65196], 'mapped', [1584]],
        [[65197, 65198], 'mapped', [1585]],
        [[65199, 65200], 'mapped', [1586]],
        [[65201, 65204], 'mapped', [1587]],
        [[65205, 65208], 'mapped', [1588]],
        [[65209, 65212], 'mapped', [1589]],
        [[65213, 65216], 'mapped', [1590]],
        [[65217, 65220], 'mapped', [1591]],
        [[65221, 65224], 'mapped', [1592]],
        [[65225, 65228], 'mapped', [1593]],
        [[65229, 65232], 'mapped', [1594]],
        [[65233, 65236], 'mapped', [1601]],
        [[65237, 65240], 'mapped', [1602]],
        [[65241, 65244], 'mapped', [1603]],
        [[65245, 65248], 'mapped', [1604]],
        [[65249, 65252], 'mapped', [1605]],
        [[65253, 65256], 'mapped', [1606]],
        [[65257, 65260], 'mapped', [1607]],
        [[65261, 65262], 'mapped', [1608]],
        [[65263, 65264], 'mapped', [1609]],
        [[65265, 65268], 'mapped', [1610]],
        [[65269, 65270], 'mapped', [1604, 1570]],
        [[65271, 65272], 'mapped', [1604, 1571]],
        [[65273, 65274], 'mapped', [1604, 1573]],
        [[65275, 65276], 'mapped', [1604, 1575]],
        [[65277, 65278], 'disallowed'],
        [[65279, 65279], 'ignored'],
        [[65280, 65280], 'disallowed'],
        [[65281, 65281], 'disallowed_STD3_mapped', [33]],
        [[65282, 65282], 'disallowed_STD3_mapped', [34]],
        [[65283, 65283], 'disallowed_STD3_mapped', [35]],
        [[65284, 65284], 'disallowed_STD3_mapped', [36]],
        [[65285, 65285], 'disallowed_STD3_mapped', [37]],
        [[65286, 65286], 'disallowed_STD3_mapped', [38]],
        [[65287, 65287], 'disallowed_STD3_mapped', [39]],
        [[65288, 65288], 'disallowed_STD3_mapped', [40]],
        [[65289, 65289], 'disallowed_STD3_mapped', [41]],
        [[65290, 65290], 'disallowed_STD3_mapped', [42]],
        [[65291, 65291], 'disallowed_STD3_mapped', [43]],
        [[65292, 65292], 'disallowed_STD3_mapped', [44]],
        [[65293, 65293], 'mapped', [45]],
        [[65294, 65294], 'mapped', [46]],
        [[65295, 65295], 'disallowed_STD3_mapped', [47]],
        [[65296, 65296], 'mapped', [48]],
        [[65297, 65297], 'mapped', [49]],
        [[65298, 65298], 'mapped', [50]],
        [[65299, 65299], 'mapped', [51]],
        [[65300, 65300], 'mapped', [52]],
        [[65301, 65301], 'mapped', [53]],
        [[65302, 65302], 'mapped', [54]],
        [[65303, 65303], 'mapped', [55]],
        [[65304, 65304], 'mapped', [56]],
        [[65305, 65305], 'mapped', [57]],
        [[65306, 65306], 'disallowed_STD3_mapped', [58]],
        [[65307, 65307], 'disallowed_STD3_mapped', [59]],
        [[65308, 65308], 'disallowed_STD3_mapped', [60]],
        [[65309, 65309], 'disallowed_STD3_mapped', [61]],
        [[65310, 65310], 'disallowed_STD3_mapped', [62]],
        [[65311, 65311], 'disallowed_STD3_mapped', [63]],
        [[65312, 65312], 'disallowed_STD3_mapped', [64]],
        [[65313, 65313], 'mapped', [97]],
        [[65314, 65314], 'mapped', [98]],
        [[65315, 65315], 'mapped', [99]],
        [[65316, 65316], 'mapped', [100]],
        [[65317, 65317], 'mapped', [101]],
        [[65318, 65318], 'mapped', [102]],
        [[65319, 65319], 'mapped', [103]],
        [[65320, 65320], 'mapped', [104]],
        [[65321, 65321], 'mapped', [105]],
        [[65322, 65322], 'mapped', [106]],
        [[65323, 65323], 'mapped', [107]],
        [[65324, 65324], 'mapped', [108]],
        [[65325, 65325], 'mapped', [109]],
        [[65326, 65326], 'mapped', [110]],
        [[65327, 65327], 'mapped', [111]],
        [[65328, 65328], 'mapped', [112]],
        [[65329, 65329], 'mapped', [113]],
        [[65330, 65330], 'mapped', [114]],
        [[65331, 65331], 'mapped', [115]],
        [[65332, 65332], 'mapped', [116]],
        [[65333, 65333], 'mapped', [117]],
        [[65334, 65334], 'mapped', [118]],
        [[65335, 65335], 'mapped', [119]],
        [[65336, 65336], 'mapped', [120]],
        [[65337, 65337], 'mapped', [121]],
        [[65338, 65338], 'mapped', [122]],
        [[65339, 65339], 'disallowed_STD3_mapped', [91]],
        [[65340, 65340], 'disallowed_STD3_mapped', [92]],
        [[65341, 65341], 'disallowed_STD3_mapped', [93]],
        [[65342, 65342], 'disallowed_STD3_mapped', [94]],
        [[65343, 65343], 'disallowed_STD3_mapped', [95]],
        [[65344, 65344], 'disallowed_STD3_mapped', [96]],
        [[65345, 65345], 'mapped', [97]],
        [[65346, 65346], 'mapped', [98]],
        [[65347, 65347], 'mapped', [99]],
        [[65348, 65348], 'mapped', [100]],
        [[65349, 65349], 'mapped', [101]],
        [[65350, 65350], 'mapped', [102]],
        [[65351, 65351], 'mapped', [103]],
        [[65352, 65352], 'mapped', [104]],
        [[65353, 65353], 'mapped', [105]],
        [[65354, 65354], 'mapped', [106]],
        [[65355, 65355], 'mapped', [107]],
        [[65356, 65356], 'mapped', [108]],
        [[65357, 65357], 'mapped', [109]],
        [[65358, 65358], 'mapped', [110]],
        [[65359, 65359], 'mapped', [111]],
        [[65360, 65360], 'mapped', [112]],
        [[65361, 65361], 'mapped', [113]],
        [[65362, 65362], 'mapped', [114]],
        [[65363, 65363], 'mapped', [115]],
        [[65364, 65364], 'mapped', [116]],
        [[65365, 65365], 'mapped', [117]],
        [[65366, 65366], 'mapped', [118]],
        [[65367, 65367], 'mapped', [119]],
        [[65368, 65368], 'mapped', [120]],
        [[65369, 65369], 'mapped', [121]],
        [[65370, 65370], 'mapped', [122]],
        [[65371, 65371], 'disallowed_STD3_mapped', [123]],
        [[65372, 65372], 'disallowed_STD3_mapped', [124]],
        [[65373, 65373], 'disallowed_STD3_mapped', [125]],
        [[65374, 65374], 'disallowed_STD3_mapped', [126]],
        [[65375, 65375], 'mapped', [10629]],
        [[65376, 65376], 'mapped', [10630]],
        [[65377, 65377], 'mapped', [46]],
        [[65378, 65378], 'mapped', [12300]],
        [[65379, 65379], 'mapped', [12301]],
        [[65380, 65380], 'mapped', [12289]],
        [[65381, 65381], 'mapped', [12539]],
        [[65382, 65382], 'mapped', [12530]],
        [[65383, 65383], 'mapped', [12449]],
        [[65384, 65384], 'mapped', [12451]],
        [[65385, 65385], 'mapped', [12453]],
        [[65386, 65386], 'mapped', [12455]],
        [[65387, 65387], 'mapped', [12457]],
        [[65388, 65388], 'mapped', [12515]],
        [[65389, 65389], 'mapped', [12517]],
        [[65390, 65390], 'mapped', [12519]],
        [[65391, 65391], 'mapped', [12483]],
        [[65392, 65392], 'mapped', [12540]],
        [[65393, 65393], 'mapped', [12450]],
        [[65394, 65394], 'mapped', [12452]],
        [[65395, 65395], 'mapped', [12454]],
        [[65396, 65396], 'mapped', [12456]],
        [[65397, 65397], 'mapped', [12458]],
        [[65398, 65398], 'mapped', [12459]],
        [[65399, 65399], 'mapped', [12461]],
        [[65400, 65400], 'mapped', [12463]],
        [[65401, 65401], 'mapped', [12465]],
        [[65402, 65402], 'mapped', [12467]],
        [[65403, 65403], 'mapped', [12469]],
        [[65404, 65404], 'mapped', [12471]],
        [[65405, 65405], 'mapped', [12473]],
        [[65406, 65406], 'mapped', [12475]],
        [[65407, 65407], 'mapped', [12477]],
        [[65408, 65408], 'mapped', [12479]],
        [[65409, 65409], 'mapped', [12481]],
        [[65410, 65410], 'mapped', [12484]],
        [[65411, 65411], 'mapped', [12486]],
        [[65412, 65412], 'mapped', [12488]],
        [[65413, 65413], 'mapped', [12490]],
        [[65414, 65414], 'mapped', [12491]],
        [[65415, 65415], 'mapped', [12492]],
        [[65416, 65416], 'mapped', [12493]],
        [[65417, 65417], 'mapped', [12494]],
        [[65418, 65418], 'mapped', [12495]],
        [[65419, 65419], 'mapped', [12498]],
        [[65420, 65420], 'mapped', [12501]],
        [[65421, 65421], 'mapped', [12504]],
        [[65422, 65422], 'mapped', [12507]],
        [[65423, 65423], 'mapped', [12510]],
        [[65424, 65424], 'mapped', [12511]],
        [[65425, 65425], 'mapped', [12512]],
        [[65426, 65426], 'mapped', [12513]],
        [[65427, 65427], 'mapped', [12514]],
        [[65428, 65428], 'mapped', [12516]],
        [[65429, 65429], 'mapped', [12518]],
        [[65430, 65430], 'mapped', [12520]],
        [[65431, 65431], 'mapped', [12521]],
        [[65432, 65432], 'mapped', [12522]],
        [[65433, 65433], 'mapped', [12523]],
        [[65434, 65434], 'mapped', [12524]],
        [[65435, 65435], 'mapped', [12525]],
        [[65436, 65436], 'mapped', [12527]],
        [[65437, 65437], 'mapped', [12531]],
        [[65438, 65438], 'mapped', [12441]],
        [[65439, 65439], 'mapped', [12442]],
        [[65440, 65440], 'disallowed'],
        [[65441, 65441], 'mapped', [4352]],
        [[65442, 65442], 'mapped', [4353]],
        [[65443, 65443], 'mapped', [4522]],
        [[65444, 65444], 'mapped', [4354]],
        [[65445, 65445], 'mapped', [4524]],
        [[65446, 65446], 'mapped', [4525]],
        [[65447, 65447], 'mapped', [4355]],
        [[65448, 65448], 'mapped', [4356]],
        [[65449, 65449], 'mapped', [4357]],
        [[65450, 65450], 'mapped', [4528]],
        [[65451, 65451], 'mapped', [4529]],
        [[65452, 65452], 'mapped', [4530]],
        [[65453, 65453], 'mapped', [4531]],
        [[65454, 65454], 'mapped', [4532]],
        [[65455, 65455], 'mapped', [4533]],
        [[65456, 65456], 'mapped', [4378]],
        [[65457, 65457], 'mapped', [4358]],
        [[65458, 65458], 'mapped', [4359]],
        [[65459, 65459], 'mapped', [4360]],
        [[65460, 65460], 'mapped', [4385]],
        [[65461, 65461], 'mapped', [4361]],
        [[65462, 65462], 'mapped', [4362]],
        [[65463, 65463], 'mapped', [4363]],
        [[65464, 65464], 'mapped', [4364]],
        [[65465, 65465], 'mapped', [4365]],
        [[65466, 65466], 'mapped', [4366]],
        [[65467, 65467], 'mapped', [4367]],
        [[65468, 65468], 'mapped', [4368]],
        [[65469, 65469], 'mapped', [4369]],
        [[65470, 65470], 'mapped', [4370]],
        [[65471, 65473], 'disallowed'],
        [[65474, 65474], 'mapped', [4449]],
        [[65475, 65475], 'mapped', [4450]],
        [[65476, 65476], 'mapped', [4451]],
        [[65477, 65477], 'mapped', [4452]],
        [[65478, 65478], 'mapped', [4453]],
        [[65479, 65479], 'mapped', [4454]],
        [[65480, 65481], 'disallowed'],
        [[65482, 65482], 'mapped', [4455]],
        [[65483, 65483], 'mapped', [4456]],
        [[65484, 65484], 'mapped', [4457]],
        [[65485, 65485], 'mapped', [4458]],
        [[65486, 65486], 'mapped', [4459]],
        [[65487, 65487], 'mapped', [4460]],
        [[65488, 65489], 'disallowed'],
        [[65490, 65490], 'mapped', [4461]],
        [[65491, 65491], 'mapped', [4462]],
        [[65492, 65492], 'mapped', [4463]],
        [[65493, 65493], 'mapped', [4464]],
        [[65494, 65494], 'mapped', [4465]],
        [[65495, 65495], 'mapped', [4466]],
        [[65496, 65497], 'disallowed'],
        [[65498, 65498], 'mapped', [4467]],
        [[65499, 65499], 'mapped', [4468]],
        [[65500, 65500], 'mapped', [4469]],
        [[65501, 65503], 'disallowed'],
        [[65504, 65504], 'mapped', [162]],
        [[65505, 65505], 'mapped', [163]],
        [[65506, 65506], 'mapped', [172]],
        [[65507, 65507], 'disallowed_STD3_mapped', [32, 772]],
        [[65508, 65508], 'mapped', [166]],
        [[65509, 65509], 'mapped', [165]],
        [[65510, 65510], 'mapped', [8361]],
        [[65511, 65511], 'disallowed'],
        [[65512, 65512], 'mapped', [9474]],
        [[65513, 65513], 'mapped', [8592]],
        [[65514, 65514], 'mapped', [8593]],
        [[65515, 65515], 'mapped', [8594]],
        [[65516, 65516], 'mapped', [8595]],
        [[65517, 65517], 'mapped', [9632]],
        [[65518, 65518], 'mapped', [9675]],
        [[65519, 65528], 'disallowed'],
        [[65529, 65531], 'disallowed'],
        [[65532, 65532], 'disallowed'],
        [[65533, 65533], 'disallowed'],
        [[65534, 65535], 'disallowed'],
        [[65536, 65547], 'valid'],
        [[65548, 65548], 'disallowed'],
        [[65549, 65574], 'valid'],
        [[65575, 65575], 'disallowed'],
        [[65576, 65594], 'valid'],
        [[65595, 65595], 'disallowed'],
        [[65596, 65597], 'valid'],
        [[65598, 65598], 'disallowed'],
        [[65599, 65613], 'valid'],
        [[65614, 65615], 'disallowed'],
        [[65616, 65629], 'valid'],
        [[65630, 65663], 'disallowed'],
        [[65664, 65786], 'valid'],
        [[65787, 65791], 'disallowed'],
        [[65792, 65794], 'valid', [], 'NV8'],
        [[65795, 65798], 'disallowed'],
        [[65799, 65843], 'valid', [], 'NV8'],
        [[65844, 65846], 'disallowed'],
        [[65847, 65855], 'valid', [], 'NV8'],
        [[65856, 65930], 'valid', [], 'NV8'],
        [[65931, 65932], 'valid', [], 'NV8'],
        [[65933, 65935], 'disallowed'],
        [[65936, 65947], 'valid', [], 'NV8'],
        [[65948, 65951], 'disallowed'],
        [[65952, 65952], 'valid', [], 'NV8'],
        [[65953, 65999], 'disallowed'],
        [[66e3, 66044], 'valid', [], 'NV8'],
        [[66045, 66045], 'valid'],
        [[66046, 66175], 'disallowed'],
        [[66176, 66204], 'valid'],
        [[66205, 66207], 'disallowed'],
        [[66208, 66256], 'valid'],
        [[66257, 66271], 'disallowed'],
        [[66272, 66272], 'valid'],
        [[66273, 66299], 'valid', [], 'NV8'],
        [[66300, 66303], 'disallowed'],
        [[66304, 66334], 'valid'],
        [[66335, 66335], 'valid'],
        [[66336, 66339], 'valid', [], 'NV8'],
        [[66340, 66351], 'disallowed'],
        [[66352, 66368], 'valid'],
        [[66369, 66369], 'valid', [], 'NV8'],
        [[66370, 66377], 'valid'],
        [[66378, 66378], 'valid', [], 'NV8'],
        [[66379, 66383], 'disallowed'],
        [[66384, 66426], 'valid'],
        [[66427, 66431], 'disallowed'],
        [[66432, 66461], 'valid'],
        [[66462, 66462], 'disallowed'],
        [[66463, 66463], 'valid', [], 'NV8'],
        [[66464, 66499], 'valid'],
        [[66500, 66503], 'disallowed'],
        [[66504, 66511], 'valid'],
        [[66512, 66517], 'valid', [], 'NV8'],
        [[66518, 66559], 'disallowed'],
        [[66560, 66560], 'mapped', [66600]],
        [[66561, 66561], 'mapped', [66601]],
        [[66562, 66562], 'mapped', [66602]],
        [[66563, 66563], 'mapped', [66603]],
        [[66564, 66564], 'mapped', [66604]],
        [[66565, 66565], 'mapped', [66605]],
        [[66566, 66566], 'mapped', [66606]],
        [[66567, 66567], 'mapped', [66607]],
        [[66568, 66568], 'mapped', [66608]],
        [[66569, 66569], 'mapped', [66609]],
        [[66570, 66570], 'mapped', [66610]],
        [[66571, 66571], 'mapped', [66611]],
        [[66572, 66572], 'mapped', [66612]],
        [[66573, 66573], 'mapped', [66613]],
        [[66574, 66574], 'mapped', [66614]],
        [[66575, 66575], 'mapped', [66615]],
        [[66576, 66576], 'mapped', [66616]],
        [[66577, 66577], 'mapped', [66617]],
        [[66578, 66578], 'mapped', [66618]],
        [[66579, 66579], 'mapped', [66619]],
        [[66580, 66580], 'mapped', [66620]],
        [[66581, 66581], 'mapped', [66621]],
        [[66582, 66582], 'mapped', [66622]],
        [[66583, 66583], 'mapped', [66623]],
        [[66584, 66584], 'mapped', [66624]],
        [[66585, 66585], 'mapped', [66625]],
        [[66586, 66586], 'mapped', [66626]],
        [[66587, 66587], 'mapped', [66627]],
        [[66588, 66588], 'mapped', [66628]],
        [[66589, 66589], 'mapped', [66629]],
        [[66590, 66590], 'mapped', [66630]],
        [[66591, 66591], 'mapped', [66631]],
        [[66592, 66592], 'mapped', [66632]],
        [[66593, 66593], 'mapped', [66633]],
        [[66594, 66594], 'mapped', [66634]],
        [[66595, 66595], 'mapped', [66635]],
        [[66596, 66596], 'mapped', [66636]],
        [[66597, 66597], 'mapped', [66637]],
        [[66598, 66598], 'mapped', [66638]],
        [[66599, 66599], 'mapped', [66639]],
        [[66600, 66637], 'valid'],
        [[66638, 66717], 'valid'],
        [[66718, 66719], 'disallowed'],
        [[66720, 66729], 'valid'],
        [[66730, 66815], 'disallowed'],
        [[66816, 66855], 'valid'],
        [[66856, 66863], 'disallowed'],
        [[66864, 66915], 'valid'],
        [[66916, 66926], 'disallowed'],
        [[66927, 66927], 'valid', [], 'NV8'],
        [[66928, 67071], 'disallowed'],
        [[67072, 67382], 'valid'],
        [[67383, 67391], 'disallowed'],
        [[67392, 67413], 'valid'],
        [[67414, 67423], 'disallowed'],
        [[67424, 67431], 'valid'],
        [[67432, 67583], 'disallowed'],
        [[67584, 67589], 'valid'],
        [[67590, 67591], 'disallowed'],
        [[67592, 67592], 'valid'],
        [[67593, 67593], 'disallowed'],
        [[67594, 67637], 'valid'],
        [[67638, 67638], 'disallowed'],
        [[67639, 67640], 'valid'],
        [[67641, 67643], 'disallowed'],
        [[67644, 67644], 'valid'],
        [[67645, 67646], 'disallowed'],
        [[67647, 67647], 'valid'],
        [[67648, 67669], 'valid'],
        [[67670, 67670], 'disallowed'],
        [[67671, 67679], 'valid', [], 'NV8'],
        [[67680, 67702], 'valid'],
        [[67703, 67711], 'valid', [], 'NV8'],
        [[67712, 67742], 'valid'],
        [[67743, 67750], 'disallowed'],
        [[67751, 67759], 'valid', [], 'NV8'],
        [[67760, 67807], 'disallowed'],
        [[67808, 67826], 'valid'],
        [[67827, 67827], 'disallowed'],
        [[67828, 67829], 'valid'],
        [[67830, 67834], 'disallowed'],
        [[67835, 67839], 'valid', [], 'NV8'],
        [[67840, 67861], 'valid'],
        [[67862, 67865], 'valid', [], 'NV8'],
        [[67866, 67867], 'valid', [], 'NV8'],
        [[67868, 67870], 'disallowed'],
        [[67871, 67871], 'valid', [], 'NV8'],
        [[67872, 67897], 'valid'],
        [[67898, 67902], 'disallowed'],
        [[67903, 67903], 'valid', [], 'NV8'],
        [[67904, 67967], 'disallowed'],
        [[67968, 68023], 'valid'],
        [[68024, 68027], 'disallowed'],
        [[68028, 68029], 'valid', [], 'NV8'],
        [[68030, 68031], 'valid'],
        [[68032, 68047], 'valid', [], 'NV8'],
        [[68048, 68049], 'disallowed'],
        [[68050, 68095], 'valid', [], 'NV8'],
        [[68096, 68099], 'valid'],
        [[68100, 68100], 'disallowed'],
        [[68101, 68102], 'valid'],
        [[68103, 68107], 'disallowed'],
        [[68108, 68115], 'valid'],
        [[68116, 68116], 'disallowed'],
        [[68117, 68119], 'valid'],
        [[68120, 68120], 'disallowed'],
        [[68121, 68147], 'valid'],
        [[68148, 68151], 'disallowed'],
        [[68152, 68154], 'valid'],
        [[68155, 68158], 'disallowed'],
        [[68159, 68159], 'valid'],
        [[68160, 68167], 'valid', [], 'NV8'],
        [[68168, 68175], 'disallowed'],
        [[68176, 68184], 'valid', [], 'NV8'],
        [[68185, 68191], 'disallowed'],
        [[68192, 68220], 'valid'],
        [[68221, 68223], 'valid', [], 'NV8'],
        [[68224, 68252], 'valid'],
        [[68253, 68255], 'valid', [], 'NV8'],
        [[68256, 68287], 'disallowed'],
        [[68288, 68295], 'valid'],
        [[68296, 68296], 'valid', [], 'NV8'],
        [[68297, 68326], 'valid'],
        [[68327, 68330], 'disallowed'],
        [[68331, 68342], 'valid', [], 'NV8'],
        [[68343, 68351], 'disallowed'],
        [[68352, 68405], 'valid'],
        [[68406, 68408], 'disallowed'],
        [[68409, 68415], 'valid', [], 'NV8'],
        [[68416, 68437], 'valid'],
        [[68438, 68439], 'disallowed'],
        [[68440, 68447], 'valid', [], 'NV8'],
        [[68448, 68466], 'valid'],
        [[68467, 68471], 'disallowed'],
        [[68472, 68479], 'valid', [], 'NV8'],
        [[68480, 68497], 'valid'],
        [[68498, 68504], 'disallowed'],
        [[68505, 68508], 'valid', [], 'NV8'],
        [[68509, 68520], 'disallowed'],
        [[68521, 68527], 'valid', [], 'NV8'],
        [[68528, 68607], 'disallowed'],
        [[68608, 68680], 'valid'],
        [[68681, 68735], 'disallowed'],
        [[68736, 68736], 'mapped', [68800]],
        [[68737, 68737], 'mapped', [68801]],
        [[68738, 68738], 'mapped', [68802]],
        [[68739, 68739], 'mapped', [68803]],
        [[68740, 68740], 'mapped', [68804]],
        [[68741, 68741], 'mapped', [68805]],
        [[68742, 68742], 'mapped', [68806]],
        [[68743, 68743], 'mapped', [68807]],
        [[68744, 68744], 'mapped', [68808]],
        [[68745, 68745], 'mapped', [68809]],
        [[68746, 68746], 'mapped', [68810]],
        [[68747, 68747], 'mapped', [68811]],
        [[68748, 68748], 'mapped', [68812]],
        [[68749, 68749], 'mapped', [68813]],
        [[68750, 68750], 'mapped', [68814]],
        [[68751, 68751], 'mapped', [68815]],
        [[68752, 68752], 'mapped', [68816]],
        [[68753, 68753], 'mapped', [68817]],
        [[68754, 68754], 'mapped', [68818]],
        [[68755, 68755], 'mapped', [68819]],
        [[68756, 68756], 'mapped', [68820]],
        [[68757, 68757], 'mapped', [68821]],
        [[68758, 68758], 'mapped', [68822]],
        [[68759, 68759], 'mapped', [68823]],
        [[68760, 68760], 'mapped', [68824]],
        [[68761, 68761], 'mapped', [68825]],
        [[68762, 68762], 'mapped', [68826]],
        [[68763, 68763], 'mapped', [68827]],
        [[68764, 68764], 'mapped', [68828]],
        [[68765, 68765], 'mapped', [68829]],
        [[68766, 68766], 'mapped', [68830]],
        [[68767, 68767], 'mapped', [68831]],
        [[68768, 68768], 'mapped', [68832]],
        [[68769, 68769], 'mapped', [68833]],
        [[68770, 68770], 'mapped', [68834]],
        [[68771, 68771], 'mapped', [68835]],
        [[68772, 68772], 'mapped', [68836]],
        [[68773, 68773], 'mapped', [68837]],
        [[68774, 68774], 'mapped', [68838]],
        [[68775, 68775], 'mapped', [68839]],
        [[68776, 68776], 'mapped', [68840]],
        [[68777, 68777], 'mapped', [68841]],
        [[68778, 68778], 'mapped', [68842]],
        [[68779, 68779], 'mapped', [68843]],
        [[68780, 68780], 'mapped', [68844]],
        [[68781, 68781], 'mapped', [68845]],
        [[68782, 68782], 'mapped', [68846]],
        [[68783, 68783], 'mapped', [68847]],
        [[68784, 68784], 'mapped', [68848]],
        [[68785, 68785], 'mapped', [68849]],
        [[68786, 68786], 'mapped', [68850]],
        [[68787, 68799], 'disallowed'],
        [[68800, 68850], 'valid'],
        [[68851, 68857], 'disallowed'],
        [[68858, 68863], 'valid', [], 'NV8'],
        [[68864, 69215], 'disallowed'],
        [[69216, 69246], 'valid', [], 'NV8'],
        [[69247, 69631], 'disallowed'],
        [[69632, 69702], 'valid'],
        [[69703, 69709], 'valid', [], 'NV8'],
        [[69710, 69713], 'disallowed'],
        [[69714, 69733], 'valid', [], 'NV8'],
        [[69734, 69743], 'valid'],
        [[69744, 69758], 'disallowed'],
        [[69759, 69759], 'valid'],
        [[69760, 69818], 'valid'],
        [[69819, 69820], 'valid', [], 'NV8'],
        [[69821, 69821], 'disallowed'],
        [[69822, 69825], 'valid', [], 'NV8'],
        [[69826, 69839], 'disallowed'],
        [[69840, 69864], 'valid'],
        [[69865, 69871], 'disallowed'],
        [[69872, 69881], 'valid'],
        [[69882, 69887], 'disallowed'],
        [[69888, 69940], 'valid'],
        [[69941, 69941], 'disallowed'],
        [[69942, 69951], 'valid'],
        [[69952, 69955], 'valid', [], 'NV8'],
        [[69956, 69967], 'disallowed'],
        [[69968, 70003], 'valid'],
        [[70004, 70005], 'valid', [], 'NV8'],
        [[70006, 70006], 'valid'],
        [[70007, 70015], 'disallowed'],
        [[70016, 70084], 'valid'],
        [[70085, 70088], 'valid', [], 'NV8'],
        [[70089, 70089], 'valid', [], 'NV8'],
        [[70090, 70092], 'valid'],
        [[70093, 70093], 'valid', [], 'NV8'],
        [[70094, 70095], 'disallowed'],
        [[70096, 70105], 'valid'],
        [[70106, 70106], 'valid'],
        [[70107, 70107], 'valid', [], 'NV8'],
        [[70108, 70108], 'valid'],
        [[70109, 70111], 'valid', [], 'NV8'],
        [[70112, 70112], 'disallowed'],
        [[70113, 70132], 'valid', [], 'NV8'],
        [[70133, 70143], 'disallowed'],
        [[70144, 70161], 'valid'],
        [[70162, 70162], 'disallowed'],
        [[70163, 70199], 'valid'],
        [[70200, 70205], 'valid', [], 'NV8'],
        [[70206, 70271], 'disallowed'],
        [[70272, 70278], 'valid'],
        [[70279, 70279], 'disallowed'],
        [[70280, 70280], 'valid'],
        [[70281, 70281], 'disallowed'],
        [[70282, 70285], 'valid'],
        [[70286, 70286], 'disallowed'],
        [[70287, 70301], 'valid'],
        [[70302, 70302], 'disallowed'],
        [[70303, 70312], 'valid'],
        [[70313, 70313], 'valid', [], 'NV8'],
        [[70314, 70319], 'disallowed'],
        [[70320, 70378], 'valid'],
        [[70379, 70383], 'disallowed'],
        [[70384, 70393], 'valid'],
        [[70394, 70399], 'disallowed'],
        [[70400, 70400], 'valid'],
        [[70401, 70403], 'valid'],
        [[70404, 70404], 'disallowed'],
        [[70405, 70412], 'valid'],
        [[70413, 70414], 'disallowed'],
        [[70415, 70416], 'valid'],
        [[70417, 70418], 'disallowed'],
        [[70419, 70440], 'valid'],
        [[70441, 70441], 'disallowed'],
        [[70442, 70448], 'valid'],
        [[70449, 70449], 'disallowed'],
        [[70450, 70451], 'valid'],
        [[70452, 70452], 'disallowed'],
        [[70453, 70457], 'valid'],
        [[70458, 70459], 'disallowed'],
        [[70460, 70468], 'valid'],
        [[70469, 70470], 'disallowed'],
        [[70471, 70472], 'valid'],
        [[70473, 70474], 'disallowed'],
        [[70475, 70477], 'valid'],
        [[70478, 70479], 'disallowed'],
        [[70480, 70480], 'valid'],
        [[70481, 70486], 'disallowed'],
        [[70487, 70487], 'valid'],
        [[70488, 70492], 'disallowed'],
        [[70493, 70499], 'valid'],
        [[70500, 70501], 'disallowed'],
        [[70502, 70508], 'valid'],
        [[70509, 70511], 'disallowed'],
        [[70512, 70516], 'valid'],
        [[70517, 70783], 'disallowed'],
        [[70784, 70853], 'valid'],
        [[70854, 70854], 'valid', [], 'NV8'],
        [[70855, 70855], 'valid'],
        [[70856, 70863], 'disallowed'],
        [[70864, 70873], 'valid'],
        [[70874, 71039], 'disallowed'],
        [[71040, 71093], 'valid'],
        [[71094, 71095], 'disallowed'],
        [[71096, 71104], 'valid'],
        [[71105, 71113], 'valid', [], 'NV8'],
        [[71114, 71127], 'valid', [], 'NV8'],
        [[71128, 71133], 'valid'],
        [[71134, 71167], 'disallowed'],
        [[71168, 71232], 'valid'],
        [[71233, 71235], 'valid', [], 'NV8'],
        [[71236, 71236], 'valid'],
        [[71237, 71247], 'disallowed'],
        [[71248, 71257], 'valid'],
        [[71258, 71295], 'disallowed'],
        [[71296, 71351], 'valid'],
        [[71352, 71359], 'disallowed'],
        [[71360, 71369], 'valid'],
        [[71370, 71423], 'disallowed'],
        [[71424, 71449], 'valid'],
        [[71450, 71452], 'disallowed'],
        [[71453, 71467], 'valid'],
        [[71468, 71471], 'disallowed'],
        [[71472, 71481], 'valid'],
        [[71482, 71487], 'valid', [], 'NV8'],
        [[71488, 71839], 'disallowed'],
        [[71840, 71840], 'mapped', [71872]],
        [[71841, 71841], 'mapped', [71873]],
        [[71842, 71842], 'mapped', [71874]],
        [[71843, 71843], 'mapped', [71875]],
        [[71844, 71844], 'mapped', [71876]],
        [[71845, 71845], 'mapped', [71877]],
        [[71846, 71846], 'mapped', [71878]],
        [[71847, 71847], 'mapped', [71879]],
        [[71848, 71848], 'mapped', [71880]],
        [[71849, 71849], 'mapped', [71881]],
        [[71850, 71850], 'mapped', [71882]],
        [[71851, 71851], 'mapped', [71883]],
        [[71852, 71852], 'mapped', [71884]],
        [[71853, 71853], 'mapped', [71885]],
        [[71854, 71854], 'mapped', [71886]],
        [[71855, 71855], 'mapped', [71887]],
        [[71856, 71856], 'mapped', [71888]],
        [[71857, 71857], 'mapped', [71889]],
        [[71858, 71858], 'mapped', [71890]],
        [[71859, 71859], 'mapped', [71891]],
        [[71860, 71860], 'mapped', [71892]],
        [[71861, 71861], 'mapped', [71893]],
        [[71862, 71862], 'mapped', [71894]],
        [[71863, 71863], 'mapped', [71895]],
        [[71864, 71864], 'mapped', [71896]],
        [[71865, 71865], 'mapped', [71897]],
        [[71866, 71866], 'mapped', [71898]],
        [[71867, 71867], 'mapped', [71899]],
        [[71868, 71868], 'mapped', [71900]],
        [[71869, 71869], 'mapped', [71901]],
        [[71870, 71870], 'mapped', [71902]],
        [[71871, 71871], 'mapped', [71903]],
        [[71872, 71913], 'valid'],
        [[71914, 71922], 'valid', [], 'NV8'],
        [[71923, 71934], 'disallowed'],
        [[71935, 71935], 'valid'],
        [[71936, 72383], 'disallowed'],
        [[72384, 72440], 'valid'],
        [[72441, 73727], 'disallowed'],
        [[73728, 74606], 'valid'],
        [[74607, 74648], 'valid'],
        [[74649, 74649], 'valid'],
        [[74650, 74751], 'disallowed'],
        [[74752, 74850], 'valid', [], 'NV8'],
        [[74851, 74862], 'valid', [], 'NV8'],
        [[74863, 74863], 'disallowed'],
        [[74864, 74867], 'valid', [], 'NV8'],
        [[74868, 74868], 'valid', [], 'NV8'],
        [[74869, 74879], 'disallowed'],
        [[74880, 75075], 'valid'],
        [[75076, 77823], 'disallowed'],
        [[77824, 78894], 'valid'],
        [[78895, 82943], 'disallowed'],
        [[82944, 83526], 'valid'],
        [[83527, 92159], 'disallowed'],
        [[92160, 92728], 'valid'],
        [[92729, 92735], 'disallowed'],
        [[92736, 92766], 'valid'],
        [[92767, 92767], 'disallowed'],
        [[92768, 92777], 'valid'],
        [[92778, 92781], 'disallowed'],
        [[92782, 92783], 'valid', [], 'NV8'],
        [[92784, 92879], 'disallowed'],
        [[92880, 92909], 'valid'],
        [[92910, 92911], 'disallowed'],
        [[92912, 92916], 'valid'],
        [[92917, 92917], 'valid', [], 'NV8'],
        [[92918, 92927], 'disallowed'],
        [[92928, 92982], 'valid'],
        [[92983, 92991], 'valid', [], 'NV8'],
        [[92992, 92995], 'valid'],
        [[92996, 92997], 'valid', [], 'NV8'],
        [[92998, 93007], 'disallowed'],
        [[93008, 93017], 'valid'],
        [[93018, 93018], 'disallowed'],
        [[93019, 93025], 'valid', [], 'NV8'],
        [[93026, 93026], 'disallowed'],
        [[93027, 93047], 'valid'],
        [[93048, 93052], 'disallowed'],
        [[93053, 93071], 'valid'],
        [[93072, 93951], 'disallowed'],
        [[93952, 94020], 'valid'],
        [[94021, 94031], 'disallowed'],
        [[94032, 94078], 'valid'],
        [[94079, 94094], 'disallowed'],
        [[94095, 94111], 'valid'],
        [[94112, 110591], 'disallowed'],
        [[110592, 110593], 'valid'],
        [[110594, 113663], 'disallowed'],
        [[113664, 113770], 'valid'],
        [[113771, 113775], 'disallowed'],
        [[113776, 113788], 'valid'],
        [[113789, 113791], 'disallowed'],
        [[113792, 113800], 'valid'],
        [[113801, 113807], 'disallowed'],
        [[113808, 113817], 'valid'],
        [[113818, 113819], 'disallowed'],
        [[113820, 113820], 'valid', [], 'NV8'],
        [[113821, 113822], 'valid'],
        [[113823, 113823], 'valid', [], 'NV8'],
        [[113824, 113827], 'ignored'],
        [[113828, 118783], 'disallowed'],
        [[118784, 119029], 'valid', [], 'NV8'],
        [[119030, 119039], 'disallowed'],
        [[119040, 119078], 'valid', [], 'NV8'],
        [[119079, 119080], 'disallowed'],
        [[119081, 119081], 'valid', [], 'NV8'],
        [[119082, 119133], 'valid', [], 'NV8'],
        [[119134, 119134], 'mapped', [119127, 119141]],
        [[119135, 119135], 'mapped', [119128, 119141]],
        [[119136, 119136], 'mapped', [119128, 119141, 119150]],
        [[119137, 119137], 'mapped', [119128, 119141, 119151]],
        [[119138, 119138], 'mapped', [119128, 119141, 119152]],
        [[119139, 119139], 'mapped', [119128, 119141, 119153]],
        [[119140, 119140], 'mapped', [119128, 119141, 119154]],
        [[119141, 119154], 'valid', [], 'NV8'],
        [[119155, 119162], 'disallowed'],
        [[119163, 119226], 'valid', [], 'NV8'],
        [[119227, 119227], 'mapped', [119225, 119141]],
        [[119228, 119228], 'mapped', [119226, 119141]],
        [[119229, 119229], 'mapped', [119225, 119141, 119150]],
        [[119230, 119230], 'mapped', [119226, 119141, 119150]],
        [[119231, 119231], 'mapped', [119225, 119141, 119151]],
        [[119232, 119232], 'mapped', [119226, 119141, 119151]],
        [[119233, 119261], 'valid', [], 'NV8'],
        [[119262, 119272], 'valid', [], 'NV8'],
        [[119273, 119295], 'disallowed'],
        [[119296, 119365], 'valid', [], 'NV8'],
        [[119366, 119551], 'disallowed'],
        [[119552, 119638], 'valid', [], 'NV8'],
        [[119639, 119647], 'disallowed'],
        [[119648, 119665], 'valid', [], 'NV8'],
        [[119666, 119807], 'disallowed'],
        [[119808, 119808], 'mapped', [97]],
        [[119809, 119809], 'mapped', [98]],
        [[119810, 119810], 'mapped', [99]],
        [[119811, 119811], 'mapped', [100]],
        [[119812, 119812], 'mapped', [101]],
        [[119813, 119813], 'mapped', [102]],
        [[119814, 119814], 'mapped', [103]],
        [[119815, 119815], 'mapped', [104]],
        [[119816, 119816], 'mapped', [105]],
        [[119817, 119817], 'mapped', [106]],
        [[119818, 119818], 'mapped', [107]],
        [[119819, 119819], 'mapped', [108]],
        [[119820, 119820], 'mapped', [109]],
        [[119821, 119821], 'mapped', [110]],
        [[119822, 119822], 'mapped', [111]],
        [[119823, 119823], 'mapped', [112]],
        [[119824, 119824], 'mapped', [113]],
        [[119825, 119825], 'mapped', [114]],
        [[119826, 119826], 'mapped', [115]],
        [[119827, 119827], 'mapped', [116]],
        [[119828, 119828], 'mapped', [117]],
        [[119829, 119829], 'mapped', [118]],
        [[119830, 119830], 'mapped', [119]],
        [[119831, 119831], 'mapped', [120]],
        [[119832, 119832], 'mapped', [121]],
        [[119833, 119833], 'mapped', [122]],
        [[119834, 119834], 'mapped', [97]],
        [[119835, 119835], 'mapped', [98]],
        [[119836, 119836], 'mapped', [99]],
        [[119837, 119837], 'mapped', [100]],
        [[119838, 119838], 'mapped', [101]],
        [[119839, 119839], 'mapped', [102]],
        [[119840, 119840], 'mapped', [103]],
        [[119841, 119841], 'mapped', [104]],
        [[119842, 119842], 'mapped', [105]],
        [[119843, 119843], 'mapped', [106]],
        [[119844, 119844], 'mapped', [107]],
        [[119845, 119845], 'mapped', [108]],
        [[119846, 119846], 'mapped', [109]],
        [[119847, 119847], 'mapped', [110]],
        [[119848, 119848], 'mapped', [111]],
        [[119849, 119849], 'mapped', [112]],
        [[119850, 119850], 'mapped', [113]],
        [[119851, 119851], 'mapped', [114]],
        [[119852, 119852], 'mapped', [115]],
        [[119853, 119853], 'mapped', [116]],
        [[119854, 119854], 'mapped', [117]],
        [[119855, 119855], 'mapped', [118]],
        [[119856, 119856], 'mapped', [119]],
        [[119857, 119857], 'mapped', [120]],
        [[119858, 119858], 'mapped', [121]],
        [[119859, 119859], 'mapped', [122]],
        [[119860, 119860], 'mapped', [97]],
        [[119861, 119861], 'mapped', [98]],
        [[119862, 119862], 'mapped', [99]],
        [[119863, 119863], 'mapped', [100]],
        [[119864, 119864], 'mapped', [101]],
        [[119865, 119865], 'mapped', [102]],
        [[119866, 119866], 'mapped', [103]],
        [[119867, 119867], 'mapped', [104]],
        [[119868, 119868], 'mapped', [105]],
        [[119869, 119869], 'mapped', [106]],
        [[119870, 119870], 'mapped', [107]],
        [[119871, 119871], 'mapped', [108]],
        [[119872, 119872], 'mapped', [109]],
        [[119873, 119873], 'mapped', [110]],
        [[119874, 119874], 'mapped', [111]],
        [[119875, 119875], 'mapped', [112]],
        [[119876, 119876], 'mapped', [113]],
        [[119877, 119877], 'mapped', [114]],
        [[119878, 119878], 'mapped', [115]],
        [[119879, 119879], 'mapped', [116]],
        [[119880, 119880], 'mapped', [117]],
        [[119881, 119881], 'mapped', [118]],
        [[119882, 119882], 'mapped', [119]],
        [[119883, 119883], 'mapped', [120]],
        [[119884, 119884], 'mapped', [121]],
        [[119885, 119885], 'mapped', [122]],
        [[119886, 119886], 'mapped', [97]],
        [[119887, 119887], 'mapped', [98]],
        [[119888, 119888], 'mapped', [99]],
        [[119889, 119889], 'mapped', [100]],
        [[119890, 119890], 'mapped', [101]],
        [[119891, 119891], 'mapped', [102]],
        [[119892, 119892], 'mapped', [103]],
        [[119893, 119893], 'disallowed'],
        [[119894, 119894], 'mapped', [105]],
        [[119895, 119895], 'mapped', [106]],
        [[119896, 119896], 'mapped', [107]],
        [[119897, 119897], 'mapped', [108]],
        [[119898, 119898], 'mapped', [109]],
        [[119899, 119899], 'mapped', [110]],
        [[119900, 119900], 'mapped', [111]],
        [[119901, 119901], 'mapped', [112]],
        [[119902, 119902], 'mapped', [113]],
        [[119903, 119903], 'mapped', [114]],
        [[119904, 119904], 'mapped', [115]],
        [[119905, 119905], 'mapped', [116]],
        [[119906, 119906], 'mapped', [117]],
        [[119907, 119907], 'mapped', [118]],
        [[119908, 119908], 'mapped', [119]],
        [[119909, 119909], 'mapped', [120]],
        [[119910, 119910], 'mapped', [121]],
        [[119911, 119911], 'mapped', [122]],
        [[119912, 119912], 'mapped', [97]],
        [[119913, 119913], 'mapped', [98]],
        [[119914, 119914], 'mapped', [99]],
        [[119915, 119915], 'mapped', [100]],
        [[119916, 119916], 'mapped', [101]],
        [[119917, 119917], 'mapped', [102]],
        [[119918, 119918], 'mapped', [103]],
        [[119919, 119919], 'mapped', [104]],
        [[119920, 119920], 'mapped', [105]],
        [[119921, 119921], 'mapped', [106]],
        [[119922, 119922], 'mapped', [107]],
        [[119923, 119923], 'mapped', [108]],
        [[119924, 119924], 'mapped', [109]],
        [[119925, 119925], 'mapped', [110]],
        [[119926, 119926], 'mapped', [111]],
        [[119927, 119927], 'mapped', [112]],
        [[119928, 119928], 'mapped', [113]],
        [[119929, 119929], 'mapped', [114]],
        [[119930, 119930], 'mapped', [115]],
        [[119931, 119931], 'mapped', [116]],
        [[119932, 119932], 'mapped', [117]],
        [[119933, 119933], 'mapped', [118]],
        [[119934, 119934], 'mapped', [119]],
        [[119935, 119935], 'mapped', [120]],
        [[119936, 119936], 'mapped', [121]],
        [[119937, 119937], 'mapped', [122]],
        [[119938, 119938], 'mapped', [97]],
        [[119939, 119939], 'mapped', [98]],
        [[119940, 119940], 'mapped', [99]],
        [[119941, 119941], 'mapped', [100]],
        [[119942, 119942], 'mapped', [101]],
        [[119943, 119943], 'mapped', [102]],
        [[119944, 119944], 'mapped', [103]],
        [[119945, 119945], 'mapped', [104]],
        [[119946, 119946], 'mapped', [105]],
        [[119947, 119947], 'mapped', [106]],
        [[119948, 119948], 'mapped', [107]],
        [[119949, 119949], 'mapped', [108]],
        [[119950, 119950], 'mapped', [109]],
        [[119951, 119951], 'mapped', [110]],
        [[119952, 119952], 'mapped', [111]],
        [[119953, 119953], 'mapped', [112]],
        [[119954, 119954], 'mapped', [113]],
        [[119955, 119955], 'mapped', [114]],
        [[119956, 119956], 'mapped', [115]],
        [[119957, 119957], 'mapped', [116]],
        [[119958, 119958], 'mapped', [117]],
        [[119959, 119959], 'mapped', [118]],
        [[119960, 119960], 'mapped', [119]],
        [[119961, 119961], 'mapped', [120]],
        [[119962, 119962], 'mapped', [121]],
        [[119963, 119963], 'mapped', [122]],
        [[119964, 119964], 'mapped', [97]],
        [[119965, 119965], 'disallowed'],
        [[119966, 119966], 'mapped', [99]],
        [[119967, 119967], 'mapped', [100]],
        [[119968, 119969], 'disallowed'],
        [[119970, 119970], 'mapped', [103]],
        [[119971, 119972], 'disallowed'],
        [[119973, 119973], 'mapped', [106]],
        [[119974, 119974], 'mapped', [107]],
        [[119975, 119976], 'disallowed'],
        [[119977, 119977], 'mapped', [110]],
        [[119978, 119978], 'mapped', [111]],
        [[119979, 119979], 'mapped', [112]],
        [[119980, 119980], 'mapped', [113]],
        [[119981, 119981], 'disallowed'],
        [[119982, 119982], 'mapped', [115]],
        [[119983, 119983], 'mapped', [116]],
        [[119984, 119984], 'mapped', [117]],
        [[119985, 119985], 'mapped', [118]],
        [[119986, 119986], 'mapped', [119]],
        [[119987, 119987], 'mapped', [120]],
        [[119988, 119988], 'mapped', [121]],
        [[119989, 119989], 'mapped', [122]],
        [[119990, 119990], 'mapped', [97]],
        [[119991, 119991], 'mapped', [98]],
        [[119992, 119992], 'mapped', [99]],
        [[119993, 119993], 'mapped', [100]],
        [[119994, 119994], 'disallowed'],
        [[119995, 119995], 'mapped', [102]],
        [[119996, 119996], 'disallowed'],
        [[119997, 119997], 'mapped', [104]],
        [[119998, 119998], 'mapped', [105]],
        [[119999, 119999], 'mapped', [106]],
        [[12e4, 12e4], 'mapped', [107]],
        [[120001, 120001], 'mapped', [108]],
        [[120002, 120002], 'mapped', [109]],
        [[120003, 120003], 'mapped', [110]],
        [[120004, 120004], 'disallowed'],
        [[120005, 120005], 'mapped', [112]],
        [[120006, 120006], 'mapped', [113]],
        [[120007, 120007], 'mapped', [114]],
        [[120008, 120008], 'mapped', [115]],
        [[120009, 120009], 'mapped', [116]],
        [[120010, 120010], 'mapped', [117]],
        [[120011, 120011], 'mapped', [118]],
        [[120012, 120012], 'mapped', [119]],
        [[120013, 120013], 'mapped', [120]],
        [[120014, 120014], 'mapped', [121]],
        [[120015, 120015], 'mapped', [122]],
        [[120016, 120016], 'mapped', [97]],
        [[120017, 120017], 'mapped', [98]],
        [[120018, 120018], 'mapped', [99]],
        [[120019, 120019], 'mapped', [100]],
        [[120020, 120020], 'mapped', [101]],
        [[120021, 120021], 'mapped', [102]],
        [[120022, 120022], 'mapped', [103]],
        [[120023, 120023], 'mapped', [104]],
        [[120024, 120024], 'mapped', [105]],
        [[120025, 120025], 'mapped', [106]],
        [[120026, 120026], 'mapped', [107]],
        [[120027, 120027], 'mapped', [108]],
        [[120028, 120028], 'mapped', [109]],
        [[120029, 120029], 'mapped', [110]],
        [[120030, 120030], 'mapped', [111]],
        [[120031, 120031], 'mapped', [112]],
        [[120032, 120032], 'mapped', [113]],
        [[120033, 120033], 'mapped', [114]],
        [[120034, 120034], 'mapped', [115]],
        [[120035, 120035], 'mapped', [116]],
        [[120036, 120036], 'mapped', [117]],
        [[120037, 120037], 'mapped', [118]],
        [[120038, 120038], 'mapped', [119]],
        [[120039, 120039], 'mapped', [120]],
        [[120040, 120040], 'mapped', [121]],
        [[120041, 120041], 'mapped', [122]],
        [[120042, 120042], 'mapped', [97]],
        [[120043, 120043], 'mapped', [98]],
        [[120044, 120044], 'mapped', [99]],
        [[120045, 120045], 'mapped', [100]],
        [[120046, 120046], 'mapped', [101]],
        [[120047, 120047], 'mapped', [102]],
        [[120048, 120048], 'mapped', [103]],
        [[120049, 120049], 'mapped', [104]],
        [[120050, 120050], 'mapped', [105]],
        [[120051, 120051], 'mapped', [106]],
        [[120052, 120052], 'mapped', [107]],
        [[120053, 120053], 'mapped', [108]],
        [[120054, 120054], 'mapped', [109]],
        [[120055, 120055], 'mapped', [110]],
        [[120056, 120056], 'mapped', [111]],
        [[120057, 120057], 'mapped', [112]],
        [[120058, 120058], 'mapped', [113]],
        [[120059, 120059], 'mapped', [114]],
        [[120060, 120060], 'mapped', [115]],
        [[120061, 120061], 'mapped', [116]],
        [[120062, 120062], 'mapped', [117]],
        [[120063, 120063], 'mapped', [118]],
        [[120064, 120064], 'mapped', [119]],
        [[120065, 120065], 'mapped', [120]],
        [[120066, 120066], 'mapped', [121]],
        [[120067, 120067], 'mapped', [122]],
        [[120068, 120068], 'mapped', [97]],
        [[120069, 120069], 'mapped', [98]],
        [[120070, 120070], 'disallowed'],
        [[120071, 120071], 'mapped', [100]],
        [[120072, 120072], 'mapped', [101]],
        [[120073, 120073], 'mapped', [102]],
        [[120074, 120074], 'mapped', [103]],
        [[120075, 120076], 'disallowed'],
        [[120077, 120077], 'mapped', [106]],
        [[120078, 120078], 'mapped', [107]],
        [[120079, 120079], 'mapped', [108]],
        [[120080, 120080], 'mapped', [109]],
        [[120081, 120081], 'mapped', [110]],
        [[120082, 120082], 'mapped', [111]],
        [[120083, 120083], 'mapped', [112]],
        [[120084, 120084], 'mapped', [113]],
        [[120085, 120085], 'disallowed'],
        [[120086, 120086], 'mapped', [115]],
        [[120087, 120087], 'mapped', [116]],
        [[120088, 120088], 'mapped', [117]],
        [[120089, 120089], 'mapped', [118]],
        [[120090, 120090], 'mapped', [119]],
        [[120091, 120091], 'mapped', [120]],
        [[120092, 120092], 'mapped', [121]],
        [[120093, 120093], 'disallowed'],
        [[120094, 120094], 'mapped', [97]],
        [[120095, 120095], 'mapped', [98]],
        [[120096, 120096], 'mapped', [99]],
        [[120097, 120097], 'mapped', [100]],
        [[120098, 120098], 'mapped', [101]],
        [[120099, 120099], 'mapped', [102]],
        [[120100, 120100], 'mapped', [103]],
        [[120101, 120101], 'mapped', [104]],
        [[120102, 120102], 'mapped', [105]],
        [[120103, 120103], 'mapped', [106]],
        [[120104, 120104], 'mapped', [107]],
        [[120105, 120105], 'mapped', [108]],
        [[120106, 120106], 'mapped', [109]],
        [[120107, 120107], 'mapped', [110]],
        [[120108, 120108], 'mapped', [111]],
        [[120109, 120109], 'mapped', [112]],
        [[120110, 120110], 'mapped', [113]],
        [[120111, 120111], 'mapped', [114]],
        [[120112, 120112], 'mapped', [115]],
        [[120113, 120113], 'mapped', [116]],
        [[120114, 120114], 'mapped', [117]],
        [[120115, 120115], 'mapped', [118]],
        [[120116, 120116], 'mapped', [119]],
        [[120117, 120117], 'mapped', [120]],
        [[120118, 120118], 'mapped', [121]],
        [[120119, 120119], 'mapped', [122]],
        [[120120, 120120], 'mapped', [97]],
        [[120121, 120121], 'mapped', [98]],
        [[120122, 120122], 'disallowed'],
        [[120123, 120123], 'mapped', [100]],
        [[120124, 120124], 'mapped', [101]],
        [[120125, 120125], 'mapped', [102]],
        [[120126, 120126], 'mapped', [103]],
        [[120127, 120127], 'disallowed'],
        [[120128, 120128], 'mapped', [105]],
        [[120129, 120129], 'mapped', [106]],
        [[120130, 120130], 'mapped', [107]],
        [[120131, 120131], 'mapped', [108]],
        [[120132, 120132], 'mapped', [109]],
        [[120133, 120133], 'disallowed'],
        [[120134, 120134], 'mapped', [111]],
        [[120135, 120137], 'disallowed'],
        [[120138, 120138], 'mapped', [115]],
        [[120139, 120139], 'mapped', [116]],
        [[120140, 120140], 'mapped', [117]],
        [[120141, 120141], 'mapped', [118]],
        [[120142, 120142], 'mapped', [119]],
        [[120143, 120143], 'mapped', [120]],
        [[120144, 120144], 'mapped', [121]],
        [[120145, 120145], 'disallowed'],
        [[120146, 120146], 'mapped', [97]],
        [[120147, 120147], 'mapped', [98]],
        [[120148, 120148], 'mapped', [99]],
        [[120149, 120149], 'mapped', [100]],
        [[120150, 120150], 'mapped', [101]],
        [[120151, 120151], 'mapped', [102]],
        [[120152, 120152], 'mapped', [103]],
        [[120153, 120153], 'mapped', [104]],
        [[120154, 120154], 'mapped', [105]],
        [[120155, 120155], 'mapped', [106]],
        [[120156, 120156], 'mapped', [107]],
        [[120157, 120157], 'mapped', [108]],
        [[120158, 120158], 'mapped', [109]],
        [[120159, 120159], 'mapped', [110]],
        [[120160, 120160], 'mapped', [111]],
        [[120161, 120161], 'mapped', [112]],
        [[120162, 120162], 'mapped', [113]],
        [[120163, 120163], 'mapped', [114]],
        [[120164, 120164], 'mapped', [115]],
        [[120165, 120165], 'mapped', [116]],
        [[120166, 120166], 'mapped', [117]],
        [[120167, 120167], 'mapped', [118]],
        [[120168, 120168], 'mapped', [119]],
        [[120169, 120169], 'mapped', [120]],
        [[120170, 120170], 'mapped', [121]],
        [[120171, 120171], 'mapped', [122]],
        [[120172, 120172], 'mapped', [97]],
        [[120173, 120173], 'mapped', [98]],
        [[120174, 120174], 'mapped', [99]],
        [[120175, 120175], 'mapped', [100]],
        [[120176, 120176], 'mapped', [101]],
        [[120177, 120177], 'mapped', [102]],
        [[120178, 120178], 'mapped', [103]],
        [[120179, 120179], 'mapped', [104]],
        [[120180, 120180], 'mapped', [105]],
        [[120181, 120181], 'mapped', [106]],
        [[120182, 120182], 'mapped', [107]],
        [[120183, 120183], 'mapped', [108]],
        [[120184, 120184], 'mapped', [109]],
        [[120185, 120185], 'mapped', [110]],
        [[120186, 120186], 'mapped', [111]],
        [[120187, 120187], 'mapped', [112]],
        [[120188, 120188], 'mapped', [113]],
        [[120189, 120189], 'mapped', [114]],
        [[120190, 120190], 'mapped', [115]],
        [[120191, 120191], 'mapped', [116]],
        [[120192, 120192], 'mapped', [117]],
        [[120193, 120193], 'mapped', [118]],
        [[120194, 120194], 'mapped', [119]],
        [[120195, 120195], 'mapped', [120]],
        [[120196, 120196], 'mapped', [121]],
        [[120197, 120197], 'mapped', [122]],
        [[120198, 120198], 'mapped', [97]],
        [[120199, 120199], 'mapped', [98]],
        [[120200, 120200], 'mapped', [99]],
        [[120201, 120201], 'mapped', [100]],
        [[120202, 120202], 'mapped', [101]],
        [[120203, 120203], 'mapped', [102]],
        [[120204, 120204], 'mapped', [103]],
        [[120205, 120205], 'mapped', [104]],
        [[120206, 120206], 'mapped', [105]],
        [[120207, 120207], 'mapped', [106]],
        [[120208, 120208], 'mapped', [107]],
        [[120209, 120209], 'mapped', [108]],
        [[120210, 120210], 'mapped', [109]],
        [[120211, 120211], 'mapped', [110]],
        [[120212, 120212], 'mapped', [111]],
        [[120213, 120213], 'mapped', [112]],
        [[120214, 120214], 'mapped', [113]],
        [[120215, 120215], 'mapped', [114]],
        [[120216, 120216], 'mapped', [115]],
        [[120217, 120217], 'mapped', [116]],
        [[120218, 120218], 'mapped', [117]],
        [[120219, 120219], 'mapped', [118]],
        [[120220, 120220], 'mapped', [119]],
        [[120221, 120221], 'mapped', [120]],
        [[120222, 120222], 'mapped', [121]],
        [[120223, 120223], 'mapped', [122]],
        [[120224, 120224], 'mapped', [97]],
        [[120225, 120225], 'mapped', [98]],
        [[120226, 120226], 'mapped', [99]],
        [[120227, 120227], 'mapped', [100]],
        [[120228, 120228], 'mapped', [101]],
        [[120229, 120229], 'mapped', [102]],
        [[120230, 120230], 'mapped', [103]],
        [[120231, 120231], 'mapped', [104]],
        [[120232, 120232], 'mapped', [105]],
        [[120233, 120233], 'mapped', [106]],
        [[120234, 120234], 'mapped', [107]],
        [[120235, 120235], 'mapped', [108]],
        [[120236, 120236], 'mapped', [109]],
        [[120237, 120237], 'mapped', [110]],
        [[120238, 120238], 'mapped', [111]],
        [[120239, 120239], 'mapped', [112]],
        [[120240, 120240], 'mapped', [113]],
        [[120241, 120241], 'mapped', [114]],
        [[120242, 120242], 'mapped', [115]],
        [[120243, 120243], 'mapped', [116]],
        [[120244, 120244], 'mapped', [117]],
        [[120245, 120245], 'mapped', [118]],
        [[120246, 120246], 'mapped', [119]],
        [[120247, 120247], 'mapped', [120]],
        [[120248, 120248], 'mapped', [121]],
        [[120249, 120249], 'mapped', [122]],
        [[120250, 120250], 'mapped', [97]],
        [[120251, 120251], 'mapped', [98]],
        [[120252, 120252], 'mapped', [99]],
        [[120253, 120253], 'mapped', [100]],
        [[120254, 120254], 'mapped', [101]],
        [[120255, 120255], 'mapped', [102]],
        [[120256, 120256], 'mapped', [103]],
        [[120257, 120257], 'mapped', [104]],
        [[120258, 120258], 'mapped', [105]],
        [[120259, 120259], 'mapped', [106]],
        [[120260, 120260], 'mapped', [107]],
        [[120261, 120261], 'mapped', [108]],
        [[120262, 120262], 'mapped', [109]],
        [[120263, 120263], 'mapped', [110]],
        [[120264, 120264], 'mapped', [111]],
        [[120265, 120265], 'mapped', [112]],
        [[120266, 120266], 'mapped', [113]],
        [[120267, 120267], 'mapped', [114]],
        [[120268, 120268], 'mapped', [115]],
        [[120269, 120269], 'mapped', [116]],
        [[120270, 120270], 'mapped', [117]],
        [[120271, 120271], 'mapped', [118]],
        [[120272, 120272], 'mapped', [119]],
        [[120273, 120273], 'mapped', [120]],
        [[120274, 120274], 'mapped', [121]],
        [[120275, 120275], 'mapped', [122]],
        [[120276, 120276], 'mapped', [97]],
        [[120277, 120277], 'mapped', [98]],
        [[120278, 120278], 'mapped', [99]],
        [[120279, 120279], 'mapped', [100]],
        [[120280, 120280], 'mapped', [101]],
        [[120281, 120281], 'mapped', [102]],
        [[120282, 120282], 'mapped', [103]],
        [[120283, 120283], 'mapped', [104]],
        [[120284, 120284], 'mapped', [105]],
        [[120285, 120285], 'mapped', [106]],
        [[120286, 120286], 'mapped', [107]],
        [[120287, 120287], 'mapped', [108]],
        [[120288, 120288], 'mapped', [109]],
        [[120289, 120289], 'mapped', [110]],
        [[120290, 120290], 'mapped', [111]],
        [[120291, 120291], 'mapped', [112]],
        [[120292, 120292], 'mapped', [113]],
        [[120293, 120293], 'mapped', [114]],
        [[120294, 120294], 'mapped', [115]],
        [[120295, 120295], 'mapped', [116]],
        [[120296, 120296], 'mapped', [117]],
        [[120297, 120297], 'mapped', [118]],
        [[120298, 120298], 'mapped', [119]],
        [[120299, 120299], 'mapped', [120]],
        [[120300, 120300], 'mapped', [121]],
        [[120301, 120301], 'mapped', [122]],
        [[120302, 120302], 'mapped', [97]],
        [[120303, 120303], 'mapped', [98]],
        [[120304, 120304], 'mapped', [99]],
        [[120305, 120305], 'mapped', [100]],
        [[120306, 120306], 'mapped', [101]],
        [[120307, 120307], 'mapped', [102]],
        [[120308, 120308], 'mapped', [103]],
        [[120309, 120309], 'mapped', [104]],
        [[120310, 120310], 'mapped', [105]],
        [[120311, 120311], 'mapped', [106]],
        [[120312, 120312], 'mapped', [107]],
        [[120313, 120313], 'mapped', [108]],
        [[120314, 120314], 'mapped', [109]],
        [[120315, 120315], 'mapped', [110]],
        [[120316, 120316], 'mapped', [111]],
        [[120317, 120317], 'mapped', [112]],
        [[120318, 120318], 'mapped', [113]],
        [[120319, 120319], 'mapped', [114]],
        [[120320, 120320], 'mapped', [115]],
        [[120321, 120321], 'mapped', [116]],
        [[120322, 120322], 'mapped', [117]],
        [[120323, 120323], 'mapped', [118]],
        [[120324, 120324], 'mapped', [119]],
        [[120325, 120325], 'mapped', [120]],
        [[120326, 120326], 'mapped', [121]],
        [[120327, 120327], 'mapped', [122]],
        [[120328, 120328], 'mapped', [97]],
        [[120329, 120329], 'mapped', [98]],
        [[120330, 120330], 'mapped', [99]],
        [[120331, 120331], 'mapped', [100]],
        [[120332, 120332], 'mapped', [101]],
        [[120333, 120333], 'mapped', [102]],
        [[120334, 120334], 'mapped', [103]],
        [[120335, 120335], 'mapped', [104]],
        [[120336, 120336], 'mapped', [105]],
        [[120337, 120337], 'mapped', [106]],
        [[120338, 120338], 'mapped', [107]],
        [[120339, 120339], 'mapped', [108]],
        [[120340, 120340], 'mapped', [109]],
        [[120341, 120341], 'mapped', [110]],
        [[120342, 120342], 'mapped', [111]],
        [[120343, 120343], 'mapped', [112]],
        [[120344, 120344], 'mapped', [113]],
        [[120345, 120345], 'mapped', [114]],
        [[120346, 120346], 'mapped', [115]],
        [[120347, 120347], 'mapped', [116]],
        [[120348, 120348], 'mapped', [117]],
        [[120349, 120349], 'mapped', [118]],
        [[120350, 120350], 'mapped', [119]],
        [[120351, 120351], 'mapped', [120]],
        [[120352, 120352], 'mapped', [121]],
        [[120353, 120353], 'mapped', [122]],
        [[120354, 120354], 'mapped', [97]],
        [[120355, 120355], 'mapped', [98]],
        [[120356, 120356], 'mapped', [99]],
        [[120357, 120357], 'mapped', [100]],
        [[120358, 120358], 'mapped', [101]],
        [[120359, 120359], 'mapped', [102]],
        [[120360, 120360], 'mapped', [103]],
        [[120361, 120361], 'mapped', [104]],
        [[120362, 120362], 'mapped', [105]],
        [[120363, 120363], 'mapped', [106]],
        [[120364, 120364], 'mapped', [107]],
        [[120365, 120365], 'mapped', [108]],
        [[120366, 120366], 'mapped', [109]],
        [[120367, 120367], 'mapped', [110]],
        [[120368, 120368], 'mapped', [111]],
        [[120369, 120369], 'mapped', [112]],
        [[120370, 120370], 'mapped', [113]],
        [[120371, 120371], 'mapped', [114]],
        [[120372, 120372], 'mapped', [115]],
        [[120373, 120373], 'mapped', [116]],
        [[120374, 120374], 'mapped', [117]],
        [[120375, 120375], 'mapped', [118]],
        [[120376, 120376], 'mapped', [119]],
        [[120377, 120377], 'mapped', [120]],
        [[120378, 120378], 'mapped', [121]],
        [[120379, 120379], 'mapped', [122]],
        [[120380, 120380], 'mapped', [97]],
        [[120381, 120381], 'mapped', [98]],
        [[120382, 120382], 'mapped', [99]],
        [[120383, 120383], 'mapped', [100]],
        [[120384, 120384], 'mapped', [101]],
        [[120385, 120385], 'mapped', [102]],
        [[120386, 120386], 'mapped', [103]],
        [[120387, 120387], 'mapped', [104]],
        [[120388, 120388], 'mapped', [105]],
        [[120389, 120389], 'mapped', [106]],
        [[120390, 120390], 'mapped', [107]],
        [[120391, 120391], 'mapped', [108]],
        [[120392, 120392], 'mapped', [109]],
        [[120393, 120393], 'mapped', [110]],
        [[120394, 120394], 'mapped', [111]],
        [[120395, 120395], 'mapped', [112]],
        [[120396, 120396], 'mapped', [113]],
        [[120397, 120397], 'mapped', [114]],
        [[120398, 120398], 'mapped', [115]],
        [[120399, 120399], 'mapped', [116]],
        [[120400, 120400], 'mapped', [117]],
        [[120401, 120401], 'mapped', [118]],
        [[120402, 120402], 'mapped', [119]],
        [[120403, 120403], 'mapped', [120]],
        [[120404, 120404], 'mapped', [121]],
        [[120405, 120405], 'mapped', [122]],
        [[120406, 120406], 'mapped', [97]],
        [[120407, 120407], 'mapped', [98]],
        [[120408, 120408], 'mapped', [99]],
        [[120409, 120409], 'mapped', [100]],
        [[120410, 120410], 'mapped', [101]],
        [[120411, 120411], 'mapped', [102]],
        [[120412, 120412], 'mapped', [103]],
        [[120413, 120413], 'mapped', [104]],
        [[120414, 120414], 'mapped', [105]],
        [[120415, 120415], 'mapped', [106]],
        [[120416, 120416], 'mapped', [107]],
        [[120417, 120417], 'mapped', [108]],
        [[120418, 120418], 'mapped', [109]],
        [[120419, 120419], 'mapped', [110]],
        [[120420, 120420], 'mapped', [111]],
        [[120421, 120421], 'mapped', [112]],
        [[120422, 120422], 'mapped', [113]],
        [[120423, 120423], 'mapped', [114]],
        [[120424, 120424], 'mapped', [115]],
        [[120425, 120425], 'mapped', [116]],
        [[120426, 120426], 'mapped', [117]],
        [[120427, 120427], 'mapped', [118]],
        [[120428, 120428], 'mapped', [119]],
        [[120429, 120429], 'mapped', [120]],
        [[120430, 120430], 'mapped', [121]],
        [[120431, 120431], 'mapped', [122]],
        [[120432, 120432], 'mapped', [97]],
        [[120433, 120433], 'mapped', [98]],
        [[120434, 120434], 'mapped', [99]],
        [[120435, 120435], 'mapped', [100]],
        [[120436, 120436], 'mapped', [101]],
        [[120437, 120437], 'mapped', [102]],
        [[120438, 120438], 'mapped', [103]],
        [[120439, 120439], 'mapped', [104]],
        [[120440, 120440], 'mapped', [105]],
        [[120441, 120441], 'mapped', [106]],
        [[120442, 120442], 'mapped', [107]],
        [[120443, 120443], 'mapped', [108]],
        [[120444, 120444], 'mapped', [109]],
        [[120445, 120445], 'mapped', [110]],
        [[120446, 120446], 'mapped', [111]],
        [[120447, 120447], 'mapped', [112]],
        [[120448, 120448], 'mapped', [113]],
        [[120449, 120449], 'mapped', [114]],
        [[120450, 120450], 'mapped', [115]],
        [[120451, 120451], 'mapped', [116]],
        [[120452, 120452], 'mapped', [117]],
        [[120453, 120453], 'mapped', [118]],
        [[120454, 120454], 'mapped', [119]],
        [[120455, 120455], 'mapped', [120]],
        [[120456, 120456], 'mapped', [121]],
        [[120457, 120457], 'mapped', [122]],
        [[120458, 120458], 'mapped', [97]],
        [[120459, 120459], 'mapped', [98]],
        [[120460, 120460], 'mapped', [99]],
        [[120461, 120461], 'mapped', [100]],
        [[120462, 120462], 'mapped', [101]],
        [[120463, 120463], 'mapped', [102]],
        [[120464, 120464], 'mapped', [103]],
        [[120465, 120465], 'mapped', [104]],
        [[120466, 120466], 'mapped', [105]],
        [[120467, 120467], 'mapped', [106]],
        [[120468, 120468], 'mapped', [107]],
        [[120469, 120469], 'mapped', [108]],
        [[120470, 120470], 'mapped', [109]],
        [[120471, 120471], 'mapped', [110]],
        [[120472, 120472], 'mapped', [111]],
        [[120473, 120473], 'mapped', [112]],
        [[120474, 120474], 'mapped', [113]],
        [[120475, 120475], 'mapped', [114]],
        [[120476, 120476], 'mapped', [115]],
        [[120477, 120477], 'mapped', [116]],
        [[120478, 120478], 'mapped', [117]],
        [[120479, 120479], 'mapped', [118]],
        [[120480, 120480], 'mapped', [119]],
        [[120481, 120481], 'mapped', [120]],
        [[120482, 120482], 'mapped', [121]],
        [[120483, 120483], 'mapped', [122]],
        [[120484, 120484], 'mapped', [305]],
        [[120485, 120485], 'mapped', [567]],
        [[120486, 120487], 'disallowed'],
        [[120488, 120488], 'mapped', [945]],
        [[120489, 120489], 'mapped', [946]],
        [[120490, 120490], 'mapped', [947]],
        [[120491, 120491], 'mapped', [948]],
        [[120492, 120492], 'mapped', [949]],
        [[120493, 120493], 'mapped', [950]],
        [[120494, 120494], 'mapped', [951]],
        [[120495, 120495], 'mapped', [952]],
        [[120496, 120496], 'mapped', [953]],
        [[120497, 120497], 'mapped', [954]],
        [[120498, 120498], 'mapped', [955]],
        [[120499, 120499], 'mapped', [956]],
        [[120500, 120500], 'mapped', [957]],
        [[120501, 120501], 'mapped', [958]],
        [[120502, 120502], 'mapped', [959]],
        [[120503, 120503], 'mapped', [960]],
        [[120504, 120504], 'mapped', [961]],
        [[120505, 120505], 'mapped', [952]],
        [[120506, 120506], 'mapped', [963]],
        [[120507, 120507], 'mapped', [964]],
        [[120508, 120508], 'mapped', [965]],
        [[120509, 120509], 'mapped', [966]],
        [[120510, 120510], 'mapped', [967]],
        [[120511, 120511], 'mapped', [968]],
        [[120512, 120512], 'mapped', [969]],
        [[120513, 120513], 'mapped', [8711]],
        [[120514, 120514], 'mapped', [945]],
        [[120515, 120515], 'mapped', [946]],
        [[120516, 120516], 'mapped', [947]],
        [[120517, 120517], 'mapped', [948]],
        [[120518, 120518], 'mapped', [949]],
        [[120519, 120519], 'mapped', [950]],
        [[120520, 120520], 'mapped', [951]],
        [[120521, 120521], 'mapped', [952]],
        [[120522, 120522], 'mapped', [953]],
        [[120523, 120523], 'mapped', [954]],
        [[120524, 120524], 'mapped', [955]],
        [[120525, 120525], 'mapped', [956]],
        [[120526, 120526], 'mapped', [957]],
        [[120527, 120527], 'mapped', [958]],
        [[120528, 120528], 'mapped', [959]],
        [[120529, 120529], 'mapped', [960]],
        [[120530, 120530], 'mapped', [961]],
        [[120531, 120532], 'mapped', [963]],
        [[120533, 120533], 'mapped', [964]],
        [[120534, 120534], 'mapped', [965]],
        [[120535, 120535], 'mapped', [966]],
        [[120536, 120536], 'mapped', [967]],
        [[120537, 120537], 'mapped', [968]],
        [[120538, 120538], 'mapped', [969]],
        [[120539, 120539], 'mapped', [8706]],
        [[120540, 120540], 'mapped', [949]],
        [[120541, 120541], 'mapped', [952]],
        [[120542, 120542], 'mapped', [954]],
        [[120543, 120543], 'mapped', [966]],
        [[120544, 120544], 'mapped', [961]],
        [[120545, 120545], 'mapped', [960]],
        [[120546, 120546], 'mapped', [945]],
        [[120547, 120547], 'mapped', [946]],
        [[120548, 120548], 'mapped', [947]],
        [[120549, 120549], 'mapped', [948]],
        [[120550, 120550], 'mapped', [949]],
        [[120551, 120551], 'mapped', [950]],
        [[120552, 120552], 'mapped', [951]],
        [[120553, 120553], 'mapped', [952]],
        [[120554, 120554], 'mapped', [953]],
        [[120555, 120555], 'mapped', [954]],
        [[120556, 120556], 'mapped', [955]],
        [[120557, 120557], 'mapped', [956]],
        [[120558, 120558], 'mapped', [957]],
        [[120559, 120559], 'mapped', [958]],
        [[120560, 120560], 'mapped', [959]],
        [[120561, 120561], 'mapped', [960]],
        [[120562, 120562], 'mapped', [961]],
        [[120563, 120563], 'mapped', [952]],
        [[120564, 120564], 'mapped', [963]],
        [[120565, 120565], 'mapped', [964]],
        [[120566, 120566], 'mapped', [965]],
        [[120567, 120567], 'mapped', [966]],
        [[120568, 120568], 'mapped', [967]],
        [[120569, 120569], 'mapped', [968]],
        [[120570, 120570], 'mapped', [969]],
        [[120571, 120571], 'mapped', [8711]],
        [[120572, 120572], 'mapped', [945]],
        [[120573, 120573], 'mapped', [946]],
        [[120574, 120574], 'mapped', [947]],
        [[120575, 120575], 'mapped', [948]],
        [[120576, 120576], 'mapped', [949]],
        [[120577, 120577], 'mapped', [950]],
        [[120578, 120578], 'mapped', [951]],
        [[120579, 120579], 'mapped', [952]],
        [[120580, 120580], 'mapped', [953]],
        [[120581, 120581], 'mapped', [954]],
        [[120582, 120582], 'mapped', [955]],
        [[120583, 120583], 'mapped', [956]],
        [[120584, 120584], 'mapped', [957]],
        [[120585, 120585], 'mapped', [958]],
        [[120586, 120586], 'mapped', [959]],
        [[120587, 120587], 'mapped', [960]],
        [[120588, 120588], 'mapped', [961]],
        [[120589, 120590], 'mapped', [963]],
        [[120591, 120591], 'mapped', [964]],
        [[120592, 120592], 'mapped', [965]],
        [[120593, 120593], 'mapped', [966]],
        [[120594, 120594], 'mapped', [967]],
        [[120595, 120595], 'mapped', [968]],
        [[120596, 120596], 'mapped', [969]],
        [[120597, 120597], 'mapped', [8706]],
        [[120598, 120598], 'mapped', [949]],
        [[120599, 120599], 'mapped', [952]],
        [[120600, 120600], 'mapped', [954]],
        [[120601, 120601], 'mapped', [966]],
        [[120602, 120602], 'mapped', [961]],
        [[120603, 120603], 'mapped', [960]],
        [[120604, 120604], 'mapped', [945]],
        [[120605, 120605], 'mapped', [946]],
        [[120606, 120606], 'mapped', [947]],
        [[120607, 120607], 'mapped', [948]],
        [[120608, 120608], 'mapped', [949]],
        [[120609, 120609], 'mapped', [950]],
        [[120610, 120610], 'mapped', [951]],
        [[120611, 120611], 'mapped', [952]],
        [[120612, 120612], 'mapped', [953]],
        [[120613, 120613], 'mapped', [954]],
        [[120614, 120614], 'mapped', [955]],
        [[120615, 120615], 'mapped', [956]],
        [[120616, 120616], 'mapped', [957]],
        [[120617, 120617], 'mapped', [958]],
        [[120618, 120618], 'mapped', [959]],
        [[120619, 120619], 'mapped', [960]],
        [[120620, 120620], 'mapped', [961]],
        [[120621, 120621], 'mapped', [952]],
        [[120622, 120622], 'mapped', [963]],
        [[120623, 120623], 'mapped', [964]],
        [[120624, 120624], 'mapped', [965]],
        [[120625, 120625], 'mapped', [966]],
        [[120626, 120626], 'mapped', [967]],
        [[120627, 120627], 'mapped', [968]],
        [[120628, 120628], 'mapped', [969]],
        [[120629, 120629], 'mapped', [8711]],
        [[120630, 120630], 'mapped', [945]],
        [[120631, 120631], 'mapped', [946]],
        [[120632, 120632], 'mapped', [947]],
        [[120633, 120633], 'mapped', [948]],
        [[120634, 120634], 'mapped', [949]],
        [[120635, 120635], 'mapped', [950]],
        [[120636, 120636], 'mapped', [951]],
        [[120637, 120637], 'mapped', [952]],
        [[120638, 120638], 'mapped', [953]],
        [[120639, 120639], 'mapped', [954]],
        [[120640, 120640], 'mapped', [955]],
        [[120641, 120641], 'mapped', [956]],
        [[120642, 120642], 'mapped', [957]],
        [[120643, 120643], 'mapped', [958]],
        [[120644, 120644], 'mapped', [959]],
        [[120645, 120645], 'mapped', [960]],
        [[120646, 120646], 'mapped', [961]],
        [[120647, 120648], 'mapped', [963]],
        [[120649, 120649], 'mapped', [964]],
        [[120650, 120650], 'mapped', [965]],
        [[120651, 120651], 'mapped', [966]],
        [[120652, 120652], 'mapped', [967]],
        [[120653, 120653], 'mapped', [968]],
        [[120654, 120654], 'mapped', [969]],
        [[120655, 120655], 'mapped', [8706]],
        [[120656, 120656], 'mapped', [949]],
        [[120657, 120657], 'mapped', [952]],
        [[120658, 120658], 'mapped', [954]],
        [[120659, 120659], 'mapped', [966]],
        [[120660, 120660], 'mapped', [961]],
        [[120661, 120661], 'mapped', [960]],
        [[120662, 120662], 'mapped', [945]],
        [[120663, 120663], 'mapped', [946]],
        [[120664, 120664], 'mapped', [947]],
        [[120665, 120665], 'mapped', [948]],
        [[120666, 120666], 'mapped', [949]],
        [[120667, 120667], 'mapped', [950]],
        [[120668, 120668], 'mapped', [951]],
        [[120669, 120669], 'mapped', [952]],
        [[120670, 120670], 'mapped', [953]],
        [[120671, 120671], 'mapped', [954]],
        [[120672, 120672], 'mapped', [955]],
        [[120673, 120673], 'mapped', [956]],
        [[120674, 120674], 'mapped', [957]],
        [[120675, 120675], 'mapped', [958]],
        [[120676, 120676], 'mapped', [959]],
        [[120677, 120677], 'mapped', [960]],
        [[120678, 120678], 'mapped', [961]],
        [[120679, 120679], 'mapped', [952]],
        [[120680, 120680], 'mapped', [963]],
        [[120681, 120681], 'mapped', [964]],
        [[120682, 120682], 'mapped', [965]],
        [[120683, 120683], 'mapped', [966]],
        [[120684, 120684], 'mapped', [967]],
        [[120685, 120685], 'mapped', [968]],
        [[120686, 120686], 'mapped', [969]],
        [[120687, 120687], 'mapped', [8711]],
        [[120688, 120688], 'mapped', [945]],
        [[120689, 120689], 'mapped', [946]],
        [[120690, 120690], 'mapped', [947]],
        [[120691, 120691], 'mapped', [948]],
        [[120692, 120692], 'mapped', [949]],
        [[120693, 120693], 'mapped', [950]],
        [[120694, 120694], 'mapped', [951]],
        [[120695, 120695], 'mapped', [952]],
        [[120696, 120696], 'mapped', [953]],
        [[120697, 120697], 'mapped', [954]],
        [[120698, 120698], 'mapped', [955]],
        [[120699, 120699], 'mapped', [956]],
        [[120700, 120700], 'mapped', [957]],
        [[120701, 120701], 'mapped', [958]],
        [[120702, 120702], 'mapped', [959]],
        [[120703, 120703], 'mapped', [960]],
        [[120704, 120704], 'mapped', [961]],
        [[120705, 120706], 'mapped', [963]],
        [[120707, 120707], 'mapped', [964]],
        [[120708, 120708], 'mapped', [965]],
        [[120709, 120709], 'mapped', [966]],
        [[120710, 120710], 'mapped', [967]],
        [[120711, 120711], 'mapped', [968]],
        [[120712, 120712], 'mapped', [969]],
        [[120713, 120713], 'mapped', [8706]],
        [[120714, 120714], 'mapped', [949]],
        [[120715, 120715], 'mapped', [952]],
        [[120716, 120716], 'mapped', [954]],
        [[120717, 120717], 'mapped', [966]],
        [[120718, 120718], 'mapped', [961]],
        [[120719, 120719], 'mapped', [960]],
        [[120720, 120720], 'mapped', [945]],
        [[120721, 120721], 'mapped', [946]],
        [[120722, 120722], 'mapped', [947]],
        [[120723, 120723], 'mapped', [948]],
        [[120724, 120724], 'mapped', [949]],
        [[120725, 120725], 'mapped', [950]],
        [[120726, 120726], 'mapped', [951]],
        [[120727, 120727], 'mapped', [952]],
        [[120728, 120728], 'mapped', [953]],
        [[120729, 120729], 'mapped', [954]],
        [[120730, 120730], 'mapped', [955]],
        [[120731, 120731], 'mapped', [956]],
        [[120732, 120732], 'mapped', [957]],
        [[120733, 120733], 'mapped', [958]],
        [[120734, 120734], 'mapped', [959]],
        [[120735, 120735], 'mapped', [960]],
        [[120736, 120736], 'mapped', [961]],
        [[120737, 120737], 'mapped', [952]],
        [[120738, 120738], 'mapped', [963]],
        [[120739, 120739], 'mapped', [964]],
        [[120740, 120740], 'mapped', [965]],
        [[120741, 120741], 'mapped', [966]],
        [[120742, 120742], 'mapped', [967]],
        [[120743, 120743], 'mapped', [968]],
        [[120744, 120744], 'mapped', [969]],
        [[120745, 120745], 'mapped', [8711]],
        [[120746, 120746], 'mapped', [945]],
        [[120747, 120747], 'mapped', [946]],
        [[120748, 120748], 'mapped', [947]],
        [[120749, 120749], 'mapped', [948]],
        [[120750, 120750], 'mapped', [949]],
        [[120751, 120751], 'mapped', [950]],
        [[120752, 120752], 'mapped', [951]],
        [[120753, 120753], 'mapped', [952]],
        [[120754, 120754], 'mapped', [953]],
        [[120755, 120755], 'mapped', [954]],
        [[120756, 120756], 'mapped', [955]],
        [[120757, 120757], 'mapped', [956]],
        [[120758, 120758], 'mapped', [957]],
        [[120759, 120759], 'mapped', [958]],
        [[120760, 120760], 'mapped', [959]],
        [[120761, 120761], 'mapped', [960]],
        [[120762, 120762], 'mapped', [961]],
        [[120763, 120764], 'mapped', [963]],
        [[120765, 120765], 'mapped', [964]],
        [[120766, 120766], 'mapped', [965]],
        [[120767, 120767], 'mapped', [966]],
        [[120768, 120768], 'mapped', [967]],
        [[120769, 120769], 'mapped', [968]],
        [[120770, 120770], 'mapped', [969]],
        [[120771, 120771], 'mapped', [8706]],
        [[120772, 120772], 'mapped', [949]],
        [[120773, 120773], 'mapped', [952]],
        [[120774, 120774], 'mapped', [954]],
        [[120775, 120775], 'mapped', [966]],
        [[120776, 120776], 'mapped', [961]],
        [[120777, 120777], 'mapped', [960]],
        [[120778, 120779], 'mapped', [989]],
        [[120780, 120781], 'disallowed'],
        [[120782, 120782], 'mapped', [48]],
        [[120783, 120783], 'mapped', [49]],
        [[120784, 120784], 'mapped', [50]],
        [[120785, 120785], 'mapped', [51]],
        [[120786, 120786], 'mapped', [52]],
        [[120787, 120787], 'mapped', [53]],
        [[120788, 120788], 'mapped', [54]],
        [[120789, 120789], 'mapped', [55]],
        [[120790, 120790], 'mapped', [56]],
        [[120791, 120791], 'mapped', [57]],
        [[120792, 120792], 'mapped', [48]],
        [[120793, 120793], 'mapped', [49]],
        [[120794, 120794], 'mapped', [50]],
        [[120795, 120795], 'mapped', [51]],
        [[120796, 120796], 'mapped', [52]],
        [[120797, 120797], 'mapped', [53]],
        [[120798, 120798], 'mapped', [54]],
        [[120799, 120799], 'mapped', [55]],
        [[120800, 120800], 'mapped', [56]],
        [[120801, 120801], 'mapped', [57]],
        [[120802, 120802], 'mapped', [48]],
        [[120803, 120803], 'mapped', [49]],
        [[120804, 120804], 'mapped', [50]],
        [[120805, 120805], 'mapped', [51]],
        [[120806, 120806], 'mapped', [52]],
        [[120807, 120807], 'mapped', [53]],
        [[120808, 120808], 'mapped', [54]],
        [[120809, 120809], 'mapped', [55]],
        [[120810, 120810], 'mapped', [56]],
        [[120811, 120811], 'mapped', [57]],
        [[120812, 120812], 'mapped', [48]],
        [[120813, 120813], 'mapped', [49]],
        [[120814, 120814], 'mapped', [50]],
        [[120815, 120815], 'mapped', [51]],
        [[120816, 120816], 'mapped', [52]],
        [[120817, 120817], 'mapped', [53]],
        [[120818, 120818], 'mapped', [54]],
        [[120819, 120819], 'mapped', [55]],
        [[120820, 120820], 'mapped', [56]],
        [[120821, 120821], 'mapped', [57]],
        [[120822, 120822], 'mapped', [48]],
        [[120823, 120823], 'mapped', [49]],
        [[120824, 120824], 'mapped', [50]],
        [[120825, 120825], 'mapped', [51]],
        [[120826, 120826], 'mapped', [52]],
        [[120827, 120827], 'mapped', [53]],
        [[120828, 120828], 'mapped', [54]],
        [[120829, 120829], 'mapped', [55]],
        [[120830, 120830], 'mapped', [56]],
        [[120831, 120831], 'mapped', [57]],
        [[120832, 121343], 'valid', [], 'NV8'],
        [[121344, 121398], 'valid'],
        [[121399, 121402], 'valid', [], 'NV8'],
        [[121403, 121452], 'valid'],
        [[121453, 121460], 'valid', [], 'NV8'],
        [[121461, 121461], 'valid'],
        [[121462, 121475], 'valid', [], 'NV8'],
        [[121476, 121476], 'valid'],
        [[121477, 121483], 'valid', [], 'NV8'],
        [[121484, 121498], 'disallowed'],
        [[121499, 121503], 'valid'],
        [[121504, 121504], 'disallowed'],
        [[121505, 121519], 'valid'],
        [[121520, 124927], 'disallowed'],
        [[124928, 125124], 'valid'],
        [[125125, 125126], 'disallowed'],
        [[125127, 125135], 'valid', [], 'NV8'],
        [[125136, 125142], 'valid'],
        [[125143, 126463], 'disallowed'],
        [[126464, 126464], 'mapped', [1575]],
        [[126465, 126465], 'mapped', [1576]],
        [[126466, 126466], 'mapped', [1580]],
        [[126467, 126467], 'mapped', [1583]],
        [[126468, 126468], 'disallowed'],
        [[126469, 126469], 'mapped', [1608]],
        [[126470, 126470], 'mapped', [1586]],
        [[126471, 126471], 'mapped', [1581]],
        [[126472, 126472], 'mapped', [1591]],
        [[126473, 126473], 'mapped', [1610]],
        [[126474, 126474], 'mapped', [1603]],
        [[126475, 126475], 'mapped', [1604]],
        [[126476, 126476], 'mapped', [1605]],
        [[126477, 126477], 'mapped', [1606]],
        [[126478, 126478], 'mapped', [1587]],
        [[126479, 126479], 'mapped', [1593]],
        [[126480, 126480], 'mapped', [1601]],
        [[126481, 126481], 'mapped', [1589]],
        [[126482, 126482], 'mapped', [1602]],
        [[126483, 126483], 'mapped', [1585]],
        [[126484, 126484], 'mapped', [1588]],
        [[126485, 126485], 'mapped', [1578]],
        [[126486, 126486], 'mapped', [1579]],
        [[126487, 126487], 'mapped', [1582]],
        [[126488, 126488], 'mapped', [1584]],
        [[126489, 126489], 'mapped', [1590]],
        [[126490, 126490], 'mapped', [1592]],
        [[126491, 126491], 'mapped', [1594]],
        [[126492, 126492], 'mapped', [1646]],
        [[126493, 126493], 'mapped', [1722]],
        [[126494, 126494], 'mapped', [1697]],
        [[126495, 126495], 'mapped', [1647]],
        [[126496, 126496], 'disallowed'],
        [[126497, 126497], 'mapped', [1576]],
        [[126498, 126498], 'mapped', [1580]],
        [[126499, 126499], 'disallowed'],
        [[126500, 126500], 'mapped', [1607]],
        [[126501, 126502], 'disallowed'],
        [[126503, 126503], 'mapped', [1581]],
        [[126504, 126504], 'disallowed'],
        [[126505, 126505], 'mapped', [1610]],
        [[126506, 126506], 'mapped', [1603]],
        [[126507, 126507], 'mapped', [1604]],
        [[126508, 126508], 'mapped', [1605]],
        [[126509, 126509], 'mapped', [1606]],
        [[126510, 126510], 'mapped', [1587]],
        [[126511, 126511], 'mapped', [1593]],
        [[126512, 126512], 'mapped', [1601]],
        [[126513, 126513], 'mapped', [1589]],
        [[126514, 126514], 'mapped', [1602]],
        [[126515, 126515], 'disallowed'],
        [[126516, 126516], 'mapped', [1588]],
        [[126517, 126517], 'mapped', [1578]],
        [[126518, 126518], 'mapped', [1579]],
        [[126519, 126519], 'mapped', [1582]],
        [[126520, 126520], 'disallowed'],
        [[126521, 126521], 'mapped', [1590]],
        [[126522, 126522], 'disallowed'],
        [[126523, 126523], 'mapped', [1594]],
        [[126524, 126529], 'disallowed'],
        [[126530, 126530], 'mapped', [1580]],
        [[126531, 126534], 'disallowed'],
        [[126535, 126535], 'mapped', [1581]],
        [[126536, 126536], 'disallowed'],
        [[126537, 126537], 'mapped', [1610]],
        [[126538, 126538], 'disallowed'],
        [[126539, 126539], 'mapped', [1604]],
        [[126540, 126540], 'disallowed'],
        [[126541, 126541], 'mapped', [1606]],
        [[126542, 126542], 'mapped', [1587]],
        [[126543, 126543], 'mapped', [1593]],
        [[126544, 126544], 'disallowed'],
        [[126545, 126545], 'mapped', [1589]],
        [[126546, 126546], 'mapped', [1602]],
        [[126547, 126547], 'disallowed'],
        [[126548, 126548], 'mapped', [1588]],
        [[126549, 126550], 'disallowed'],
        [[126551, 126551], 'mapped', [1582]],
        [[126552, 126552], 'disallowed'],
        [[126553, 126553], 'mapped', [1590]],
        [[126554, 126554], 'disallowed'],
        [[126555, 126555], 'mapped', [1594]],
        [[126556, 126556], 'disallowed'],
        [[126557, 126557], 'mapped', [1722]],
        [[126558, 126558], 'disallowed'],
        [[126559, 126559], 'mapped', [1647]],
        [[126560, 126560], 'disallowed'],
        [[126561, 126561], 'mapped', [1576]],
        [[126562, 126562], 'mapped', [1580]],
        [[126563, 126563], 'disallowed'],
        [[126564, 126564], 'mapped', [1607]],
        [[126565, 126566], 'disallowed'],
        [[126567, 126567], 'mapped', [1581]],
        [[126568, 126568], 'mapped', [1591]],
        [[126569, 126569], 'mapped', [1610]],
        [[126570, 126570], 'mapped', [1603]],
        [[126571, 126571], 'disallowed'],
        [[126572, 126572], 'mapped', [1605]],
        [[126573, 126573], 'mapped', [1606]],
        [[126574, 126574], 'mapped', [1587]],
        [[126575, 126575], 'mapped', [1593]],
        [[126576, 126576], 'mapped', [1601]],
        [[126577, 126577], 'mapped', [1589]],
        [[126578, 126578], 'mapped', [1602]],
        [[126579, 126579], 'disallowed'],
        [[126580, 126580], 'mapped', [1588]],
        [[126581, 126581], 'mapped', [1578]],
        [[126582, 126582], 'mapped', [1579]],
        [[126583, 126583], 'mapped', [1582]],
        [[126584, 126584], 'disallowed'],
        [[126585, 126585], 'mapped', [1590]],
        [[126586, 126586], 'mapped', [1592]],
        [[126587, 126587], 'mapped', [1594]],
        [[126588, 126588], 'mapped', [1646]],
        [[126589, 126589], 'disallowed'],
        [[126590, 126590], 'mapped', [1697]],
        [[126591, 126591], 'disallowed'],
        [[126592, 126592], 'mapped', [1575]],
        [[126593, 126593], 'mapped', [1576]],
        [[126594, 126594], 'mapped', [1580]],
        [[126595, 126595], 'mapped', [1583]],
        [[126596, 126596], 'mapped', [1607]],
        [[126597, 126597], 'mapped', [1608]],
        [[126598, 126598], 'mapped', [1586]],
        [[126599, 126599], 'mapped', [1581]],
        [[126600, 126600], 'mapped', [1591]],
        [[126601, 126601], 'mapped', [1610]],
        [[126602, 126602], 'disallowed'],
        [[126603, 126603], 'mapped', [1604]],
        [[126604, 126604], 'mapped', [1605]],
        [[126605, 126605], 'mapped', [1606]],
        [[126606, 126606], 'mapped', [1587]],
        [[126607, 126607], 'mapped', [1593]],
        [[126608, 126608], 'mapped', [1601]],
        [[126609, 126609], 'mapped', [1589]],
        [[126610, 126610], 'mapped', [1602]],
        [[126611, 126611], 'mapped', [1585]],
        [[126612, 126612], 'mapped', [1588]],
        [[126613, 126613], 'mapped', [1578]],
        [[126614, 126614], 'mapped', [1579]],
        [[126615, 126615], 'mapped', [1582]],
        [[126616, 126616], 'mapped', [1584]],
        [[126617, 126617], 'mapped', [1590]],
        [[126618, 126618], 'mapped', [1592]],
        [[126619, 126619], 'mapped', [1594]],
        [[126620, 126624], 'disallowed'],
        [[126625, 126625], 'mapped', [1576]],
        [[126626, 126626], 'mapped', [1580]],
        [[126627, 126627], 'mapped', [1583]],
        [[126628, 126628], 'disallowed'],
        [[126629, 126629], 'mapped', [1608]],
        [[126630, 126630], 'mapped', [1586]],
        [[126631, 126631], 'mapped', [1581]],
        [[126632, 126632], 'mapped', [1591]],
        [[126633, 126633], 'mapped', [1610]],
        [[126634, 126634], 'disallowed'],
        [[126635, 126635], 'mapped', [1604]],
        [[126636, 126636], 'mapped', [1605]],
        [[126637, 126637], 'mapped', [1606]],
        [[126638, 126638], 'mapped', [1587]],
        [[126639, 126639], 'mapped', [1593]],
        [[126640, 126640], 'mapped', [1601]],
        [[126641, 126641], 'mapped', [1589]],
        [[126642, 126642], 'mapped', [1602]],
        [[126643, 126643], 'mapped', [1585]],
        [[126644, 126644], 'mapped', [1588]],
        [[126645, 126645], 'mapped', [1578]],
        [[126646, 126646], 'mapped', [1579]],
        [[126647, 126647], 'mapped', [1582]],
        [[126648, 126648], 'mapped', [1584]],
        [[126649, 126649], 'mapped', [1590]],
        [[126650, 126650], 'mapped', [1592]],
        [[126651, 126651], 'mapped', [1594]],
        [[126652, 126703], 'disallowed'],
        [[126704, 126705], 'valid', [], 'NV8'],
        [[126706, 126975], 'disallowed'],
        [[126976, 127019], 'valid', [], 'NV8'],
        [[127020, 127023], 'disallowed'],
        [[127024, 127123], 'valid', [], 'NV8'],
        [[127124, 127135], 'disallowed'],
        [[127136, 127150], 'valid', [], 'NV8'],
        [[127151, 127152], 'disallowed'],
        [[127153, 127166], 'valid', [], 'NV8'],
        [[127167, 127167], 'valid', [], 'NV8'],
        [[127168, 127168], 'disallowed'],
        [[127169, 127183], 'valid', [], 'NV8'],
        [[127184, 127184], 'disallowed'],
        [[127185, 127199], 'valid', [], 'NV8'],
        [[127200, 127221], 'valid', [], 'NV8'],
        [[127222, 127231], 'disallowed'],
        [[127232, 127232], 'disallowed'],
        [[127233, 127233], 'disallowed_STD3_mapped', [48, 44]],
        [[127234, 127234], 'disallowed_STD3_mapped', [49, 44]],
        [[127235, 127235], 'disallowed_STD3_mapped', [50, 44]],
        [[127236, 127236], 'disallowed_STD3_mapped', [51, 44]],
        [[127237, 127237], 'disallowed_STD3_mapped', [52, 44]],
        [[127238, 127238], 'disallowed_STD3_mapped', [53, 44]],
        [[127239, 127239], 'disallowed_STD3_mapped', [54, 44]],
        [[127240, 127240], 'disallowed_STD3_mapped', [55, 44]],
        [[127241, 127241], 'disallowed_STD3_mapped', [56, 44]],
        [[127242, 127242], 'disallowed_STD3_mapped', [57, 44]],
        [[127243, 127244], 'valid', [], 'NV8'],
        [[127245, 127247], 'disallowed'],
        [[127248, 127248], 'disallowed_STD3_mapped', [40, 97, 41]],
        [[127249, 127249], 'disallowed_STD3_mapped', [40, 98, 41]],
        [[127250, 127250], 'disallowed_STD3_mapped', [40, 99, 41]],
        [[127251, 127251], 'disallowed_STD3_mapped', [40, 100, 41]],
        [[127252, 127252], 'disallowed_STD3_mapped', [40, 101, 41]],
        [[127253, 127253], 'disallowed_STD3_mapped', [40, 102, 41]],
        [[127254, 127254], 'disallowed_STD3_mapped', [40, 103, 41]],
        [[127255, 127255], 'disallowed_STD3_mapped', [40, 104, 41]],
        [[127256, 127256], 'disallowed_STD3_mapped', [40, 105, 41]],
        [[127257, 127257], 'disallowed_STD3_mapped', [40, 106, 41]],
        [[127258, 127258], 'disallowed_STD3_mapped', [40, 107, 41]],
        [[127259, 127259], 'disallowed_STD3_mapped', [40, 108, 41]],
        [[127260, 127260], 'disallowed_STD3_mapped', [40, 109, 41]],
        [[127261, 127261], 'disallowed_STD3_mapped', [40, 110, 41]],
        [[127262, 127262], 'disallowed_STD3_mapped', [40, 111, 41]],
        [[127263, 127263], 'disallowed_STD3_mapped', [40, 112, 41]],
        [[127264, 127264], 'disallowed_STD3_mapped', [40, 113, 41]],
        [[127265, 127265], 'disallowed_STD3_mapped', [40, 114, 41]],
        [[127266, 127266], 'disallowed_STD3_mapped', [40, 115, 41]],
        [[127267, 127267], 'disallowed_STD3_mapped', [40, 116, 41]],
        [[127268, 127268], 'disallowed_STD3_mapped', [40, 117, 41]],
        [[127269, 127269], 'disallowed_STD3_mapped', [40, 118, 41]],
        [[127270, 127270], 'disallowed_STD3_mapped', [40, 119, 41]],
        [[127271, 127271], 'disallowed_STD3_mapped', [40, 120, 41]],
        [[127272, 127272], 'disallowed_STD3_mapped', [40, 121, 41]],
        [[127273, 127273], 'disallowed_STD3_mapped', [40, 122, 41]],
        [[127274, 127274], 'mapped', [12308, 115, 12309]],
        [[127275, 127275], 'mapped', [99]],
        [[127276, 127276], 'mapped', [114]],
        [[127277, 127277], 'mapped', [99, 100]],
        [[127278, 127278], 'mapped', [119, 122]],
        [[127279, 127279], 'disallowed'],
        [[127280, 127280], 'mapped', [97]],
        [[127281, 127281], 'mapped', [98]],
        [[127282, 127282], 'mapped', [99]],
        [[127283, 127283], 'mapped', [100]],
        [[127284, 127284], 'mapped', [101]],
        [[127285, 127285], 'mapped', [102]],
        [[127286, 127286], 'mapped', [103]],
        [[127287, 127287], 'mapped', [104]],
        [[127288, 127288], 'mapped', [105]],
        [[127289, 127289], 'mapped', [106]],
        [[127290, 127290], 'mapped', [107]],
        [[127291, 127291], 'mapped', [108]],
        [[127292, 127292], 'mapped', [109]],
        [[127293, 127293], 'mapped', [110]],
        [[127294, 127294], 'mapped', [111]],
        [[127295, 127295], 'mapped', [112]],
        [[127296, 127296], 'mapped', [113]],
        [[127297, 127297], 'mapped', [114]],
        [[127298, 127298], 'mapped', [115]],
        [[127299, 127299], 'mapped', [116]],
        [[127300, 127300], 'mapped', [117]],
        [[127301, 127301], 'mapped', [118]],
        [[127302, 127302], 'mapped', [119]],
        [[127303, 127303], 'mapped', [120]],
        [[127304, 127304], 'mapped', [121]],
        [[127305, 127305], 'mapped', [122]],
        [[127306, 127306], 'mapped', [104, 118]],
        [[127307, 127307], 'mapped', [109, 118]],
        [[127308, 127308], 'mapped', [115, 100]],
        [[127309, 127309], 'mapped', [115, 115]],
        [[127310, 127310], 'mapped', [112, 112, 118]],
        [[127311, 127311], 'mapped', [119, 99]],
        [[127312, 127318], 'valid', [], 'NV8'],
        [[127319, 127319], 'valid', [], 'NV8'],
        [[127320, 127326], 'valid', [], 'NV8'],
        [[127327, 127327], 'valid', [], 'NV8'],
        [[127328, 127337], 'valid', [], 'NV8'],
        [[127338, 127338], 'mapped', [109, 99]],
        [[127339, 127339], 'mapped', [109, 100]],
        [[127340, 127343], 'disallowed'],
        [[127344, 127352], 'valid', [], 'NV8'],
        [[127353, 127353], 'valid', [], 'NV8'],
        [[127354, 127354], 'valid', [], 'NV8'],
        [[127355, 127356], 'valid', [], 'NV8'],
        [[127357, 127358], 'valid', [], 'NV8'],
        [[127359, 127359], 'valid', [], 'NV8'],
        [[127360, 127369], 'valid', [], 'NV8'],
        [[127370, 127373], 'valid', [], 'NV8'],
        [[127374, 127375], 'valid', [], 'NV8'],
        [[127376, 127376], 'mapped', [100, 106]],
        [[127377, 127386], 'valid', [], 'NV8'],
        [[127387, 127461], 'disallowed'],
        [[127462, 127487], 'valid', [], 'NV8'],
        [[127488, 127488], 'mapped', [12411, 12363]],
        [[127489, 127489], 'mapped', [12467, 12467]],
        [[127490, 127490], 'mapped', [12469]],
        [[127491, 127503], 'disallowed'],
        [[127504, 127504], 'mapped', [25163]],
        [[127505, 127505], 'mapped', [23383]],
        [[127506, 127506], 'mapped', [21452]],
        [[127507, 127507], 'mapped', [12487]],
        [[127508, 127508], 'mapped', [20108]],
        [[127509, 127509], 'mapped', [22810]],
        [[127510, 127510], 'mapped', [35299]],
        [[127511, 127511], 'mapped', [22825]],
        [[127512, 127512], 'mapped', [20132]],
        [[127513, 127513], 'mapped', [26144]],
        [[127514, 127514], 'mapped', [28961]],
        [[127515, 127515], 'mapped', [26009]],
        [[127516, 127516], 'mapped', [21069]],
        [[127517, 127517], 'mapped', [24460]],
        [[127518, 127518], 'mapped', [20877]],
        [[127519, 127519], 'mapped', [26032]],
        [[127520, 127520], 'mapped', [21021]],
        [[127521, 127521], 'mapped', [32066]],
        [[127522, 127522], 'mapped', [29983]],
        [[127523, 127523], 'mapped', [36009]],
        [[127524, 127524], 'mapped', [22768]],
        [[127525, 127525], 'mapped', [21561]],
        [[127526, 127526], 'mapped', [28436]],
        [[127527, 127527], 'mapped', [25237]],
        [[127528, 127528], 'mapped', [25429]],
        [[127529, 127529], 'mapped', [19968]],
        [[127530, 127530], 'mapped', [19977]],
        [[127531, 127531], 'mapped', [36938]],
        [[127532, 127532], 'mapped', [24038]],
        [[127533, 127533], 'mapped', [20013]],
        [[127534, 127534], 'mapped', [21491]],
        [[127535, 127535], 'mapped', [25351]],
        [[127536, 127536], 'mapped', [36208]],
        [[127537, 127537], 'mapped', [25171]],
        [[127538, 127538], 'mapped', [31105]],
        [[127539, 127539], 'mapped', [31354]],
        [[127540, 127540], 'mapped', [21512]],
        [[127541, 127541], 'mapped', [28288]],
        [[127542, 127542], 'mapped', [26377]],
        [[127543, 127543], 'mapped', [26376]],
        [[127544, 127544], 'mapped', [30003]],
        [[127545, 127545], 'mapped', [21106]],
        [[127546, 127546], 'mapped', [21942]],
        [[127547, 127551], 'disallowed'],
        [[127552, 127552], 'mapped', [12308, 26412, 12309]],
        [[127553, 127553], 'mapped', [12308, 19977, 12309]],
        [[127554, 127554], 'mapped', [12308, 20108, 12309]],
        [[127555, 127555], 'mapped', [12308, 23433, 12309]],
        [[127556, 127556], 'mapped', [12308, 28857, 12309]],
        [[127557, 127557], 'mapped', [12308, 25171, 12309]],
        [[127558, 127558], 'mapped', [12308, 30423, 12309]],
        [[127559, 127559], 'mapped', [12308, 21213, 12309]],
        [[127560, 127560], 'mapped', [12308, 25943, 12309]],
        [[127561, 127567], 'disallowed'],
        [[127568, 127568], 'mapped', [24471]],
        [[127569, 127569], 'mapped', [21487]],
        [[127570, 127743], 'disallowed'],
        [[127744, 127776], 'valid', [], 'NV8'],
        [[127777, 127788], 'valid', [], 'NV8'],
        [[127789, 127791], 'valid', [], 'NV8'],
        [[127792, 127797], 'valid', [], 'NV8'],
        [[127798, 127798], 'valid', [], 'NV8'],
        [[127799, 127868], 'valid', [], 'NV8'],
        [[127869, 127869], 'valid', [], 'NV8'],
        [[127870, 127871], 'valid', [], 'NV8'],
        [[127872, 127891], 'valid', [], 'NV8'],
        [[127892, 127903], 'valid', [], 'NV8'],
        [[127904, 127940], 'valid', [], 'NV8'],
        [[127941, 127941], 'valid', [], 'NV8'],
        [[127942, 127946], 'valid', [], 'NV8'],
        [[127947, 127950], 'valid', [], 'NV8'],
        [[127951, 127955], 'valid', [], 'NV8'],
        [[127956, 127967], 'valid', [], 'NV8'],
        [[127968, 127984], 'valid', [], 'NV8'],
        [[127985, 127991], 'valid', [], 'NV8'],
        [[127992, 127999], 'valid', [], 'NV8'],
        [[128e3, 128062], 'valid', [], 'NV8'],
        [[128063, 128063], 'valid', [], 'NV8'],
        [[128064, 128064], 'valid', [], 'NV8'],
        [[128065, 128065], 'valid', [], 'NV8'],
        [[128066, 128247], 'valid', [], 'NV8'],
        [[128248, 128248], 'valid', [], 'NV8'],
        [[128249, 128252], 'valid', [], 'NV8'],
        [[128253, 128254], 'valid', [], 'NV8'],
        [[128255, 128255], 'valid', [], 'NV8'],
        [[128256, 128317], 'valid', [], 'NV8'],
        [[128318, 128319], 'valid', [], 'NV8'],
        [[128320, 128323], 'valid', [], 'NV8'],
        [[128324, 128330], 'valid', [], 'NV8'],
        [[128331, 128335], 'valid', [], 'NV8'],
        [[128336, 128359], 'valid', [], 'NV8'],
        [[128360, 128377], 'valid', [], 'NV8'],
        [[128378, 128378], 'disallowed'],
        [[128379, 128419], 'valid', [], 'NV8'],
        [[128420, 128420], 'disallowed'],
        [[128421, 128506], 'valid', [], 'NV8'],
        [[128507, 128511], 'valid', [], 'NV8'],
        [[128512, 128512], 'valid', [], 'NV8'],
        [[128513, 128528], 'valid', [], 'NV8'],
        [[128529, 128529], 'valid', [], 'NV8'],
        [[128530, 128532], 'valid', [], 'NV8'],
        [[128533, 128533], 'valid', [], 'NV8'],
        [[128534, 128534], 'valid', [], 'NV8'],
        [[128535, 128535], 'valid', [], 'NV8'],
        [[128536, 128536], 'valid', [], 'NV8'],
        [[128537, 128537], 'valid', [], 'NV8'],
        [[128538, 128538], 'valid', [], 'NV8'],
        [[128539, 128539], 'valid', [], 'NV8'],
        [[128540, 128542], 'valid', [], 'NV8'],
        [[128543, 128543], 'valid', [], 'NV8'],
        [[128544, 128549], 'valid', [], 'NV8'],
        [[128550, 128551], 'valid', [], 'NV8'],
        [[128552, 128555], 'valid', [], 'NV8'],
        [[128556, 128556], 'valid', [], 'NV8'],
        [[128557, 128557], 'valid', [], 'NV8'],
        [[128558, 128559], 'valid', [], 'NV8'],
        [[128560, 128563], 'valid', [], 'NV8'],
        [[128564, 128564], 'valid', [], 'NV8'],
        [[128565, 128576], 'valid', [], 'NV8'],
        [[128577, 128578], 'valid', [], 'NV8'],
        [[128579, 128580], 'valid', [], 'NV8'],
        [[128581, 128591], 'valid', [], 'NV8'],
        [[128592, 128639], 'valid', [], 'NV8'],
        [[128640, 128709], 'valid', [], 'NV8'],
        [[128710, 128719], 'valid', [], 'NV8'],
        [[128720, 128720], 'valid', [], 'NV8'],
        [[128721, 128735], 'disallowed'],
        [[128736, 128748], 'valid', [], 'NV8'],
        [[128749, 128751], 'disallowed'],
        [[128752, 128755], 'valid', [], 'NV8'],
        [[128756, 128767], 'disallowed'],
        [[128768, 128883], 'valid', [], 'NV8'],
        [[128884, 128895], 'disallowed'],
        [[128896, 128980], 'valid', [], 'NV8'],
        [[128981, 129023], 'disallowed'],
        [[129024, 129035], 'valid', [], 'NV8'],
        [[129036, 129039], 'disallowed'],
        [[129040, 129095], 'valid', [], 'NV8'],
        [[129096, 129103], 'disallowed'],
        [[129104, 129113], 'valid', [], 'NV8'],
        [[129114, 129119], 'disallowed'],
        [[129120, 129159], 'valid', [], 'NV8'],
        [[129160, 129167], 'disallowed'],
        [[129168, 129197], 'valid', [], 'NV8'],
        [[129198, 129295], 'disallowed'],
        [[129296, 129304], 'valid', [], 'NV8'],
        [[129305, 129407], 'disallowed'],
        [[129408, 129412], 'valid', [], 'NV8'],
        [[129413, 129471], 'disallowed'],
        [[129472, 129472], 'valid', [], 'NV8'],
        [[129473, 131069], 'disallowed'],
        [[131070, 131071], 'disallowed'],
        [[131072, 173782], 'valid'],
        [[173783, 173823], 'disallowed'],
        [[173824, 177972], 'valid'],
        [[177973, 177983], 'disallowed'],
        [[177984, 178205], 'valid'],
        [[178206, 178207], 'disallowed'],
        [[178208, 183969], 'valid'],
        [[183970, 194559], 'disallowed'],
        [[194560, 194560], 'mapped', [20029]],
        [[194561, 194561], 'mapped', [20024]],
        [[194562, 194562], 'mapped', [20033]],
        [[194563, 194563], 'mapped', [131362]],
        [[194564, 194564], 'mapped', [20320]],
        [[194565, 194565], 'mapped', [20398]],
        [[194566, 194566], 'mapped', [20411]],
        [[194567, 194567], 'mapped', [20482]],
        [[194568, 194568], 'mapped', [20602]],
        [[194569, 194569], 'mapped', [20633]],
        [[194570, 194570], 'mapped', [20711]],
        [[194571, 194571], 'mapped', [20687]],
        [[194572, 194572], 'mapped', [13470]],
        [[194573, 194573], 'mapped', [132666]],
        [[194574, 194574], 'mapped', [20813]],
        [[194575, 194575], 'mapped', [20820]],
        [[194576, 194576], 'mapped', [20836]],
        [[194577, 194577], 'mapped', [20855]],
        [[194578, 194578], 'mapped', [132380]],
        [[194579, 194579], 'mapped', [13497]],
        [[194580, 194580], 'mapped', [20839]],
        [[194581, 194581], 'mapped', [20877]],
        [[194582, 194582], 'mapped', [132427]],
        [[194583, 194583], 'mapped', [20887]],
        [[194584, 194584], 'mapped', [20900]],
        [[194585, 194585], 'mapped', [20172]],
        [[194586, 194586], 'mapped', [20908]],
        [[194587, 194587], 'mapped', [20917]],
        [[194588, 194588], 'mapped', [168415]],
        [[194589, 194589], 'mapped', [20981]],
        [[194590, 194590], 'mapped', [20995]],
        [[194591, 194591], 'mapped', [13535]],
        [[194592, 194592], 'mapped', [21051]],
        [[194593, 194593], 'mapped', [21062]],
        [[194594, 194594], 'mapped', [21106]],
        [[194595, 194595], 'mapped', [21111]],
        [[194596, 194596], 'mapped', [13589]],
        [[194597, 194597], 'mapped', [21191]],
        [[194598, 194598], 'mapped', [21193]],
        [[194599, 194599], 'mapped', [21220]],
        [[194600, 194600], 'mapped', [21242]],
        [[194601, 194601], 'mapped', [21253]],
        [[194602, 194602], 'mapped', [21254]],
        [[194603, 194603], 'mapped', [21271]],
        [[194604, 194604], 'mapped', [21321]],
        [[194605, 194605], 'mapped', [21329]],
        [[194606, 194606], 'mapped', [21338]],
        [[194607, 194607], 'mapped', [21363]],
        [[194608, 194608], 'mapped', [21373]],
        [[194609, 194611], 'mapped', [21375]],
        [[194612, 194612], 'mapped', [133676]],
        [[194613, 194613], 'mapped', [28784]],
        [[194614, 194614], 'mapped', [21450]],
        [[194615, 194615], 'mapped', [21471]],
        [[194616, 194616], 'mapped', [133987]],
        [[194617, 194617], 'mapped', [21483]],
        [[194618, 194618], 'mapped', [21489]],
        [[194619, 194619], 'mapped', [21510]],
        [[194620, 194620], 'mapped', [21662]],
        [[194621, 194621], 'mapped', [21560]],
        [[194622, 194622], 'mapped', [21576]],
        [[194623, 194623], 'mapped', [21608]],
        [[194624, 194624], 'mapped', [21666]],
        [[194625, 194625], 'mapped', [21750]],
        [[194626, 194626], 'mapped', [21776]],
        [[194627, 194627], 'mapped', [21843]],
        [[194628, 194628], 'mapped', [21859]],
        [[194629, 194630], 'mapped', [21892]],
        [[194631, 194631], 'mapped', [21913]],
        [[194632, 194632], 'mapped', [21931]],
        [[194633, 194633], 'mapped', [21939]],
        [[194634, 194634], 'mapped', [21954]],
        [[194635, 194635], 'mapped', [22294]],
        [[194636, 194636], 'mapped', [22022]],
        [[194637, 194637], 'mapped', [22295]],
        [[194638, 194638], 'mapped', [22097]],
        [[194639, 194639], 'mapped', [22132]],
        [[194640, 194640], 'mapped', [20999]],
        [[194641, 194641], 'mapped', [22766]],
        [[194642, 194642], 'mapped', [22478]],
        [[194643, 194643], 'mapped', [22516]],
        [[194644, 194644], 'mapped', [22541]],
        [[194645, 194645], 'mapped', [22411]],
        [[194646, 194646], 'mapped', [22578]],
        [[194647, 194647], 'mapped', [22577]],
        [[194648, 194648], 'mapped', [22700]],
        [[194649, 194649], 'mapped', [136420]],
        [[194650, 194650], 'mapped', [22770]],
        [[194651, 194651], 'mapped', [22775]],
        [[194652, 194652], 'mapped', [22790]],
        [[194653, 194653], 'mapped', [22810]],
        [[194654, 194654], 'mapped', [22818]],
        [[194655, 194655], 'mapped', [22882]],
        [[194656, 194656], 'mapped', [136872]],
        [[194657, 194657], 'mapped', [136938]],
        [[194658, 194658], 'mapped', [23020]],
        [[194659, 194659], 'mapped', [23067]],
        [[194660, 194660], 'mapped', [23079]],
        [[194661, 194661], 'mapped', [23e3]],
        [[194662, 194662], 'mapped', [23142]],
        [[194663, 194663], 'mapped', [14062]],
        [[194664, 194664], 'disallowed'],
        [[194665, 194665], 'mapped', [23304]],
        [[194666, 194667], 'mapped', [23358]],
        [[194668, 194668], 'mapped', [137672]],
        [[194669, 194669], 'mapped', [23491]],
        [[194670, 194670], 'mapped', [23512]],
        [[194671, 194671], 'mapped', [23527]],
        [[194672, 194672], 'mapped', [23539]],
        [[194673, 194673], 'mapped', [138008]],
        [[194674, 194674], 'mapped', [23551]],
        [[194675, 194675], 'mapped', [23558]],
        [[194676, 194676], 'disallowed'],
        [[194677, 194677], 'mapped', [23586]],
        [[194678, 194678], 'mapped', [14209]],
        [[194679, 194679], 'mapped', [23648]],
        [[194680, 194680], 'mapped', [23662]],
        [[194681, 194681], 'mapped', [23744]],
        [[194682, 194682], 'mapped', [23693]],
        [[194683, 194683], 'mapped', [138724]],
        [[194684, 194684], 'mapped', [23875]],
        [[194685, 194685], 'mapped', [138726]],
        [[194686, 194686], 'mapped', [23918]],
        [[194687, 194687], 'mapped', [23915]],
        [[194688, 194688], 'mapped', [23932]],
        [[194689, 194689], 'mapped', [24033]],
        [[194690, 194690], 'mapped', [24034]],
        [[194691, 194691], 'mapped', [14383]],
        [[194692, 194692], 'mapped', [24061]],
        [[194693, 194693], 'mapped', [24104]],
        [[194694, 194694], 'mapped', [24125]],
        [[194695, 194695], 'mapped', [24169]],
        [[194696, 194696], 'mapped', [14434]],
        [[194697, 194697], 'mapped', [139651]],
        [[194698, 194698], 'mapped', [14460]],
        [[194699, 194699], 'mapped', [24240]],
        [[194700, 194700], 'mapped', [24243]],
        [[194701, 194701], 'mapped', [24246]],
        [[194702, 194702], 'mapped', [24266]],
        [[194703, 194703], 'mapped', [172946]],
        [[194704, 194704], 'mapped', [24318]],
        [[194705, 194706], 'mapped', [140081]],
        [[194707, 194707], 'mapped', [33281]],
        [[194708, 194709], 'mapped', [24354]],
        [[194710, 194710], 'mapped', [14535]],
        [[194711, 194711], 'mapped', [144056]],
        [[194712, 194712], 'mapped', [156122]],
        [[194713, 194713], 'mapped', [24418]],
        [[194714, 194714], 'mapped', [24427]],
        [[194715, 194715], 'mapped', [14563]],
        [[194716, 194716], 'mapped', [24474]],
        [[194717, 194717], 'mapped', [24525]],
        [[194718, 194718], 'mapped', [24535]],
        [[194719, 194719], 'mapped', [24569]],
        [[194720, 194720], 'mapped', [24705]],
        [[194721, 194721], 'mapped', [14650]],
        [[194722, 194722], 'mapped', [14620]],
        [[194723, 194723], 'mapped', [24724]],
        [[194724, 194724], 'mapped', [141012]],
        [[194725, 194725], 'mapped', [24775]],
        [[194726, 194726], 'mapped', [24904]],
        [[194727, 194727], 'mapped', [24908]],
        [[194728, 194728], 'mapped', [24910]],
        [[194729, 194729], 'mapped', [24908]],
        [[194730, 194730], 'mapped', [24954]],
        [[194731, 194731], 'mapped', [24974]],
        [[194732, 194732], 'mapped', [25010]],
        [[194733, 194733], 'mapped', [24996]],
        [[194734, 194734], 'mapped', [25007]],
        [[194735, 194735], 'mapped', [25054]],
        [[194736, 194736], 'mapped', [25074]],
        [[194737, 194737], 'mapped', [25078]],
        [[194738, 194738], 'mapped', [25104]],
        [[194739, 194739], 'mapped', [25115]],
        [[194740, 194740], 'mapped', [25181]],
        [[194741, 194741], 'mapped', [25265]],
        [[194742, 194742], 'mapped', [25300]],
        [[194743, 194743], 'mapped', [25424]],
        [[194744, 194744], 'mapped', [142092]],
        [[194745, 194745], 'mapped', [25405]],
        [[194746, 194746], 'mapped', [25340]],
        [[194747, 194747], 'mapped', [25448]],
        [[194748, 194748], 'mapped', [25475]],
        [[194749, 194749], 'mapped', [25572]],
        [[194750, 194750], 'mapped', [142321]],
        [[194751, 194751], 'mapped', [25634]],
        [[194752, 194752], 'mapped', [25541]],
        [[194753, 194753], 'mapped', [25513]],
        [[194754, 194754], 'mapped', [14894]],
        [[194755, 194755], 'mapped', [25705]],
        [[194756, 194756], 'mapped', [25726]],
        [[194757, 194757], 'mapped', [25757]],
        [[194758, 194758], 'mapped', [25719]],
        [[194759, 194759], 'mapped', [14956]],
        [[194760, 194760], 'mapped', [25935]],
        [[194761, 194761], 'mapped', [25964]],
        [[194762, 194762], 'mapped', [143370]],
        [[194763, 194763], 'mapped', [26083]],
        [[194764, 194764], 'mapped', [26360]],
        [[194765, 194765], 'mapped', [26185]],
        [[194766, 194766], 'mapped', [15129]],
        [[194767, 194767], 'mapped', [26257]],
        [[194768, 194768], 'mapped', [15112]],
        [[194769, 194769], 'mapped', [15076]],
        [[194770, 194770], 'mapped', [20882]],
        [[194771, 194771], 'mapped', [20885]],
        [[194772, 194772], 'mapped', [26368]],
        [[194773, 194773], 'mapped', [26268]],
        [[194774, 194774], 'mapped', [32941]],
        [[194775, 194775], 'mapped', [17369]],
        [[194776, 194776], 'mapped', [26391]],
        [[194777, 194777], 'mapped', [26395]],
        [[194778, 194778], 'mapped', [26401]],
        [[194779, 194779], 'mapped', [26462]],
        [[194780, 194780], 'mapped', [26451]],
        [[194781, 194781], 'mapped', [144323]],
        [[194782, 194782], 'mapped', [15177]],
        [[194783, 194783], 'mapped', [26618]],
        [[194784, 194784], 'mapped', [26501]],
        [[194785, 194785], 'mapped', [26706]],
        [[194786, 194786], 'mapped', [26757]],
        [[194787, 194787], 'mapped', [144493]],
        [[194788, 194788], 'mapped', [26766]],
        [[194789, 194789], 'mapped', [26655]],
        [[194790, 194790], 'mapped', [26900]],
        [[194791, 194791], 'mapped', [15261]],
        [[194792, 194792], 'mapped', [26946]],
        [[194793, 194793], 'mapped', [27043]],
        [[194794, 194794], 'mapped', [27114]],
        [[194795, 194795], 'mapped', [27304]],
        [[194796, 194796], 'mapped', [145059]],
        [[194797, 194797], 'mapped', [27355]],
        [[194798, 194798], 'mapped', [15384]],
        [[194799, 194799], 'mapped', [27425]],
        [[194800, 194800], 'mapped', [145575]],
        [[194801, 194801], 'mapped', [27476]],
        [[194802, 194802], 'mapped', [15438]],
        [[194803, 194803], 'mapped', [27506]],
        [[194804, 194804], 'mapped', [27551]],
        [[194805, 194805], 'mapped', [27578]],
        [[194806, 194806], 'mapped', [27579]],
        [[194807, 194807], 'mapped', [146061]],
        [[194808, 194808], 'mapped', [138507]],
        [[194809, 194809], 'mapped', [146170]],
        [[194810, 194810], 'mapped', [27726]],
        [[194811, 194811], 'mapped', [146620]],
        [[194812, 194812], 'mapped', [27839]],
        [[194813, 194813], 'mapped', [27853]],
        [[194814, 194814], 'mapped', [27751]],
        [[194815, 194815], 'mapped', [27926]],
        [[194816, 194816], 'mapped', [27966]],
        [[194817, 194817], 'mapped', [28023]],
        [[194818, 194818], 'mapped', [27969]],
        [[194819, 194819], 'mapped', [28009]],
        [[194820, 194820], 'mapped', [28024]],
        [[194821, 194821], 'mapped', [28037]],
        [[194822, 194822], 'mapped', [146718]],
        [[194823, 194823], 'mapped', [27956]],
        [[194824, 194824], 'mapped', [28207]],
        [[194825, 194825], 'mapped', [28270]],
        [[194826, 194826], 'mapped', [15667]],
        [[194827, 194827], 'mapped', [28363]],
        [[194828, 194828], 'mapped', [28359]],
        [[194829, 194829], 'mapped', [147153]],
        [[194830, 194830], 'mapped', [28153]],
        [[194831, 194831], 'mapped', [28526]],
        [[194832, 194832], 'mapped', [147294]],
        [[194833, 194833], 'mapped', [147342]],
        [[194834, 194834], 'mapped', [28614]],
        [[194835, 194835], 'mapped', [28729]],
        [[194836, 194836], 'mapped', [28702]],
        [[194837, 194837], 'mapped', [28699]],
        [[194838, 194838], 'mapped', [15766]],
        [[194839, 194839], 'mapped', [28746]],
        [[194840, 194840], 'mapped', [28797]],
        [[194841, 194841], 'mapped', [28791]],
        [[194842, 194842], 'mapped', [28845]],
        [[194843, 194843], 'mapped', [132389]],
        [[194844, 194844], 'mapped', [28997]],
        [[194845, 194845], 'mapped', [148067]],
        [[194846, 194846], 'mapped', [29084]],
        [[194847, 194847], 'disallowed'],
        [[194848, 194848], 'mapped', [29224]],
        [[194849, 194849], 'mapped', [29237]],
        [[194850, 194850], 'mapped', [29264]],
        [[194851, 194851], 'mapped', [149e3]],
        [[194852, 194852], 'mapped', [29312]],
        [[194853, 194853], 'mapped', [29333]],
        [[194854, 194854], 'mapped', [149301]],
        [[194855, 194855], 'mapped', [149524]],
        [[194856, 194856], 'mapped', [29562]],
        [[194857, 194857], 'mapped', [29579]],
        [[194858, 194858], 'mapped', [16044]],
        [[194859, 194859], 'mapped', [29605]],
        [[194860, 194861], 'mapped', [16056]],
        [[194862, 194862], 'mapped', [29767]],
        [[194863, 194863], 'mapped', [29788]],
        [[194864, 194864], 'mapped', [29809]],
        [[194865, 194865], 'mapped', [29829]],
        [[194866, 194866], 'mapped', [29898]],
        [[194867, 194867], 'mapped', [16155]],
        [[194868, 194868], 'mapped', [29988]],
        [[194869, 194869], 'mapped', [150582]],
        [[194870, 194870], 'mapped', [30014]],
        [[194871, 194871], 'mapped', [150674]],
        [[194872, 194872], 'mapped', [30064]],
        [[194873, 194873], 'mapped', [139679]],
        [[194874, 194874], 'mapped', [30224]],
        [[194875, 194875], 'mapped', [151457]],
        [[194876, 194876], 'mapped', [151480]],
        [[194877, 194877], 'mapped', [151620]],
        [[194878, 194878], 'mapped', [16380]],
        [[194879, 194879], 'mapped', [16392]],
        [[194880, 194880], 'mapped', [30452]],
        [[194881, 194881], 'mapped', [151795]],
        [[194882, 194882], 'mapped', [151794]],
        [[194883, 194883], 'mapped', [151833]],
        [[194884, 194884], 'mapped', [151859]],
        [[194885, 194885], 'mapped', [30494]],
        [[194886, 194887], 'mapped', [30495]],
        [[194888, 194888], 'mapped', [30538]],
        [[194889, 194889], 'mapped', [16441]],
        [[194890, 194890], 'mapped', [30603]],
        [[194891, 194891], 'mapped', [16454]],
        [[194892, 194892], 'mapped', [16534]],
        [[194893, 194893], 'mapped', [152605]],
        [[194894, 194894], 'mapped', [30798]],
        [[194895, 194895], 'mapped', [30860]],
        [[194896, 194896], 'mapped', [30924]],
        [[194897, 194897], 'mapped', [16611]],
        [[194898, 194898], 'mapped', [153126]],
        [[194899, 194899], 'mapped', [31062]],
        [[194900, 194900], 'mapped', [153242]],
        [[194901, 194901], 'mapped', [153285]],
        [[194902, 194902], 'mapped', [31119]],
        [[194903, 194903], 'mapped', [31211]],
        [[194904, 194904], 'mapped', [16687]],
        [[194905, 194905], 'mapped', [31296]],
        [[194906, 194906], 'mapped', [31306]],
        [[194907, 194907], 'mapped', [31311]],
        [[194908, 194908], 'mapped', [153980]],
        [[194909, 194910], 'mapped', [154279]],
        [[194911, 194911], 'disallowed'],
        [[194912, 194912], 'mapped', [16898]],
        [[194913, 194913], 'mapped', [154539]],
        [[194914, 194914], 'mapped', [31686]],
        [[194915, 194915], 'mapped', [31689]],
        [[194916, 194916], 'mapped', [16935]],
        [[194917, 194917], 'mapped', [154752]],
        [[194918, 194918], 'mapped', [31954]],
        [[194919, 194919], 'mapped', [17056]],
        [[194920, 194920], 'mapped', [31976]],
        [[194921, 194921], 'mapped', [31971]],
        [[194922, 194922], 'mapped', [32e3]],
        [[194923, 194923], 'mapped', [155526]],
        [[194924, 194924], 'mapped', [32099]],
        [[194925, 194925], 'mapped', [17153]],
        [[194926, 194926], 'mapped', [32199]],
        [[194927, 194927], 'mapped', [32258]],
        [[194928, 194928], 'mapped', [32325]],
        [[194929, 194929], 'mapped', [17204]],
        [[194930, 194930], 'mapped', [156200]],
        [[194931, 194931], 'mapped', [156231]],
        [[194932, 194932], 'mapped', [17241]],
        [[194933, 194933], 'mapped', [156377]],
        [[194934, 194934], 'mapped', [32634]],
        [[194935, 194935], 'mapped', [156478]],
        [[194936, 194936], 'mapped', [32661]],
        [[194937, 194937], 'mapped', [32762]],
        [[194938, 194938], 'mapped', [32773]],
        [[194939, 194939], 'mapped', [156890]],
        [[194940, 194940], 'mapped', [156963]],
        [[194941, 194941], 'mapped', [32864]],
        [[194942, 194942], 'mapped', [157096]],
        [[194943, 194943], 'mapped', [32880]],
        [[194944, 194944], 'mapped', [144223]],
        [[194945, 194945], 'mapped', [17365]],
        [[194946, 194946], 'mapped', [32946]],
        [[194947, 194947], 'mapped', [33027]],
        [[194948, 194948], 'mapped', [17419]],
        [[194949, 194949], 'mapped', [33086]],
        [[194950, 194950], 'mapped', [23221]],
        [[194951, 194951], 'mapped', [157607]],
        [[194952, 194952], 'mapped', [157621]],
        [[194953, 194953], 'mapped', [144275]],
        [[194954, 194954], 'mapped', [144284]],
        [[194955, 194955], 'mapped', [33281]],
        [[194956, 194956], 'mapped', [33284]],
        [[194957, 194957], 'mapped', [36766]],
        [[194958, 194958], 'mapped', [17515]],
        [[194959, 194959], 'mapped', [33425]],
        [[194960, 194960], 'mapped', [33419]],
        [[194961, 194961], 'mapped', [33437]],
        [[194962, 194962], 'mapped', [21171]],
        [[194963, 194963], 'mapped', [33457]],
        [[194964, 194964], 'mapped', [33459]],
        [[194965, 194965], 'mapped', [33469]],
        [[194966, 194966], 'mapped', [33510]],
        [[194967, 194967], 'mapped', [158524]],
        [[194968, 194968], 'mapped', [33509]],
        [[194969, 194969], 'mapped', [33565]],
        [[194970, 194970], 'mapped', [33635]],
        [[194971, 194971], 'mapped', [33709]],
        [[194972, 194972], 'mapped', [33571]],
        [[194973, 194973], 'mapped', [33725]],
        [[194974, 194974], 'mapped', [33767]],
        [[194975, 194975], 'mapped', [33879]],
        [[194976, 194976], 'mapped', [33619]],
        [[194977, 194977], 'mapped', [33738]],
        [[194978, 194978], 'mapped', [33740]],
        [[194979, 194979], 'mapped', [33756]],
        [[194980, 194980], 'mapped', [158774]],
        [[194981, 194981], 'mapped', [159083]],
        [[194982, 194982], 'mapped', [158933]],
        [[194983, 194983], 'mapped', [17707]],
        [[194984, 194984], 'mapped', [34033]],
        [[194985, 194985], 'mapped', [34035]],
        [[194986, 194986], 'mapped', [34070]],
        [[194987, 194987], 'mapped', [160714]],
        [[194988, 194988], 'mapped', [34148]],
        [[194989, 194989], 'mapped', [159532]],
        [[194990, 194990], 'mapped', [17757]],
        [[194991, 194991], 'mapped', [17761]],
        [[194992, 194992], 'mapped', [159665]],
        [[194993, 194993], 'mapped', [159954]],
        [[194994, 194994], 'mapped', [17771]],
        [[194995, 194995], 'mapped', [34384]],
        [[194996, 194996], 'mapped', [34396]],
        [[194997, 194997], 'mapped', [34407]],
        [[194998, 194998], 'mapped', [34409]],
        [[194999, 194999], 'mapped', [34473]],
        [[195e3, 195e3], 'mapped', [34440]],
        [[195001, 195001], 'mapped', [34574]],
        [[195002, 195002], 'mapped', [34530]],
        [[195003, 195003], 'mapped', [34681]],
        [[195004, 195004], 'mapped', [34600]],
        [[195005, 195005], 'mapped', [34667]],
        [[195006, 195006], 'mapped', [34694]],
        [[195007, 195007], 'disallowed'],
        [[195008, 195008], 'mapped', [34785]],
        [[195009, 195009], 'mapped', [34817]],
        [[195010, 195010], 'mapped', [17913]],
        [[195011, 195011], 'mapped', [34912]],
        [[195012, 195012], 'mapped', [34915]],
        [[195013, 195013], 'mapped', [161383]],
        [[195014, 195014], 'mapped', [35031]],
        [[195015, 195015], 'mapped', [35038]],
        [[195016, 195016], 'mapped', [17973]],
        [[195017, 195017], 'mapped', [35066]],
        [[195018, 195018], 'mapped', [13499]],
        [[195019, 195019], 'mapped', [161966]],
        [[195020, 195020], 'mapped', [162150]],
        [[195021, 195021], 'mapped', [18110]],
        [[195022, 195022], 'mapped', [18119]],
        [[195023, 195023], 'mapped', [35488]],
        [[195024, 195024], 'mapped', [35565]],
        [[195025, 195025], 'mapped', [35722]],
        [[195026, 195026], 'mapped', [35925]],
        [[195027, 195027], 'mapped', [162984]],
        [[195028, 195028], 'mapped', [36011]],
        [[195029, 195029], 'mapped', [36033]],
        [[195030, 195030], 'mapped', [36123]],
        [[195031, 195031], 'mapped', [36215]],
        [[195032, 195032], 'mapped', [163631]],
        [[195033, 195033], 'mapped', [133124]],
        [[195034, 195034], 'mapped', [36299]],
        [[195035, 195035], 'mapped', [36284]],
        [[195036, 195036], 'mapped', [36336]],
        [[195037, 195037], 'mapped', [133342]],
        [[195038, 195038], 'mapped', [36564]],
        [[195039, 195039], 'mapped', [36664]],
        [[195040, 195040], 'mapped', [165330]],
        [[195041, 195041], 'mapped', [165357]],
        [[195042, 195042], 'mapped', [37012]],
        [[195043, 195043], 'mapped', [37105]],
        [[195044, 195044], 'mapped', [37137]],
        [[195045, 195045], 'mapped', [165678]],
        [[195046, 195046], 'mapped', [37147]],
        [[195047, 195047], 'mapped', [37432]],
        [[195048, 195048], 'mapped', [37591]],
        [[195049, 195049], 'mapped', [37592]],
        [[195050, 195050], 'mapped', [37500]],
        [[195051, 195051], 'mapped', [37881]],
        [[195052, 195052], 'mapped', [37909]],
        [[195053, 195053], 'mapped', [166906]],
        [[195054, 195054], 'mapped', [38283]],
        [[195055, 195055], 'mapped', [18837]],
        [[195056, 195056], 'mapped', [38327]],
        [[195057, 195057], 'mapped', [167287]],
        [[195058, 195058], 'mapped', [18918]],
        [[195059, 195059], 'mapped', [38595]],
        [[195060, 195060], 'mapped', [23986]],
        [[195061, 195061], 'mapped', [38691]],
        [[195062, 195062], 'mapped', [168261]],
        [[195063, 195063], 'mapped', [168474]],
        [[195064, 195064], 'mapped', [19054]],
        [[195065, 195065], 'mapped', [19062]],
        [[195066, 195066], 'mapped', [38880]],
        [[195067, 195067], 'mapped', [168970]],
        [[195068, 195068], 'mapped', [19122]],
        [[195069, 195069], 'mapped', [169110]],
        [[195070, 195071], 'mapped', [38923]],
        [[195072, 195072], 'mapped', [38953]],
        [[195073, 195073], 'mapped', [169398]],
        [[195074, 195074], 'mapped', [39138]],
        [[195075, 195075], 'mapped', [19251]],
        [[195076, 195076], 'mapped', [39209]],
        [[195077, 195077], 'mapped', [39335]],
        [[195078, 195078], 'mapped', [39362]],
        [[195079, 195079], 'mapped', [39422]],
        [[195080, 195080], 'mapped', [19406]],
        [[195081, 195081], 'mapped', [170800]],
        [[195082, 195082], 'mapped', [39698]],
        [[195083, 195083], 'mapped', [4e4]],
        [[195084, 195084], 'mapped', [40189]],
        [[195085, 195085], 'mapped', [19662]],
        [[195086, 195086], 'mapped', [19693]],
        [[195087, 195087], 'mapped', [40295]],
        [[195088, 195088], 'mapped', [172238]],
        [[195089, 195089], 'mapped', [19704]],
        [[195090, 195090], 'mapped', [172293]],
        [[195091, 195091], 'mapped', [172558]],
        [[195092, 195092], 'mapped', [172689]],
        [[195093, 195093], 'mapped', [40635]],
        [[195094, 195094], 'mapped', [19798]],
        [[195095, 195095], 'mapped', [40697]],
        [[195096, 195096], 'mapped', [40702]],
        [[195097, 195097], 'mapped', [40709]],
        [[195098, 195098], 'mapped', [40719]],
        [[195099, 195099], 'mapped', [40726]],
        [[195100, 195100], 'mapped', [40763]],
        [[195101, 195101], 'mapped', [173568]],
        [[195102, 196605], 'disallowed'],
        [[196606, 196607], 'disallowed'],
        [[196608, 262141], 'disallowed'],
        [[262142, 262143], 'disallowed'],
        [[262144, 327677], 'disallowed'],
        [[327678, 327679], 'disallowed'],
        [[327680, 393213], 'disallowed'],
        [[393214, 393215], 'disallowed'],
        [[393216, 458749], 'disallowed'],
        [[458750, 458751], 'disallowed'],
        [[458752, 524285], 'disallowed'],
        [[524286, 524287], 'disallowed'],
        [[524288, 589821], 'disallowed'],
        [[589822, 589823], 'disallowed'],
        [[589824, 655357], 'disallowed'],
        [[655358, 655359], 'disallowed'],
        [[655360, 720893], 'disallowed'],
        [[720894, 720895], 'disallowed'],
        [[720896, 786429], 'disallowed'],
        [[786430, 786431], 'disallowed'],
        [[786432, 851965], 'disallowed'],
        [[851966, 851967], 'disallowed'],
        [[851968, 917501], 'disallowed'],
        [[917502, 917503], 'disallowed'],
        [[917504, 917504], 'disallowed'],
        [[917505, 917505], 'disallowed'],
        [[917506, 917535], 'disallowed'],
        [[917536, 917631], 'disallowed'],
        [[917632, 917759], 'disallowed'],
        [[917760, 917999], 'ignored'],
        [[918e3, 983037], 'disallowed'],
        [[983038, 983039], 'disallowed'],
        [[983040, 1048573], 'disallowed'],
        [[1048574, 1048575], 'disallowed'],
        [[1048576, 1114109], 'disallowed'],
        [[1114110, 1114111], 'disallowed']
      ];
    }
  }),
  od = Re({
    'node_modules/tr46/index.js'(e, t) {
      'use strict';
      var a = (Tp(), Br),
        r = id(),
        n = { TRANSITIONAL: 0, NONTRANSITIONAL: 1 };
      function s(g) {
        return g
          .split('\0')
          .map(function (y) {
            return y.normalize('NFC');
          })
          .join('\0');
      }
      function p(g) {
        for (var y = 0, N = r.length - 1; y <= N; ) {
          var T = Math.floor((y + N) / 2),
            O = r[T];
          if (O[0][0] <= g && O[0][1] >= g) return O;
          O[0][0] > g ? (N = T - 1) : (y = T + 1);
        }
        return null;
      }
      var i = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      function d(g) {
        return g.replace(i, '_').length;
      }
      function l(g, y, N) {
        for (var T = !1, O = '', B = d(g), M = 0; M < B; ++M) {
          var C = g.codePointAt(M),
            L = p(C);
          switch (L[1]) {
            case 'disallowed':
              (T = !0), (O += String.fromCodePoint(C));
              break;
            case 'ignored':
              break;
            case 'mapped':
              O += String.fromCodePoint.apply(String, L[2]);
              break;
            case 'deviation':
              N === n.TRANSITIONAL
                ? (O += String.fromCodePoint.apply(String, L[2]))
                : (O += String.fromCodePoint(C));
              break;
            case 'valid':
              O += String.fromCodePoint(C);
              break;
            case 'disallowed_STD3_mapped':
              y
                ? ((T = !0), (O += String.fromCodePoint(C)))
                : (O += String.fromCodePoint.apply(String, L[2]));
              break;
            case 'disallowed_STD3_valid':
              y && (T = !0), (O += String.fromCodePoint(C));
              break;
          }
        }
        return { string: O, error: T };
      }
      var m =
        /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
      function u(g, y) {
        g.substr(0, 4) === 'xn--' && ((g = a.toUnicode(g)), (y = n.NONTRANSITIONAL));
        var N = !1;
        (s(g) !== g ||
          (g[3] === '-' && g[4] === '-') ||
          g[0] === '-' ||
          g[g.length - 1] === '-' ||
          g.indexOf('.') !== -1 ||
          g.search(m) === 0) &&
          (N = !0);
        for (var T = d(g), O = 0; O < T; ++O) {
          var B = p(g.codePointAt(O));
          if (
            (f === n.TRANSITIONAL && B[1] !== 'valid') ||
            (f === n.NONTRANSITIONAL && B[1] !== 'valid' && B[1] !== 'deviation')
          ) {
            N = !0;
            break;
          }
        }
        return { label: g, error: N };
      }
      function f(g, y, N) {
        var T = l(g, y, N);
        T.string = s(T.string);
        for (var O = T.string.split('.'), B = 0; B < O.length; ++B)
          try {
            var M = u(O[B]);
            (O[B] = M.label), (T.error = T.error || M.error);
          } catch {
            T.error = !0;
          }
        return { string: O.join('.'), error: T.error };
      }
      (t.exports.toASCII = function (g, y, N, T) {
        var O = f(g, y, N),
          B = O.string.split('.');
        if (
          ((B = B.map(function (L) {
            try {
              return a.toASCII(L);
            } catch {
              return (O.error = !0), L;
            }
          })),
          T)
        ) {
          var M = B.slice(0, B.length - 1).join('.').length;
          (M.length > 253 || M.length === 0) && (O.error = !0);
          for (var C = 0; C < B.length; ++C)
            if (B.length > 63 || B.length === 0) {
              O.error = !0;
              break;
            }
        }
        return O.error ? null : B.join('.');
      }),
        (t.exports.toUnicode = function (g, y) {
          var N = f(g, y, n.NONTRANSITIONAL);
          return { domain: N.string, error: N.error };
        }),
        (t.exports.PROCESSING_OPTIONS = n);
    }
  }),
  Ft = Re({
    'node_modules/whatwg-url/lib/url-state-machine.js'(e, t) {
      'use strict';
      var a = (Tp(), Br),
        r = od(),
        n = { ftp: 21, file: null, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 },
        s = Symbol('failure');
      function p(D) {
        return a.ucs2.decode(D).length;
      }
      function i(D, A) {
        let j = D[A];
        return isNaN(j) ? void 0 : String.fromCodePoint(j);
      }
      function d(D) {
        return D >= 48 && D <= 57;
      }
      function l(D) {
        return (D >= 65 && D <= 90) || (D >= 97 && D <= 122);
      }
      function m(D) {
        return l(D) || d(D);
      }
      function u(D) {
        return d(D) || (D >= 65 && D <= 70) || (D >= 97 && D <= 102);
      }
      function f(D) {
        return D === '.' || D.toLowerCase() === '%2e';
      }
      function g(D) {
        return (D = D.toLowerCase()), D === '..' || D === '%2e.' || D === '.%2e' || D === '%2e%2e';
      }
      function y(D, A) {
        return l(D) && (A === 58 || A === 124);
      }
      function N(D) {
        return D.length === 2 && l(D.codePointAt(0)) && (D[1] === ':' || D[1] === '|');
      }
      function T(D) {
        return D.length === 2 && l(D.codePointAt(0)) && D[1] === ':';
      }
      function O(D) {
        return D.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
      }
      function B(D) {
        return D.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
      }
      function M(D) {
        return n[D] !== void 0;
      }
      function C(D) {
        return M(D.scheme);
      }
      function L(D) {
        return n[D];
      }
      function z(D) {
        let A = D.toString(16).toUpperCase();
        return A.length === 1 && (A = '0' + A), '%' + A;
      }
      function X(D) {
        let A = new Buffer(D),
          j = '';
        for (let H = 0; H < A.length; ++H) j += z(A[H]);
        return j;
      }
      function Y(D) {
        let A = new Buffer(D),
          j = [];
        for (let H = 0; H < A.length; ++H)
          A[H] !== 37
            ? j.push(A[H])
            : A[H] === 37 && u(A[H + 1]) && u(A[H + 2])
            ? (j.push(parseInt(A.slice(H + 1, H + 3).toString(), 16)), (H += 2))
            : j.push(A[H]);
        return new Buffer(j).toString();
      }
      function J(D) {
        return D <= 31 || D > 126;
      }
      var Z = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
      function F(D) {
        return J(D) || Z.has(D);
      }
      var R = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
      function _(D) {
        return F(D) || R.has(D);
      }
      function q(D, A) {
        let j = String.fromCodePoint(D);
        return A(D) ? X(j) : j;
      }
      function G(D) {
        let A = 10;
        return (
          D.length >= 2 && D.charAt(0) === '0' && D.charAt(1).toLowerCase() === 'x'
            ? ((D = D.substring(2)), (A = 16))
            : D.length >= 2 && D.charAt(0) === '0' && ((D = D.substring(1)), (A = 8)),
          D === ''
            ? 0
            : (A === 10 ? /[^0-9]/ : A === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/).test(D)
            ? s
            : parseInt(D, A)
        );
      }
      function ie(D) {
        let A = D.split('.');
        if ((A[A.length - 1] === '' && A.length > 1 && A.pop(), A.length > 4)) return D;
        let j = [];
        for (let me of A) {
          if (me === '') return D;
          let he = G(me);
          if (he === s) return D;
          j.push(he);
        }
        for (let me = 0; me < j.length - 1; ++me) if (j[me] > 255) return s;
        if (j[j.length - 1] >= Math.pow(256, 5 - j.length)) return s;
        let H = j.pop(),
          Q = 0;
        for (let me of j) (H += me * Math.pow(256, 3 - Q)), ++Q;
        return H;
      }
      function ne(D) {
        let A = '',
          j = D;
        for (let H = 1; H <= 4; ++H)
          (A = String(j % 256) + A), H !== 4 && (A = '.' + A), (j = Math.floor(j / 256));
        return A;
      }
      function ye(D) {
        let A = [0, 0, 0, 0, 0, 0, 0, 0],
          j = 0,
          H = null,
          Q = 0;
        if (((D = a.ucs2.decode(D)), D[Q] === 58)) {
          if (D[Q + 1] !== 58) return s;
          (Q += 2), ++j, (H = j);
        }
        for (; Q < D.length; ) {
          if (j === 8) return s;
          if (D[Q] === 58) {
            if (H !== null) return s;
            ++Q, ++j, (H = j);
            continue;
          }
          let me = 0,
            he = 0;
          for (; he < 4 && u(D[Q]); ) (me = me * 16 + parseInt(i(D, Q), 16)), ++Q, ++he;
          if (D[Q] === 46) {
            if (he === 0 || ((Q -= he), j > 6)) return s;
            let tt = 0;
            for (; D[Q] !== void 0; ) {
              let nt = null;
              if (tt > 0)
                if (D[Q] === 46 && tt < 4) ++Q;
                else return s;
              if (!d(D[Q])) return s;
              for (; d(D[Q]); ) {
                let T1 = parseInt(i(D, Q));
                if (nt === null) nt = T1;
                else {
                  if (nt === 0) return s;
                  nt = nt * 10 + T1;
                }
                if (nt > 255) return s;
                ++Q;
              }
              (A[j] = A[j] * 256 + nt), ++tt, (tt === 2 || tt === 4) && ++j;
            }
            if (tt !== 4) return s;
            break;
          } else if (D[Q] === 58) {
            if ((++Q, D[Q] === void 0)) return s;
          } else if (D[Q] !== void 0) return s;
          (A[j] = me), ++j;
        }
        if (H !== null) {
          let me = j - H;
          for (j = 7; j !== 0 && me > 0; ) {
            let he = A[H + me - 1];
            (A[H + me - 1] = A[j]), (A[j] = he), --j, --me;
          }
        } else if (H === null && j !== 8) return s;
        return A;
      }
      function De(D) {
        let A = '',
          H = xe(D).idx,
          Q = !1;
        for (let me = 0; me <= 7; ++me)
          if (!(Q && D[me] === 0)) {
            if ((Q && (Q = !1), H === me)) {
              (A += me === 0 ? '::' : ':'), (Q = !0);
              continue;
            }
            (A += D[me].toString(16)), me !== 7 && (A += ':');
          }
        return A;
      }
      function Ce(D, A) {
        if (D[0] === '[') return D[D.length - 1] !== ']' ? s : ye(D.substring(1, D.length - 1));
        if (!A) return Fe(D);
        let j = Y(D),
          H = r.toASCII(j, !1, r.PROCESSING_OPTIONS.NONTRANSITIONAL, !1);
        if (H === null || O(H)) return s;
        let Q = ie(H);
        return typeof Q == 'number' || Q === s ? Q : H;
      }
      function Fe(D) {
        if (B(D)) return s;
        let A = '',
          j = a.ucs2.decode(D);
        for (let H = 0; H < j.length; ++H) A += q(j[H], J);
        return A;
      }
      function xe(D) {
        let A = null,
          j = 1,
          H = null,
          Q = 0;
        for (let me = 0; me < D.length; ++me)
          D[me] !== 0
            ? (Q > j && ((A = H), (j = Q)), (H = null), (Q = 0))
            : (H === null && (H = me), ++Q);
        return Q > j && ((A = H), (j = Q)), { idx: A, len: j };
      }
      function Oe(D) {
        return typeof D == 'number' ? ne(D) : D instanceof Array ? '[' + De(D) + ']' : D;
      }
      function ke(D) {
        return D.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, '');
      }
      function Me(D) {
        return D.replace(/\u0009|\u000A|\u000D/g, '');
      }
      function Ct(D) {
        let A = D.path;
        A.length !== 0 && ((D.scheme === 'file' && A.length === 1 && H1(A[0])) || A.pop());
      }
      function q1(D) {
        return D.username !== '' || D.password !== '';
      }
      function Sa(D) {
        return D.host === null || D.host === '' || D.cannotBeABaseURL || D.scheme === 'file';
      }
      function H1(D) {
        return /^[A-Za-z]:$/.test(D);
      }
      function Ne(D, A, j, H, Q) {
        if (
          ((this.pointer = 0),
          (this.input = D),
          (this.base = A || null),
          (this.encodingOverride = j || 'utf-8'),
          (this.stateOverride = Q),
          (this.url = H),
          (this.failure = !1),
          (this.parseError = !1),
          !this.url)
        ) {
          this.url = {
            scheme: '',
            username: '',
            password: '',
            host: null,
            port: null,
            path: [],
            query: null,
            fragment: null,
            cannotBeABaseURL: !1
          };
          let he = ke(this.input);
          he !== this.input && (this.parseError = !0), (this.input = he);
        }
        let me = Me(this.input);
        for (
          me !== this.input && (this.parseError = !0),
            this.input = me,
            this.state = Q || 'scheme start',
            this.buffer = '',
            this.atFlag = !1,
            this.arrFlag = !1,
            this.passwordTokenSeenFlag = !1,
            this.input = a.ucs2.decode(this.input);
          this.pointer <= this.input.length;
          ++this.pointer
        ) {
          let he = this.input[this.pointer],
            tt = isNaN(he) ? void 0 : String.fromCodePoint(he),
            nt = this['parse ' + this.state](he, tt);
          if (nt) {
            if (nt === s) {
              this.failure = !0;
              break;
            }
          } else break;
        }
      }
      (Ne.prototype['parse scheme start'] = function (A, j) {
        if (l(A)) (this.buffer += j.toLowerCase()), (this.state = 'scheme');
        else if (!this.stateOverride) (this.state = 'no scheme'), --this.pointer;
        else return (this.parseError = !0), s;
        return !0;
      }),
        (Ne.prototype['parse scheme'] = function (A, j) {
          if (m(A) || A === 43 || A === 45 || A === 46) this.buffer += j.toLowerCase();
          else if (A === 58) {
            if (
              (this.stateOverride &&
                ((C(this.url) && !M(this.buffer)) ||
                  (!C(this.url) && M(this.buffer)) ||
                  ((q1(this.url) || this.url.port !== null) && this.buffer === 'file') ||
                  (this.url.scheme === 'file' &&
                    (this.url.host === '' || this.url.host === null)))) ||
              ((this.url.scheme = this.buffer), (this.buffer = ''), this.stateOverride)
            )
              return !1;
            this.url.scheme === 'file'
              ? ((this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) &&
                  (this.parseError = !0),
                (this.state = 'file'))
              : C(this.url) && this.base !== null && this.base.scheme === this.url.scheme
              ? (this.state = 'special relative or authority')
              : C(this.url)
              ? (this.state = 'special authority slashes')
              : this.input[this.pointer + 1] === 47
              ? ((this.state = 'path or authority'), ++this.pointer)
              : ((this.url.cannotBeABaseURL = !0),
                this.url.path.push(''),
                (this.state = 'cannot-be-a-base-URL path'));
          } else if (!this.stateOverride)
            (this.buffer = ''), (this.state = 'no scheme'), (this.pointer = -1);
          else return (this.parseError = !0), s;
          return !0;
        }),
        (Ne.prototype['parse no scheme'] = function (A) {
          return this.base === null || (this.base.cannotBeABaseURL && A !== 35)
            ? s
            : (this.base.cannotBeABaseURL && A === 35
                ? ((this.url.scheme = this.base.scheme),
                  (this.url.path = this.base.path.slice()),
                  (this.url.query = this.base.query),
                  (this.url.fragment = ''),
                  (this.url.cannotBeABaseURL = !0),
                  (this.state = 'fragment'))
                : this.base.scheme === 'file'
                ? ((this.state = 'file'), --this.pointer)
                : ((this.state = 'relative'), --this.pointer),
              !0);
        }),
        (Ne.prototype['parse special relative or authority'] = function (A) {
          return (
            A === 47 && this.input[this.pointer + 1] === 47
              ? ((this.state = 'special authority ignore slashes'), ++this.pointer)
              : ((this.parseError = !0), (this.state = 'relative'), --this.pointer),
            !0
          );
        }),
        (Ne.prototype['parse path or authority'] = function (A) {
          return (
            A === 47 ? (this.state = 'authority') : ((this.state = 'path'), --this.pointer), !0
          );
        }),
        (Ne.prototype['parse relative'] = function (A) {
          return (
            (this.url.scheme = this.base.scheme),
            isNaN(A)
              ? ((this.url.username = this.base.username),
                (this.url.password = this.base.password),
                (this.url.host = this.base.host),
                (this.url.port = this.base.port),
                (this.url.path = this.base.path.slice()),
                (this.url.query = this.base.query))
              : A === 47
              ? (this.state = 'relative slash')
              : A === 63
              ? ((this.url.username = this.base.username),
                (this.url.password = this.base.password),
                (this.url.host = this.base.host),
                (this.url.port = this.base.port),
                (this.url.path = this.base.path.slice()),
                (this.url.query = ''),
                (this.state = 'query'))
              : A === 35
              ? ((this.url.username = this.base.username),
                (this.url.password = this.base.password),
                (this.url.host = this.base.host),
                (this.url.port = this.base.port),
                (this.url.path = this.base.path.slice()),
                (this.url.query = this.base.query),
                (this.url.fragment = ''),
                (this.state = 'fragment'))
              : C(this.url) && A === 92
              ? ((this.parseError = !0), (this.state = 'relative slash'))
              : ((this.url.username = this.base.username),
                (this.url.password = this.base.password),
                (this.url.host = this.base.host),
                (this.url.port = this.base.port),
                (this.url.path = this.base.path.slice(0, this.base.path.length - 1)),
                (this.state = 'path'),
                --this.pointer),
            !0
          );
        }),
        (Ne.prototype['parse relative slash'] = function (A) {
          return (
            C(this.url) && (A === 47 || A === 92)
              ? (A === 92 && (this.parseError = !0),
                (this.state = 'special authority ignore slashes'))
              : A === 47
              ? (this.state = 'authority')
              : ((this.url.username = this.base.username),
                (this.url.password = this.base.password),
                (this.url.host = this.base.host),
                (this.url.port = this.base.port),
                (this.state = 'path'),
                --this.pointer),
            !0
          );
        }),
        (Ne.prototype['parse special authority slashes'] = function (A) {
          return (
            A === 47 && this.input[this.pointer + 1] === 47
              ? ((this.state = 'special authority ignore slashes'), ++this.pointer)
              : ((this.parseError = !0),
                (this.state = 'special authority ignore slashes'),
                --this.pointer),
            !0
          );
        }),
        (Ne.prototype['parse special authority ignore slashes'] = function (A) {
          return (
            A !== 47 && A !== 92
              ? ((this.state = 'authority'), --this.pointer)
              : (this.parseError = !0),
            !0
          );
        }),
        (Ne.prototype['parse authority'] = function (A, j) {
          if (A === 64) {
            (this.parseError = !0),
              this.atFlag && (this.buffer = '%40' + this.buffer),
              (this.atFlag = !0);
            let H = p(this.buffer);
            for (let Q = 0; Q < H; ++Q) {
              let me = this.buffer.codePointAt(Q);
              if (me === 58 && !this.passwordTokenSeenFlag) {
                this.passwordTokenSeenFlag = !0;
                continue;
              }
              let he = q(me, _);
              this.passwordTokenSeenFlag ? (this.url.password += he) : (this.url.username += he);
            }
            this.buffer = '';
          } else if (isNaN(A) || A === 47 || A === 63 || A === 35 || (C(this.url) && A === 92)) {
            if (this.atFlag && this.buffer === '') return (this.parseError = !0), s;
            (this.pointer -= p(this.buffer) + 1), (this.buffer = ''), (this.state = 'host');
          } else this.buffer += j;
          return !0;
        }),
        (Ne.prototype['parse hostname'] = Ne.prototype['parse host'] =
          function (A, j) {
            if (this.stateOverride && this.url.scheme === 'file')
              --this.pointer, (this.state = 'file host');
            else if (A === 58 && !this.arrFlag) {
              if (this.buffer === '') return (this.parseError = !0), s;
              let H = Ce(this.buffer, C(this.url));
              if (H === s) return s;
              if (
                ((this.url.host = H),
                (this.buffer = ''),
                (this.state = 'port'),
                this.stateOverride === 'hostname')
              )
                return !1;
            } else if (isNaN(A) || A === 47 || A === 63 || A === 35 || (C(this.url) && A === 92)) {
              if ((--this.pointer, C(this.url) && this.buffer === ''))
                return (this.parseError = !0), s;
              if (
                this.stateOverride &&
                this.buffer === '' &&
                (q1(this.url) || this.url.port !== null)
              )
                return (this.parseError = !0), !1;
              let H = Ce(this.buffer, C(this.url));
              if (H === s) return s;
              if (
                ((this.url.host = H),
                (this.buffer = ''),
                (this.state = 'path start'),
                this.stateOverride)
              )
                return !1;
            } else
              A === 91 ? (this.arrFlag = !0) : A === 93 && (this.arrFlag = !1), (this.buffer += j);
            return !0;
          }),
        (Ne.prototype['parse port'] = function (A, j) {
          if (d(A)) this.buffer += j;
          else if (
            isNaN(A) ||
            A === 47 ||
            A === 63 ||
            A === 35 ||
            (C(this.url) && A === 92) ||
            this.stateOverride
          ) {
            if (this.buffer !== '') {
              let H = parseInt(this.buffer);
              if (H > Math.pow(2, 16) - 1) return (this.parseError = !0), s;
              (this.url.port = H === L(this.url.scheme) ? null : H), (this.buffer = '');
            }
            if (this.stateOverride) return !1;
            (this.state = 'path start'), --this.pointer;
          } else return (this.parseError = !0), s;
          return !0;
        });
      var Ta = new Set([47, 92, 63, 35]);
      (Ne.prototype['parse file'] = function (A) {
        return (
          (this.url.scheme = 'file'),
          A === 47 || A === 92
            ? (A === 92 && (this.parseError = !0), (this.state = 'file slash'))
            : this.base !== null && this.base.scheme === 'file'
            ? isNaN(A)
              ? ((this.url.host = this.base.host),
                (this.url.path = this.base.path.slice()),
                (this.url.query = this.base.query))
              : A === 63
              ? ((this.url.host = this.base.host),
                (this.url.path = this.base.path.slice()),
                (this.url.query = ''),
                (this.state = 'query'))
              : A === 35
              ? ((this.url.host = this.base.host),
                (this.url.path = this.base.path.slice()),
                (this.url.query = this.base.query),
                (this.url.fragment = ''),
                (this.state = 'fragment'))
              : (this.input.length - this.pointer - 1 == 0 ||
                !y(A, this.input[this.pointer + 1]) ||
                (this.input.length - this.pointer - 1 >= 2 && !Ta.has(this.input[this.pointer + 2]))
                  ? ((this.url.host = this.base.host),
                    (this.url.path = this.base.path.slice()),
                    Ct(this.url))
                  : (this.parseError = !0),
                (this.state = 'path'),
                --this.pointer)
            : ((this.state = 'path'), --this.pointer),
          !0
        );
      }),
        (Ne.prototype['parse file slash'] = function (A) {
          return (
            A === 47 || A === 92
              ? (A === 92 && (this.parseError = !0), (this.state = 'file host'))
              : (this.base !== null &&
                  this.base.scheme === 'file' &&
                  (T(this.base.path[0])
                    ? this.url.path.push(this.base.path[0])
                    : (this.url.host = this.base.host)),
                (this.state = 'path'),
                --this.pointer),
            !0
          );
        }),
        (Ne.prototype['parse file host'] = function (A, j) {
          if (isNaN(A) || A === 47 || A === 92 || A === 63 || A === 35)
            if ((--this.pointer, !this.stateOverride && N(this.buffer)))
              (this.parseError = !0), (this.state = 'path');
            else if (this.buffer === '') {
              if (((this.url.host = ''), this.stateOverride)) return !1;
              this.state = 'path start';
            } else {
              let H = Ce(this.buffer, C(this.url));
              if (H === s) return s;
              if ((H === 'localhost' && (H = ''), (this.url.host = H), this.stateOverride))
                return !1;
              (this.buffer = ''), (this.state = 'path start');
            }
          else this.buffer += j;
          return !0;
        }),
        (Ne.prototype['parse path start'] = function (A) {
          return (
            C(this.url)
              ? (A === 92 && (this.parseError = !0),
                (this.state = 'path'),
                A !== 47 && A !== 92 && --this.pointer)
              : !this.stateOverride && A === 63
              ? ((this.url.query = ''), (this.state = 'query'))
              : !this.stateOverride && A === 35
              ? ((this.url.fragment = ''), (this.state = 'fragment'))
              : A !== void 0 && ((this.state = 'path'), A !== 47 && --this.pointer),
            !0
          );
        }),
        (Ne.prototype['parse path'] = function (A) {
          if (
            isNaN(A) ||
            A === 47 ||
            (C(this.url) && A === 92) ||
            (!this.stateOverride && (A === 63 || A === 35))
          ) {
            if (
              (C(this.url) && A === 92 && (this.parseError = !0),
              g(this.buffer)
                ? (Ct(this.url), A !== 47 && !(C(this.url) && A === 92) && this.url.path.push(''))
                : f(this.buffer) && A !== 47 && !(C(this.url) && A === 92)
                ? this.url.path.push('')
                : f(this.buffer) ||
                  (this.url.scheme === 'file' &&
                    this.url.path.length === 0 &&
                    N(this.buffer) &&
                    (this.url.host !== '' &&
                      this.url.host !== null &&
                      ((this.parseError = !0), (this.url.host = '')),
                    (this.buffer = this.buffer[0] + ':')),
                  this.url.path.push(this.buffer)),
              (this.buffer = ''),
              this.url.scheme === 'file' && (A === void 0 || A === 63 || A === 35))
            )
              for (; this.url.path.length > 1 && this.url.path[0] === ''; )
                (this.parseError = !0), this.url.path.shift();
            A === 63 && ((this.url.query = ''), (this.state = 'query')),
              A === 35 && ((this.url.fragment = ''), (this.state = 'fragment'));
          } else
            A === 37 &&
              (!u(this.input[this.pointer + 1]) || !u(this.input[this.pointer + 2])) &&
              (this.parseError = !0),
              (this.buffer += q(A, F));
          return !0;
        }),
        (Ne.prototype['parse cannot-be-a-base-URL path'] = function (A) {
          return (
            A === 63
              ? ((this.url.query = ''), (this.state = 'query'))
              : A === 35
              ? ((this.url.fragment = ''), (this.state = 'fragment'))
              : (!isNaN(A) && A !== 37 && (this.parseError = !0),
                A === 37 &&
                  (!u(this.input[this.pointer + 1]) || !u(this.input[this.pointer + 2])) &&
                  (this.parseError = !0),
                isNaN(A) || (this.url.path[0] = this.url.path[0] + q(A, J))),
            !0
          );
        }),
        (Ne.prototype['parse query'] = function (A, j) {
          if (isNaN(A) || (!this.stateOverride && A === 35)) {
            (!C(this.url) || this.url.scheme === 'ws' || this.url.scheme === 'wss') &&
              (this.encodingOverride = 'utf-8');
            let H = new Buffer(this.buffer);
            for (let Q = 0; Q < H.length; ++Q)
              H[Q] < 33 || H[Q] > 126 || H[Q] === 34 || H[Q] === 35 || H[Q] === 60 || H[Q] === 62
                ? (this.url.query += z(H[Q]))
                : (this.url.query += String.fromCodePoint(H[Q]));
            (this.buffer = ''), A === 35 && ((this.url.fragment = ''), (this.state = 'fragment'));
          } else
            A === 37 &&
              (!u(this.input[this.pointer + 1]) || !u(this.input[this.pointer + 2])) &&
              (this.parseError = !0),
              (this.buffer += j);
          return !0;
        }),
        (Ne.prototype['parse fragment'] = function (A) {
          return (
            isNaN(A) ||
              (A === 0
                ? (this.parseError = !0)
                : (A === 37 &&
                    (!u(this.input[this.pointer + 1]) || !u(this.input[this.pointer + 2])) &&
                    (this.parseError = !0),
                  (this.url.fragment += q(A, J)))),
            !0
          );
        });
      function xr(D, A) {
        let j = D.scheme + ':';
        if (
          (D.host !== null
            ? ((j += '//'),
              (D.username !== '' || D.password !== '') &&
                ((j += D.username), D.password !== '' && (j += ':' + D.password), (j += '@')),
              (j += Oe(D.host)),
              D.port !== null && (j += ':' + D.port))
            : D.host === null && D.scheme === 'file' && (j += '//'),
          D.cannotBeABaseURL)
        )
          j += D.path[0];
        else for (let H of D.path) j += '/' + H;
        return (
          D.query !== null && (j += '?' + D.query),
          !A && D.fragment !== null && (j += '#' + D.fragment),
          j
        );
      }
      function vt(D) {
        let A = D.scheme + '://';
        return (A += Oe(D.host)), D.port !== null && (A += ':' + D.port), A;
      }
      (t.exports.serializeURL = xr),
        (t.exports.serializeURLOrigin = function (D) {
          switch (D.scheme) {
            case 'blob':
              try {
                return t.exports.serializeURLOrigin(t.exports.parseURL(D.path[0]));
              } catch {
                return 'null';
              }
            case 'ftp':
            case 'gopher':
            case 'http':
            case 'https':
            case 'ws':
            case 'wss':
              return vt({ scheme: D.scheme, host: D.host, port: D.port });
            case 'file':
              return 'file://';
            default:
              return 'null';
          }
        }),
        (t.exports.basicURLParse = function (D, A) {
          A === void 0 && (A = {});
          let j = new Ne(D, A.baseURL, A.encodingOverride, A.url, A.stateOverride);
          return j.failure ? 'failure' : j.url;
        }),
        (t.exports.setTheUsername = function (D, A) {
          D.username = '';
          let j = a.ucs2.decode(A);
          for (let H = 0; H < j.length; ++H) D.username += q(j[H], _);
        }),
        (t.exports.setThePassword = function (D, A) {
          D.password = '';
          let j = a.ucs2.decode(A);
          for (let H = 0; H < j.length; ++H) D.password += q(j[H], _);
        }),
        (t.exports.serializeHost = Oe),
        (t.exports.cannotHaveAUsernamePasswordPort = Sa),
        (t.exports.serializeInteger = function (D) {
          return String(D);
        }),
        (t.exports.parseURL = function (D, A) {
          return (
            A === void 0 && (A = {}),
            t.exports.basicURLParse(D, { baseURL: A.baseURL, encodingOverride: A.encodingOverride })
          );
        });
    }
  }),
  dd = Re({
    'node_modules/whatwg-url/lib/URL-impl.js'(e) {
      'use strict';
      var t = Ft();
      e.implementation = class {
        constructor(r) {
          let n = r[0],
            s = r[1],
            p = null;
          if (s !== void 0 && ((p = t.basicURLParse(s)), p === 'failure'))
            throw new TypeError('Invalid base URL');
          let i = t.basicURLParse(n, { baseURL: p });
          if (i === 'failure') throw new TypeError('Invalid URL');
          this._url = i;
        }
        get href() {
          return t.serializeURL(this._url);
        }
        set href(r) {
          let n = t.basicURLParse(r);
          if (n === 'failure') throw new TypeError('Invalid URL');
          this._url = n;
        }
        get origin() {
          return t.serializeURLOrigin(this._url);
        }
        get protocol() {
          return this._url.scheme + ':';
        }
        set protocol(r) {
          t.basicURLParse(r + ':', { url: this._url, stateOverride: 'scheme start' });
        }
        get username() {
          return this._url.username;
        }
        set username(r) {
          t.cannotHaveAUsernamePasswordPort(this._url) || t.setTheUsername(this._url, r);
        }
        get password() {
          return this._url.password;
        }
        set password(r) {
          t.cannotHaveAUsernamePasswordPort(this._url) || t.setThePassword(this._url, r);
        }
        get host() {
          let r = this._url;
          return r.host === null
            ? ''
            : r.port === null
            ? t.serializeHost(r.host)
            : t.serializeHost(r.host) + ':' + t.serializeInteger(r.port);
        }
        set host(r) {
          this._url.cannotBeABaseURL ||
            t.basicURLParse(r, { url: this._url, stateOverride: 'host' });
        }
        get hostname() {
          return this._url.host === null ? '' : t.serializeHost(this._url.host);
        }
        set hostname(r) {
          this._url.cannotBeABaseURL ||
            t.basicURLParse(r, { url: this._url, stateOverride: 'hostname' });
        }
        get port() {
          return this._url.port === null ? '' : t.serializeInteger(this._url.port);
        }
        set port(r) {
          t.cannotHaveAUsernamePasswordPort(this._url) ||
            (r === ''
              ? (this._url.port = null)
              : t.basicURLParse(r, { url: this._url, stateOverride: 'port' }));
        }
        get pathname() {
          return this._url.cannotBeABaseURL
            ? this._url.path[0]
            : this._url.path.length === 0
            ? ''
            : '/' + this._url.path.join('/');
        }
        set pathname(r) {
          this._url.cannotBeABaseURL ||
            ((this._url.path = []),
            t.basicURLParse(r, { url: this._url, stateOverride: 'path start' }));
        }
        get search() {
          return this._url.query === null || this._url.query === '' ? '' : '?' + this._url.query;
        }
        set search(r) {
          let n = this._url;
          if (r === '') {
            n.query = null;
            return;
          }
          let s = r[0] === '?' ? r.substring(1) : r;
          (n.query = ''), t.basicURLParse(s, { url: n, stateOverride: 'query' });
        }
        get hash() {
          return this._url.fragment === null || this._url.fragment === ''
            ? ''
            : '#' + this._url.fragment;
        }
        set hash(r) {
          if (r === '') {
            this._url.fragment = null;
            return;
          }
          let n = r[0] === '#' ? r.substring(1) : r;
          (this._url.fragment = ''),
            t.basicURLParse(n, { url: this._url, stateOverride: 'fragment' });
        }
        toJSON() {
          return this.href;
        }
      };
    }
  }),
  ld = Re({
    'node_modules/whatwg-url/lib/URL.js'(e, t) {
      'use strict';
      var a = nd(),
        r = sd(),
        n = dd(),
        s = r.implSymbol;
      function p(i) {
        if (!this || this[s] || !(this instanceof p))
          throw new TypeError(
            "Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function."
          );
        if (arguments.length < 1)
          throw new TypeError(
            "Failed to construct 'URL': 1 argument required, but only " +
              arguments.length +
              ' present.'
          );
        let d = [];
        for (let l = 0; l < arguments.length && l < 2; ++l) d[l] = arguments[l];
        (d[0] = a.USVString(d[0])),
          d[1] !== void 0 && (d[1] = a.USVString(d[1])),
          t.exports.setup(this, d);
      }
      (p.prototype.toJSON = function () {
        if (!this || !t.exports.is(this)) throw new TypeError('Illegal invocation');
        let d = [];
        for (let l = 0; l < arguments.length && l < 0; ++l) d[l] = arguments[l];
        return this[s].toJSON.apply(this[s], d);
      }),
        Object.defineProperty(p.prototype, 'href', {
          get() {
            return this[s].href;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].href = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        (p.prototype.toString = function () {
          if (!this || !t.exports.is(this)) throw new TypeError('Illegal invocation');
          return this.href;
        }),
        Object.defineProperty(p.prototype, 'origin', {
          get() {
            return this[s].origin;
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(p.prototype, 'protocol', {
          get() {
            return this[s].protocol;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].protocol = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(p.prototype, 'username', {
          get() {
            return this[s].username;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].username = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(p.prototype, 'password', {
          get() {
            return this[s].password;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].password = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(p.prototype, 'host', {
          get() {
            return this[s].host;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].host = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(p.prototype, 'hostname', {
          get() {
            return this[s].hostname;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].hostname = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(p.prototype, 'port', {
          get() {
            return this[s].port;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].port = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(p.prototype, 'pathname', {
          get() {
            return this[s].pathname;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].pathname = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(p.prototype, 'search', {
          get() {
            return this[s].search;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].search = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        Object.defineProperty(p.prototype, 'hash', {
          get() {
            return this[s].hash;
          },
          set(i) {
            (i = a.USVString(i)), (this[s].hash = i);
          },
          enumerable: !0,
          configurable: !0
        }),
        (t.exports = {
          is(i) {
            return !!i && i[s] instanceof n.implementation;
          },
          create(i, d) {
            let l = Object.create(p.prototype);
            return this.setup(l, i, d), l;
          },
          setup(i, d, l) {
            l || (l = {}),
              (l.wrapper = i),
              (i[s] = new n.implementation(d, l)),
              (i[s][r.wrapperSymbol] = i);
          },
          interface: p,
          expose: { Window: { URL: p }, Worker: { URL: p } }
        });
    }
  }),
  md = Re({
    'node_modules/whatwg-url/lib/public-api.js'(e) {
      'use strict';
      (e.URL = ld().interface),
        (e.serializeURL = Ft().serializeURL),
        (e.serializeURLOrigin = Ft().serializeURLOrigin),
        (e.basicURLParse = Ft().basicURLParse),
        (e.setTheUsername = Ft().setTheUsername),
        (e.setThePassword = Ft().setThePassword),
        (e.serializeHost = Ft().serializeHost),
        (e.serializeInteger = Ft().serializeInteger),
        (e.parseURL = Ft().parseURL);
    }
  }),
  Ep,
  ud = At({
    'browser-external:https'() {
      Ep = new Proxy(
        {},
        {
          get() {
            throw new Error(
              'Module "https" has been externalized for browser compatibility and cannot be accessed in client code.'
            );
          }
        }
      );
    }
  }),
  Xt,
  cd = At({
    'browser-external:zlib'() {
      Xt = new Proxy(
        {},
        {
          get() {
            throw new Error(
              'Module "zlib" has been externalized for browser compatibility and cannot be accessed in client code.'
            );
          }
        }
      );
    }
  }),
  Dp = {};
be(Dp, {
  FetchError: () => Ge,
  Headers: () => ut,
  Request: () => Jt,
  Response: () => Nt,
  default: () => Lp
});
function Ge(e, t, a) {
  Error.call(this, e),
    (this.message = e),
    (this.type = t),
    a && (this.code = this.errno = a.code),
    Error.captureStackTrace(this, this.constructor);
}
function qe(e) {
  var t = this,
    a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
    r = a.size;
  let n = r === void 0 ? 0 : r;
  var s = a.timeout;
  let p = s === void 0 ? 0 : s;
  e == null
    ? (e = null)
    : xp(e)
    ? (e = Buffer.from(e.toString()))
    : Z1(e) ||
      Buffer.isBuffer(e) ||
      (Object.prototype.toString.call(e) === '[object ArrayBuffer]'
        ? (e = Buffer.from(e))
        : ArrayBuffer.isView(e)
        ? (e = Buffer.from(e.buffer, e.byteOffset, e.byteLength))
        : e instanceof mt || (e = Buffer.from(String(e)))),
    (this[$t] = { body: e, disturbed: !1, error: null }),
    (this.size = n),
    (this.timeout = p),
    e instanceof mt &&
      e.on('error', function (i) {
        let d =
          i.name === 'AbortError'
            ? i
            : new Ge(
                `Invalid response body while trying to fetch ${t.url}: ${i.message}`,
                'system',
                i
              );
        t[$t].error = d;
      });
}
function x1() {
  var e = this;
  if (this[$t].disturbed)
    return qe.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  if (((this[$t].disturbed = !0), this[$t].error)) return qe.Promise.reject(this[$t].error);
  let t = this.body;
  if (t === null) return qe.Promise.resolve(Buffer.alloc(0));
  if ((Z1(t) && (t = t.stream()), Buffer.isBuffer(t))) return qe.Promise.resolve(t);
  if (!(t instanceof mt)) return qe.Promise.resolve(Buffer.alloc(0));
  let a = [],
    r = 0,
    n = !1;
  return new qe.Promise(function (s, p) {
    let i;
    e.timeout &&
      (i = setTimeout(function () {
        (n = !0),
          p(
            new Ge(
              `Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,
              'body-timeout'
            )
          );
      }, e.timeout)),
      t.on('error', function (d) {
        d.name === 'AbortError'
          ? ((n = !0), p(d))
          : p(
              new Ge(
                `Invalid response body while trying to fetch ${e.url}: ${d.message}`,
                'system',
                d
              )
            );
      }),
      t.on('data', function (d) {
        if (!(n || d === null)) {
          if (e.size && r + d.length > e.size) {
            (n = !0), p(new Ge(`content size at ${e.url} over limit: ${e.size}`, 'max-size'));
            return;
          }
          (r += d.length), a.push(d);
        }
      }),
      t.on('end', function () {
        if (!n) {
          clearTimeout(i);
          try {
            s(Buffer.concat(a, r));
          } catch (d) {
            p(
              new Ge(
                `Could not create Buffer from response body for ${e.url}: ${d.message}`,
                'system',
                d
              )
            );
          }
        }
      });
  });
}
function hd(e, t) {
  if (typeof Yr != 'function')
    throw new Error('The package `encoding` must be installed to use the textConverted() function');
  let a = t.get('content-type'),
    r = 'utf-8',
    n,
    s;
  return (
    a && (n = /charset=([^;]*)/i.exec(a)),
    (s = e.slice(0, 1024).toString()),
    !n && s && (n = /<meta.+?charset=(['"])(.+?)\1/i.exec(s)),
    !n &&
      s &&
      ((n = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(s)),
      n ||
        ((n = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(s)),
        n && n.pop()),
      n && (n = /charset=(.*)/i.exec(n.pop()))),
    !n && s && (n = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(s)),
    n && ((r = n.pop()), (r === 'gb2312' || r === 'gbk') && (r = 'gb18030')),
    Yr(e, 'UTF-8', r).toString()
  );
}
function xp(e) {
  return typeof e != 'object' ||
    typeof e.append != 'function' ||
    typeof e.delete != 'function' ||
    typeof e.get != 'function' ||
    typeof e.getAll != 'function' ||
    typeof e.has != 'function' ||
    typeof e.set != 'function'
    ? !1
    : e.constructor.name === 'URLSearchParams' ||
        Object.prototype.toString.call(e) === '[object URLSearchParams]' ||
        typeof e.sort == 'function';
}
function Z1(e) {
  return (
    typeof e == 'object' &&
    typeof e.arrayBuffer == 'function' &&
    typeof e.type == 'string' &&
    typeof e.stream == 'function' &&
    typeof e.constructor == 'function' &&
    typeof e.constructor.name == 'string' &&
    /^(Blob|File)$/.test(e.constructor.name) &&
    /^(Blob|File)$/.test(e[Symbol.toStringTag])
  );
}
function Ap(e) {
  let t,
    a,
    r = e.body;
  if (e.bodyUsed) throw new Error('cannot clone body after it is used');
  return (
    r instanceof mt &&
      typeof r.getBoundary != 'function' &&
      ((t = new Jr()), (a = new Jr()), r.pipe(t), r.pipe(a), (e[$t].body = t), (r = a)),
    r
  );
}
function kp(e) {
  return e === null
    ? null
    : typeof e == 'string'
    ? 'text/plain;charset=UTF-8'
    : xp(e)
    ? 'application/x-www-form-urlencoded;charset=UTF-8'
    : Z1(e)
    ? e.type || null
    : Buffer.isBuffer(e) ||
      Object.prototype.toString.call(e) === '[object ArrayBuffer]' ||
      ArrayBuffer.isView(e)
    ? null
    : typeof e.getBoundary == 'function'
    ? `multipart/form-data;boundary=${e.getBoundary()}`
    : e instanceof mt
    ? null
    : 'text/plain;charset=UTF-8';
}
function $p(e) {
  let t = e.body;
  return t === null
    ? 0
    : Z1(t)
    ? t.size
    : Buffer.isBuffer(t)
    ? t.length
    : t &&
      typeof t.getLengthSync == 'function' &&
      ((t._lengthRetrievers && t._lengthRetrievers.length == 0) ||
        (t.hasKnownLength && t.hasKnownLength()))
    ? t.getLengthSync()
    : null;
}
function fd(e, t) {
  let a = t.body;
  a === null
    ? e.end()
    : Z1(a)
    ? a.stream().pipe(e)
    : Buffer.isBuffer(a)
    ? (e.write(a), e.end())
    : a.pipe(e);
}
function Q1(e) {
  if (((e = `${e}`), Zr.test(e) || e === ''))
    throw new TypeError(`${e} is not a legal HTTP header name`);
}
function Ip(e) {
  if (((e = `${e}`), qa.test(e))) throw new TypeError(`${e} is not a legal HTTP header value`);
}
function A1(e, t) {
  t = t.toLowerCase();
  for (let a in e) if (a.toLowerCase() === t) return a;
}
function Wr(e) {
  let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'key+value';
  return Object.keys(e[Ve])
    .sort()
    .map(
      t === 'key'
        ? function (r) {
            return r.toLowerCase();
          }
        : t === 'value'
        ? function (r) {
            return e[Ve][r].join(', ');
          }
        : function (r) {
            return [r.toLowerCase(), e[Ve][r].join(', ')];
          }
    );
}
function Kr(e, t) {
  let a = Object.create(Wa);
  return (a[Ha] = { target: e, kind: t, index: 0 }), a;
}
function vd(e) {
  let t = Object.assign({ __proto__: null }, e[Ve]),
    a = A1(e[Ve], 'Host');
  return a !== void 0 && (t[a] = t[a][0]), t;
}
function gd(e) {
  let t = new ut();
  for (let a of Object.keys(e))
    if (!Zr.test(a))
      if (Array.isArray(e[a]))
        for (let r of e[a])
          qa.test(r) || (t[Ve][a] === void 0 ? (t[Ve][a] = [r]) : t[Ve][a].push(r));
      else qa.test(e[a]) || (t[Ve][a] = [e[a]]);
  return t;
}
function Gr(e) {
  return /^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e) && (e = new Cp(e).toString()), Fp(e);
}
function ja(e) {
  return typeof e == 'object' && typeof e[It] == 'object';
}
function yd(e) {
  let t = e && typeof e == 'object' && Object.getPrototypeOf(e);
  return !!(t && t.constructor.name === 'AbortSignal');
}
function wd(e) {
  let t = e[It].parsedURL,
    a = new ut(e[It].headers);
  if ((a.has('Accept') || a.set('Accept', '*/*'), !t.protocol || !t.hostname))
    throw new TypeError('Only absolute URLs are supported');
  if (!/^https?:$/.test(t.protocol)) throw new TypeError('Only HTTP(S) protocols are supported');
  if (e.signal && e.body instanceof mt.Readable && !Pp)
    throw new Error(
      'Cancellation of streamed requests with AbortSignal is not supported in node < 8'
    );
  let r = null;
  if ((e.body == null && /^(POST|PUT)$/i.test(e.method) && (r = '0'), e.body != null)) {
    let s = $p(e);
    typeof s == 'number' && (r = String(s));
  }
  r && a.set('Content-Length', r),
    a.has('User-Agent') ||
      a.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)'),
    e.compress && !a.has('Accept-Encoding') && a.set('Accept-Encoding', 'gzip,deflate');
  let n = e.agent;
  return (
    typeof n == 'function' && (n = n(t)),
    !a.has('Connection') && !n && a.set('Connection', 'close'),
    Object.assign({}, t, { method: e.method, headers: vd(a), agent: n })
  );
}
function ea(e) {
  Error.call(this, e),
    (this.type = 'aborted'),
    (this.message = e),
    Error.captureStackTrace(this, this.constructor);
}
function Yt(e, t) {
  if (!Yt.Promise)
    throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
  return (
    (qe.Promise = Yt.Promise),
    new Yt.Promise(function (a, r) {
      let n = new Jt(e, t),
        s = wd(n),
        p = (s.protocol === 'https:' ? Ep : Fr).request,
        i = n.signal,
        d = null,
        l = function () {
          let N = new ea('The user aborted a request.');
          r(N),
            n.body && n.body instanceof mt.Readable && n.body.destroy(N),
            !(!d || !d.body) && d.body.emit('error', N);
        };
      if (i && i.aborted) {
        l();
        return;
      }
      let m = function () {
          l(), g();
        },
        u = p(s),
        f;
      i && i.addEventListener('abort', m);
      function g() {
        u.abort(), i && i.removeEventListener('abort', m), clearTimeout(f);
      }
      n.timeout &&
        u.once('socket', function (y) {
          f = setTimeout(function () {
            r(new Ge(`network timeout at: ${n.url}`, 'request-timeout')), g();
          }, n.timeout);
        }),
        u.on('error', function (y) {
          r(new Ge(`request to ${n.url} failed, reason: ${y.message}`, 'system', y)), g();
        }),
        u.on('response', function (y) {
          clearTimeout(f);
          let N = gd(y.headers);
          if (Yt.isRedirect(y.statusCode)) {
            let C = N.get('Location'),
              L = null;
            try {
              L = C === null ? null : new Ka(C, n.url).toString();
            } catch {
              if (n.redirect !== 'manual') {
                r(
                  new Ge(
                    `uri requested responds with an invalid redirect URL: ${C}`,
                    'invalid-redirect'
                  )
                ),
                  g();
                return;
              }
            }
            switch (n.redirect) {
              case 'error':
                r(
                  new Ge(
                    `uri requested responds with a redirect, redirect mode is set to error: ${n.url}`,
                    'no-redirect'
                  )
                ),
                  g();
                return;
              case 'manual':
                if (L !== null)
                  try {
                    N.set('Location', L);
                  } catch (X) {
                    r(X);
                  }
                break;
              case 'follow':
                if (L === null) break;
                if (n.counter >= n.follow) {
                  r(new Ge(`maximum redirect reached at: ${n.url}`, 'max-redirect')), g();
                  return;
                }
                let z = {
                  headers: new ut(n.headers),
                  follow: n.follow,
                  counter: n.counter + 1,
                  agent: n.agent,
                  compress: n.compress,
                  method: n.method,
                  body: n.body,
                  signal: n.signal,
                  timeout: n.timeout,
                  size: n.size
                };
                if (!Rp(n.url, L))
                  for (let X of ['authorization', 'www-authenticate', 'cookie', 'cookie2'])
                    z.headers.delete(X);
                if (y.statusCode !== 303 && n.body && $p(n) === null) {
                  r(
                    new Ge(
                      'Cannot follow redirect with body being a readable stream',
                      'unsupported-redirect'
                    )
                  ),
                    g();
                  return;
                }
                (y.statusCode === 303 ||
                  ((y.statusCode === 301 || y.statusCode === 302) && n.method === 'POST')) &&
                  ((z.method = 'GET'), (z.body = void 0), z.headers.delete('content-length')),
                  a(Yt(new Jt(L, z))),
                  g();
                return;
            }
          }
          y.once('end', function () {
            i && i.removeEventListener('abort', m);
          });
          let T = y.pipe(new Qr()),
            O = {
              url: n.url,
              status: y.statusCode,
              statusText: y.statusMessage,
              headers: N,
              size: n.size,
              timeout: n.timeout,
              counter: n.counter
            },
            B = N.get('Content-Encoding');
          if (
            !n.compress ||
            n.method === 'HEAD' ||
            B === null ||
            y.statusCode === 204 ||
            y.statusCode === 304
          ) {
            (d = new Nt(T, O)), a(d);
            return;
          }
          let M = { flush: Xt.Z_SYNC_FLUSH, finishFlush: Xt.Z_SYNC_FLUSH };
          if (B == 'gzip' || B == 'x-gzip') {
            (T = T.pipe(Xt.createGunzip(M))), (d = new Nt(T, O)), a(d);
            return;
          }
          if (B == 'deflate' || B == 'x-deflate') {
            y.pipe(new Qr()).once('data', function (L) {
              (L[0] & 15) == 8
                ? (T = T.pipe(Xt.createInflate()))
                : (T = T.pipe(Xt.createInflateRaw())),
                (d = new Nt(T, O)),
                a(d);
            });
            return;
          }
          if (B == 'br' && typeof Xt.createBrotliDecompress == 'function') {
            (T = T.pipe(Xt.createBrotliDecompress())), (d = new Nt(T, O)), a(d);
            return;
          }
          (d = new Nt(T, O)), a(d);
        }),
        fd(u, n);
    })
  );
}
var Xr,
  Op,
  kt,
  Ma,
  k1,
  Yr,
  $t,
  Jr,
  Zr,
  qa,
  Ve,
  ut,
  Ha,
  Wa,
  Bt,
  Vp,
  Nt,
  It,
  Cp,
  Fp,
  Bp,
  Pp,
  Jt,
  Ka,
  Qr,
  Rp,
  Lp,
  bd = At({
    'node_modules/node-fetch/lib/index.mjs'() {
      td(),
        ad(),
        rd(),
        (Xr = Y1(md())),
        ud(),
        cd(),
        (Op = mt.Readable),
        (kt = Symbol('buffer')),
        (Ma = Symbol('type')),
        (k1 = class {
          constructor() {
            this[Ma] = '';
            let e = arguments[0],
              t = arguments[1],
              a = [],
              r = 0;
            if (e) {
              let s = e,
                p = Number(s.length);
              for (let i = 0; i < p; i++) {
                let d = s[i],
                  l;
                d instanceof Buffer
                  ? (l = d)
                  : ArrayBuffer.isView(d)
                  ? (l = Buffer.from(d.buffer, d.byteOffset, d.byteLength))
                  : d instanceof ArrayBuffer
                  ? (l = Buffer.from(d))
                  : d instanceof k1
                  ? (l = d[kt])
                  : (l = Buffer.from(typeof d == 'string' ? d : String(d))),
                  (r += l.length),
                  a.push(l);
              }
            }
            this[kt] = Buffer.concat(a);
            let n = t && t.type !== void 0 && String(t.type).toLowerCase();
            n && !/[^\u0020-\u007E]/.test(n) && (this[Ma] = n);
          }
          get size() {
            return this[kt].length;
          }
          get type() {
            return this[Ma];
          }
          text() {
            return Promise.resolve(this[kt].toString());
          }
          arrayBuffer() {
            let e = this[kt],
              t = e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
            return Promise.resolve(t);
          }
          stream() {
            let e = new Op();
            return (e._read = function () {}), e.push(this[kt]), e.push(null), e;
          }
          toString() {
            return '[object Blob]';
          }
          slice() {
            let e = this.size,
              t = arguments[0],
              a = arguments[1],
              r,
              n;
            t === void 0 ? (r = 0) : t < 0 ? (r = Math.max(e + t, 0)) : (r = Math.min(t, e)),
              a === void 0 ? (n = e) : a < 0 ? (n = Math.max(e + a, 0)) : (n = Math.min(a, e));
            let s = Math.max(n - r, 0),
              i = this[kt].slice(r, r + s),
              d = new k1([], { type: arguments[2] });
            return (d[kt] = i), d;
          }
        }),
        Object.defineProperties(k1.prototype, {
          size: { enumerable: !0 },
          type: { enumerable: !0 },
          slice: { enumerable: !0 }
        }),
        Object.defineProperty(k1.prototype, Symbol.toStringTag, {
          value: 'Blob',
          writable: !1,
          enumerable: !1,
          configurable: !0
        }),
        (Ge.prototype = Object.create(Error.prototype)),
        (Ge.prototype.constructor = Ge),
        (Ge.prototype.name = 'FetchError');
      try {
        Yr = cp('encoding').convert;
      } catch {}
      ($t = Symbol('Body internals')),
        (Jr = mt.PassThrough),
        (qe.prototype = {
          get body() {
            return this[$t].body;
          },
          get bodyUsed() {
            return this[$t].disturbed;
          },
          arrayBuffer() {
            return x1.call(this).then(function (e) {
              return e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
            });
          },
          blob() {
            let e = (this.headers && this.headers.get('content-type')) || '';
            return x1.call(this).then(function (t) {
              return Object.assign(new k1([], { type: e.toLowerCase() }), { [kt]: t });
            });
          },
          json() {
            var e = this;
            return x1.call(this).then(function (t) {
              try {
                return JSON.parse(t.toString());
              } catch (a) {
                return qe.Promise.reject(
                  new Ge(
                    `invalid json response body at ${e.url} reason: ${a.message}`,
                    'invalid-json'
                  )
                );
              }
            });
          },
          text() {
            return x1.call(this).then(function (e) {
              return e.toString();
            });
          },
          buffer() {
            return x1.call(this);
          },
          textConverted() {
            var e = this;
            return x1.call(this).then(function (t) {
              return hd(t, e.headers);
            });
          }
        }),
        Object.defineProperties(qe.prototype, {
          body: { enumerable: !0 },
          bodyUsed: { enumerable: !0 },
          arrayBuffer: { enumerable: !0 },
          blob: { enumerable: !0 },
          json: { enumerable: !0 },
          text: { enumerable: !0 }
        }),
        (qe.mixIn = function (e) {
          for (let t of Object.getOwnPropertyNames(qe.prototype))
            if (!(t in e)) {
              let a = Object.getOwnPropertyDescriptor(qe.prototype, t);
              Object.defineProperty(e, t, a);
            }
        }),
        (qe.Promise = global.Promise),
        (Zr = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/),
        (qa = /[^\t\x20-\x7e\x80-\xff]/),
        (Ve = Symbol('map')),
        (ut = class {
          constructor() {
            let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
            if (((this[Ve] = Object.create(null)), e instanceof ut)) {
              let t = e.raw(),
                a = Object.keys(t);
              for (let r of a) for (let n of t[r]) this.append(r, n);
              return;
            }
            if (e != null)
              if (typeof e == 'object') {
                let t = e[Symbol.iterator];
                if (t != null) {
                  if (typeof t != 'function') throw new TypeError('Header pairs must be iterable');
                  let a = [];
                  for (let r of e) {
                    if (typeof r != 'object' || typeof r[Symbol.iterator] != 'function')
                      throw new TypeError('Each header pair must be iterable');
                    a.push(Array.from(r));
                  }
                  for (let r of a) {
                    if (r.length !== 2)
                      throw new TypeError('Each header pair must be a name/value tuple');
                    this.append(r[0], r[1]);
                  }
                } else
                  for (let a of Object.keys(e)) {
                    let r = e[a];
                    this.append(a, r);
                  }
              } else throw new TypeError('Provided initializer must be an object');
          }
          get(e) {
            (e = `${e}`), Q1(e);
            let t = A1(this[Ve], e);
            return t === void 0 ? null : this[Ve][t].join(', ');
          }
          forEach(e) {
            let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0,
              a = Wr(this),
              r = 0;
            for (; r < a.length; ) {
              var n = a[r];
              let s = n[0],
                p = n[1];
              e.call(t, p, s, this), (a = Wr(this)), r++;
            }
          }
          set(e, t) {
            (e = `${e}`), (t = `${t}`), Q1(e), Ip(t);
            let a = A1(this[Ve], e);
            this[Ve][a !== void 0 ? a : e] = [t];
          }
          append(e, t) {
            (e = `${e}`), (t = `${t}`), Q1(e), Ip(t);
            let a = A1(this[Ve], e);
            a !== void 0 ? this[Ve][a].push(t) : (this[Ve][e] = [t]);
          }
          has(e) {
            return (e = `${e}`), Q1(e), A1(this[Ve], e) !== void 0;
          }
          delete(e) {
            (e = `${e}`), Q1(e);
            let t = A1(this[Ve], e);
            t !== void 0 && delete this[Ve][t];
          }
          raw() {
            return this[Ve];
          }
          keys() {
            return Kr(this, 'key');
          }
          values() {
            return Kr(this, 'value');
          }
          [Symbol.iterator]() {
            return Kr(this, 'key+value');
          }
        }),
        (ut.prototype.entries = ut.prototype[Symbol.iterator]),
        Object.defineProperty(ut.prototype, Symbol.toStringTag, {
          value: 'Headers',
          writable: !1,
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperties(ut.prototype, {
          get: { enumerable: !0 },
          forEach: { enumerable: !0 },
          set: { enumerable: !0 },
          append: { enumerable: !0 },
          has: { enumerable: !0 },
          delete: { enumerable: !0 },
          keys: { enumerable: !0 },
          values: { enumerable: !0 },
          entries: { enumerable: !0 }
        }),
        (Ha = Symbol('internal')),
        (Wa = Object.setPrototypeOf(
          {
            next() {
              if (!this || Object.getPrototypeOf(this) !== Wa)
                throw new TypeError('Value of `this` is not a HeadersIterator');
              var e = this[Ha];
              let t = e.target,
                a = e.kind,
                r = e.index,
                n = Wr(t, a),
                s = n.length;
              return r >= s
                ? { value: void 0, done: !0 }
                : ((this[Ha].index = r + 1), { value: n[r], done: !1 });
            }
          },
          Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))
        )),
        Object.defineProperty(Wa, Symbol.toStringTag, {
          value: 'HeadersIterator',
          writable: !1,
          enumerable: !1,
          configurable: !0
        }),
        (Bt = Symbol('Response internals')),
        (Vp = Fr.STATUS_CODES),
        (Nt = class {
          constructor() {
            let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null,
              t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            qe.call(this, e, t);
            let a = t.status || 200,
              r = new ut(t.headers);
            if (e != null && !r.has('Content-Type')) {
              let n = kp(e);
              n && r.append('Content-Type', n);
            }
            this[Bt] = {
              url: t.url,
              status: a,
              statusText: t.statusText || Vp[a],
              headers: r,
              counter: t.counter
            };
          }
          get url() {
            return this[Bt].url || '';
          }
          get status() {
            return this[Bt].status;
          }
          get ok() {
            return this[Bt].status >= 200 && this[Bt].status < 300;
          }
          get redirected() {
            return this[Bt].counter > 0;
          }
          get statusText() {
            return this[Bt].statusText;
          }
          get headers() {
            return this[Bt].headers;
          }
          clone() {
            return new Nt(Ap(this), {
              url: this.url,
              status: this.status,
              statusText: this.statusText,
              headers: this.headers,
              ok: this.ok,
              redirected: this.redirected
            });
          }
        }),
        qe.mixIn(Nt.prototype),
        Object.defineProperties(Nt.prototype, {
          url: { enumerable: !0 },
          status: { enumerable: !0 },
          ok: { enumerable: !0 },
          redirected: { enumerable: !0 },
          statusText: { enumerable: !0 },
          headers: { enumerable: !0 },
          clone: { enumerable: !0 }
        }),
        Object.defineProperty(Nt.prototype, Symbol.toStringTag, {
          value: 'Response',
          writable: !1,
          enumerable: !1,
          configurable: !0
        }),
        (It = Symbol('Request internals')),
        (Cp = J1.URL || Xr.default.URL),
        (Fp = J1.parse),
        (Bp = J1.format),
        (Pp = 'destroy' in mt.Readable.prototype),
        (Jt = class {
          constructor(e) {
            let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
              a;
            ja(e) ? (a = Gr(e.url)) : (e && e.href ? (a = Gr(e.href)) : (a = Gr(`${e}`)), (e = {}));
            let r = t.method || e.method || 'GET';
            if (
              ((r = r.toUpperCase()),
              (t.body != null || (ja(e) && e.body !== null)) && (r === 'GET' || r === 'HEAD'))
            )
              throw new TypeError('Request with GET/HEAD method cannot have body');
            let n = t.body != null ? t.body : ja(e) && e.body !== null ? Ap(e) : null;
            qe.call(this, n, { timeout: t.timeout || e.timeout || 0, size: t.size || e.size || 0 });
            let s = new ut(t.headers || e.headers || {});
            if (n != null && !s.has('Content-Type')) {
              let i = kp(n);
              i && s.append('Content-Type', i);
            }
            let p = ja(e) ? e.signal : null;
            if (('signal' in t && (p = t.signal), p != null && !yd(p)))
              throw new TypeError('Expected signal to be an instanceof AbortSignal');
            (this[It] = {
              method: r,
              redirect: t.redirect || e.redirect || 'follow',
              headers: s,
              parsedURL: a,
              signal: p
            }),
              (this.follow = t.follow !== void 0 ? t.follow : e.follow !== void 0 ? e.follow : 20),
              (this.compress =
                t.compress !== void 0 ? t.compress : e.compress !== void 0 ? e.compress : !0),
              (this.counter = t.counter || e.counter || 0),
              (this.agent = t.agent || e.agent);
          }
          get method() {
            return this[It].method;
          }
          get url() {
            return Bp(this[It].parsedURL);
          }
          get headers() {
            return this[It].headers;
          }
          get redirect() {
            return this[It].redirect;
          }
          get signal() {
            return this[It].signal;
          }
          clone() {
            return new Jt(this);
          }
        }),
        qe.mixIn(Jt.prototype),
        Object.defineProperty(Jt.prototype, Symbol.toStringTag, {
          value: 'Request',
          writable: !1,
          enumerable: !1,
          configurable: !0
        }),
        Object.defineProperties(Jt.prototype, {
          method: { enumerable: !0 },
          url: { enumerable: !0 },
          headers: { enumerable: !0 },
          redirect: { enumerable: !0 },
          clone: { enumerable: !0 },
          signal: { enumerable: !0 }
        }),
        (ea.prototype = Object.create(Error.prototype)),
        (ea.prototype.constructor = ea),
        (ea.prototype.name = 'AbortError'),
        (Ka = J1.URL || Xr.default.URL),
        (Qr = mt.PassThrough),
        (Rp = function (t, a) {
          let r = new Ka(a).hostname,
            n = new Ka(t).hostname;
          return r === n || (r[r.length - n.length - 1] === '.' && r.endsWith(n));
        }),
        (Yt.isRedirect = function (e) {
          return e === 301 || e === 302 || e === 303 || e === 307 || e === 308;
        }),
        (Yt.Promise = global.Promise),
        (Lp = Yt);
    }
  }),
  Up = {};
be(Up, { default: () => zp });
var zp,
  Nd = At({
    'browser-external:util'() {
      zp = new Proxy(
        {},
        {
          get() {
            throw new Error(
              'Module "util" has been externalized for browser compatibility and cannot be accessed in client code.'
            );
          }
        }
      );
    }
  }),
  _d = Re({
    'node_modules/seedrandom/lib/alea.js'(e, t) {
      (function (a, r, n) {
        function s(l) {
          var m = this,
            u = d();
          (m.next = function () {
            var f = 2091639 * m.s0 + m.c * 23283064365386963e-26;
            return (m.s0 = m.s1), (m.s1 = m.s2), (m.s2 = f - (m.c = f | 0));
          }),
            (m.c = 1),
            (m.s0 = u(' ')),
            (m.s1 = u(' ')),
            (m.s2 = u(' ')),
            (m.s0 -= u(l)),
            m.s0 < 0 && (m.s0 += 1),
            (m.s1 -= u(l)),
            m.s1 < 0 && (m.s1 += 1),
            (m.s2 -= u(l)),
            m.s2 < 0 && (m.s2 += 1),
            (u = null);
        }
        function p(l, m) {
          return (m.c = l.c), (m.s0 = l.s0), (m.s1 = l.s1), (m.s2 = l.s2), m;
        }
        function i(l, m) {
          var u = new s(l),
            f = m && m.state,
            g = u.next;
          return (
            (g.int32 = function () {
              return (u.next() * 4294967296) | 0;
            }),
            (g.double = function () {
              return g() + ((g() * 2097152) | 0) * 11102230246251565e-32;
            }),
            (g.quick = g),
            f &&
              (typeof f == 'object' && p(f, u),
              (g.state = function () {
                return p(u, {});
              })),
            g
          );
        }
        function d() {
          var l = 4022871197,
            m = function (u) {
              u = u.toString();
              for (var f = 0; f < u.length; f++) {
                l += u.charCodeAt(f);
                var g = 0.02519603282416938 * l;
                (l = g >>> 0), (g -= l), (g *= l), (l = g >>> 0), (g -= l), (l += g * 4294967296);
              }
              return (l >>> 0) * 23283064365386963e-26;
            };
          return m;
        }
        r && r.exports
          ? (r.exports = i)
          : n && n.amd
          ? n(function () {
              return i;
            })
          : (this.alea = i);
      })(e, typeof t == 'object' && t, typeof define == 'function' && define);
    }
  }),
  Sd = Re({
    'node_modules/seedrandom/lib/xor128.js'(e, t) {
      (function (a, r, n) {
        function s(d) {
          var l = this,
            m = '';
          (l.x = 0),
            (l.y = 0),
            (l.z = 0),
            (l.w = 0),
            (l.next = function () {
              var f = l.x ^ (l.x << 11);
              return (l.x = l.y), (l.y = l.z), (l.z = l.w), (l.w ^= (l.w >>> 19) ^ f ^ (f >>> 8));
            }),
            d === (d | 0) ? (l.x = d) : (m += d);
          for (var u = 0; u < m.length + 64; u++) (l.x ^= m.charCodeAt(u) | 0), l.next();
        }
        function p(d, l) {
          return (l.x = d.x), (l.y = d.y), (l.z = d.z), (l.w = d.w), l;
        }
        function i(d, l) {
          var m = new s(d),
            u = l && l.state,
            f = function () {
              return (m.next() >>> 0) / 4294967296;
            };
          return (
            (f.double = function () {
              do
                var g = m.next() >>> 11,
                  y = (m.next() >>> 0) / 4294967296,
                  N = (g + y) / (1 << 21);
              while (N === 0);
              return N;
            }),
            (f.int32 = m.next),
            (f.quick = f),
            u &&
              (typeof u == 'object' && p(u, m),
              (f.state = function () {
                return p(m, {});
              })),
            f
          );
        }
        r && r.exports
          ? (r.exports = i)
          : n && n.amd
          ? n(function () {
              return i;
            })
          : (this.xor128 = i);
      })(e, typeof t == 'object' && t, typeof define == 'function' && define);
    }
  }),
  Td = Re({
    'node_modules/seedrandom/lib/xorwow.js'(e, t) {
      (function (a, r, n) {
        function s(d) {
          var l = this,
            m = '';
          (l.next = function () {
            var f = l.x ^ (l.x >>> 2);
            return (
              (l.x = l.y),
              (l.y = l.z),
              (l.z = l.w),
              (l.w = l.v),
              ((l.d = (l.d + 362437) | 0) + (l.v = l.v ^ (l.v << 4) ^ (f ^ (f << 1)))) | 0
            );
          }),
            (l.x = 0),
            (l.y = 0),
            (l.z = 0),
            (l.w = 0),
            (l.v = 0),
            d === (d | 0) ? (l.x = d) : (m += d);
          for (var u = 0; u < m.length + 64; u++)
            (l.x ^= m.charCodeAt(u) | 0),
              u == m.length && (l.d = (l.x << 10) ^ (l.x >>> 4)),
              l.next();
        }
        function p(d, l) {
          return (l.x = d.x), (l.y = d.y), (l.z = d.z), (l.w = d.w), (l.v = d.v), (l.d = d.d), l;
        }
        function i(d, l) {
          var m = new s(d),
            u = l && l.state,
            f = function () {
              return (m.next() >>> 0) / 4294967296;
            };
          return (
            (f.double = function () {
              do
                var g = m.next() >>> 11,
                  y = (m.next() >>> 0) / 4294967296,
                  N = (g + y) / (1 << 21);
              while (N === 0);
              return N;
            }),
            (f.int32 = m.next),
            (f.quick = f),
            u &&
              (typeof u == 'object' && p(u, m),
              (f.state = function () {
                return p(m, {});
              })),
            f
          );
        }
        r && r.exports
          ? (r.exports = i)
          : n && n.amd
          ? n(function () {
              return i;
            })
          : (this.xorwow = i);
      })(e, typeof t == 'object' && t, typeof define == 'function' && define);
    }
  }),
  Ed = Re({
    'node_modules/seedrandom/lib/xorshift7.js'(e, t) {
      (function (a, r, n) {
        function s(d) {
          var l = this;
          l.next = function () {
            var u = l.x,
              f = l.i,
              g,
              y,
              N;
            return (
              (g = u[f]),
              (g ^= g >>> 7),
              (y = g ^ (g << 24)),
              (g = u[(f + 1) & 7]),
              (y ^= g ^ (g >>> 10)),
              (g = u[(f + 3) & 7]),
              (y ^= g ^ (g >>> 3)),
              (g = u[(f + 4) & 7]),
              (y ^= g ^ (g << 7)),
              (g = u[(f + 7) & 7]),
              (g = g ^ (g << 13)),
              (y ^= g ^ (g << 9)),
              (u[f] = y),
              (l.i = (f + 1) & 7),
              y
            );
          };
          function m(u, f) {
            var g,
              y,
              N = [];
            if (f === (f | 0)) y = N[0] = f;
            else
              for (f = '' + f, g = 0; g < f.length; ++g)
                N[g & 7] = (N[g & 7] << 15) ^ ((f.charCodeAt(g) + N[(g + 1) & 7]) << 13);
            for (; N.length < 8; ) N.push(0);
            for (g = 0; g < 8 && N[g] === 0; ++g);
            for (g == 8 ? (y = N[7] = -1) : (y = N[g]), u.x = N, u.i = 0, g = 256; g > 0; --g)
              u.next();
          }
          m(l, d);
        }
        function p(d, l) {
          return (l.x = d.x.slice()), (l.i = d.i), l;
        }
        function i(d, l) {
          d == null && (d = +new Date());
          var m = new s(d),
            u = l && l.state,
            f = function () {
              return (m.next() >>> 0) / 4294967296;
            };
          return (
            (f.double = function () {
              do
                var g = m.next() >>> 11,
                  y = (m.next() >>> 0) / 4294967296,
                  N = (g + y) / (1 << 21);
              while (N === 0);
              return N;
            }),
            (f.int32 = m.next),
            (f.quick = f),
            u &&
              (u.x && p(u, m),
              (f.state = function () {
                return p(m, {});
              })),
            f
          );
        }
        r && r.exports
          ? (r.exports = i)
          : n && n.amd
          ? n(function () {
              return i;
            })
          : (this.xorshift7 = i);
      })(e, typeof t == 'object' && t, typeof define == 'function' && define);
    }
  }),
  Dd = Re({
    'node_modules/seedrandom/lib/xor4096.js'(e, t) {
      (function (a, r, n) {
        function s(d) {
          var l = this;
          l.next = function () {
            var u = l.w,
              f = l.X,
              g = l.i,
              y,
              N;
            return (
              (l.w = u = (u + 1640531527) | 0),
              (N = f[(g + 34) & 127]),
              (y = f[(g = (g + 1) & 127)]),
              (N ^= N << 13),
              (y ^= y << 17),
              (N ^= N >>> 15),
              (y ^= y >>> 12),
              (N = f[g] = N ^ y),
              (l.i = g),
              (N + (u ^ (u >>> 16))) | 0
            );
          };
          function m(u, f) {
            var g,
              y,
              N,
              T,
              O,
              B = [],
              M = 128;
            for (
              f === (f | 0)
                ? ((y = f), (f = null))
                : ((f = f + '\0'), (y = 0), (M = Math.max(M, f.length))),
                N = 0,
                T = -32;
              T < M;
              ++T
            )
              f && (y ^= f.charCodeAt((T + 32) % f.length)),
                T === 0 && (O = y),
                (y ^= y << 10),
                (y ^= y >>> 15),
                (y ^= y << 4),
                (y ^= y >>> 13),
                T >= 0 &&
                  ((O = (O + 1640531527) | 0), (g = B[T & 127] ^= y + O), (N = g == 0 ? N + 1 : 0));
            for (
              N >= 128 && (B[((f && f.length) || 0) & 127] = -1), N = 127, T = 4 * 128;
              T > 0;
              --T
            )
              (y = B[(N + 34) & 127]),
                (g = B[(N = (N + 1) & 127)]),
                (y ^= y << 13),
                (g ^= g << 17),
                (y ^= y >>> 15),
                (g ^= g >>> 12),
                (B[N] = y ^ g);
            (u.w = O), (u.X = B), (u.i = N);
          }
          m(l, d);
        }
        function p(d, l) {
          return (l.i = d.i), (l.w = d.w), (l.X = d.X.slice()), l;
        }
        function i(d, l) {
          d == null && (d = +new Date());
          var m = new s(d),
            u = l && l.state,
            f = function () {
              return (m.next() >>> 0) / 4294967296;
            };
          return (
            (f.double = function () {
              do
                var g = m.next() >>> 11,
                  y = (m.next() >>> 0) / 4294967296,
                  N = (g + y) / (1 << 21);
              while (N === 0);
              return N;
            }),
            (f.int32 = m.next),
            (f.quick = f),
            u &&
              (u.X && p(u, m),
              (f.state = function () {
                return p(m, {});
              })),
            f
          );
        }
        r && r.exports
          ? (r.exports = i)
          : n && n.amd
          ? n(function () {
              return i;
            })
          : (this.xor4096 = i);
      })(e, typeof t == 'object' && t, typeof define == 'function' && define);
    }
  }),
  xd = Re({
    'node_modules/seedrandom/lib/tychei.js'(e, t) {
      (function (a, r, n) {
        function s(d) {
          var l = this,
            m = '';
          (l.next = function () {
            var f = l.b,
              g = l.c,
              y = l.d,
              N = l.a;
            return (
              (f = (f << 25) ^ (f >>> 7) ^ g),
              (g = (g - y) | 0),
              (y = (y << 24) ^ (y >>> 8) ^ N),
              (N = (N - f) | 0),
              (l.b = f = (f << 20) ^ (f >>> 12) ^ g),
              (l.c = g = (g - y) | 0),
              (l.d = (y << 16) ^ (g >>> 16) ^ N),
              (l.a = (N - f) | 0)
            );
          }),
            (l.a = 0),
            (l.b = 0),
            (l.c = 2654435769 | 0),
            (l.d = 1367130551),
            d === Math.floor(d) ? ((l.a = (d / 4294967296) | 0), (l.b = d | 0)) : (m += d);
          for (var u = 0; u < m.length + 20; u++) (l.b ^= m.charCodeAt(u) | 0), l.next();
        }
        function p(d, l) {
          return (l.a = d.a), (l.b = d.b), (l.c = d.c), (l.d = d.d), l;
        }
        function i(d, l) {
          var m = new s(d),
            u = l && l.state,
            f = function () {
              return (m.next() >>> 0) / 4294967296;
            };
          return (
            (f.double = function () {
              do
                var g = m.next() >>> 11,
                  y = (m.next() >>> 0) / 4294967296,
                  N = (g + y) / (1 << 21);
              while (N === 0);
              return N;
            }),
            (f.int32 = m.next),
            (f.quick = f),
            u &&
              (typeof u == 'object' && p(u, m),
              (f.state = function () {
                return p(m, {});
              })),
            f
          );
        }
        r && r.exports
          ? (r.exports = i)
          : n && n.amd
          ? n(function () {
              return i;
            })
          : (this.tychei = i);
      })(e, typeof t == 'object' && t, typeof define == 'function' && define);
    }
  }),
  jp = {};
be(jp, { default: () => Mp });
var Mp,
  Ad = At({
    'browser-external:crypto'() {
      Mp = new Proxy(
        {},
        {
          get() {
            throw new Error(
              'Module "crypto" has been externalized for browser compatibility and cannot be accessed in client code.'
            );
          }
        }
      );
    }
  }),
  kd = Re({
    'node_modules/seedrandom/seedrandom.js'(e, t) {
      (function (a, r) {
        var n = this,
          s = 256,
          p = 6,
          i = 52,
          d = 'random',
          l = r.pow(s, p),
          m = r.pow(2, i),
          u = m * 2,
          f = s - 1,
          g;
        function y(L, z, X) {
          var Y = [];
          z = z == !0 ? { entropy: !0 } : z || {};
          var J = B(O(z.entropy ? [L, C(a)] : L ?? M(), 3), Y),
            Z = new N(Y),
            F = function () {
              for (var R = Z.g(p), _ = l, q = 0; R < m; ) (R = (R + q) * s), (_ *= s), (q = Z.g(1));
              for (; R >= u; ) (R /= 2), (_ /= 2), (q >>>= 1);
              return (R + q) / _;
            };
          return (
            (F.int32 = function () {
              return Z.g(4) | 0;
            }),
            (F.quick = function () {
              return Z.g(4) / 4294967296;
            }),
            (F.double = F),
            B(C(Z.S), a),
            (
              z.pass ||
              X ||
              function (R, _, q, G) {
                return (
                  G &&
                    (G.S && T(G, Z),
                    (R.state = function () {
                      return T(Z, {});
                    })),
                  q ? ((r[d] = R), _) : R
                );
              }
            )(F, J, 'global' in z ? z.global : this == r, z.state)
          );
        }
        r['seed' + d] = y;
        function N(L) {
          var z,
            X = L.length,
            Y = this,
            J = 0,
            Z = (Y.i = Y.j = 0),
            F = (Y.S = []);
          for (X || (L = [X++]); J < s; ) F[J] = J++;
          for (J = 0; J < s; J++) (F[J] = F[(Z = f & (Z + L[J % X] + (z = F[J])))]), (F[Z] = z);
          (Y.g = function (R) {
            for (var _, q = 0, G = Y.i, ie = Y.j, ne = Y.S; R--; )
              (_ = ne[(G = f & (G + 1))]),
                (q = q * s + ne[f & ((ne[G] = ne[(ie = f & (ie + _))]) + (ne[ie] = _))]);
            return (Y.i = G), (Y.j = ie), q;
          })(s);
        }
        function T(L, z) {
          return (z.i = L.i), (z.j = L.j), (z.S = L.S.slice()), z;
        }
        function O(L, z) {
          var X = [],
            Y = typeof L,
            J;
          if (z && Y == 'object')
            for (J in L)
              try {
                X.push(O(L[J], z - 1));
              } catch {}
          return X.length ? X : Y == 'string' ? L : L + '\0';
        }
        function B(L, z) {
          for (var X = L + '', Y, J = 0; J < X.length; )
            z[f & J] = f & ((Y ^= z[f & J] * 19) + X.charCodeAt(J++));
          return C(z);
        }
        function M() {
          try {
            var L;
            return (
              g && (L = g.randomBytes)
                ? (L = L(s))
                : ((L = new Uint8Array(s)), (n.crypto || n.msCrypto).getRandomValues(L)),
              C(L)
            );
          } catch {
            var z = n.navigator,
              X = z && z.plugins;
            return [+new Date(), n, X, n.screen, C(a)];
          }
        }
        function C(L) {
          return String.fromCharCode.apply(0, L);
        }
        if ((B(r.random(), a), typeof t == 'object' && t.exports)) {
          t.exports = y;
          try {
            g = (Ad(), jp);
          } catch {}
        } else
          typeof define == 'function' &&
            define.amd &&
            define(function () {
              return y;
            });
      })([], Math);
    }
  }),
  $d = Re({
    'node_modules/seedrandom/index.js'(e, t) {
      var a = _d(),
        r = Sd(),
        n = Td(),
        s = Ed(),
        p = Dd(),
        i = xd(),
        d = kd();
      (d.alea = a),
        (d.xor128 = r),
        (d.xorwow = n),
        (d.xorshift7 = s),
        (d.xor4096 = p),
        (d.tychei = i),
        (t.exports = d);
    }
  }),
  Id = Y1(Qo()),
  Od = 1e-7,
  Vd = 1e-4,
  Cd = class {
    refCount(e) {
      return st('refCount');
    }
    incRef(e) {
      return st('incRef');
    }
    timerAvailable() {
      return !0;
    }
    time(e) {
      return st('time');
    }
    read(e) {
      return st('read');
    }
    readSync(e) {
      return st('readSync');
    }
    readToGPU(e, t) {
      return st('readToGPU');
    }
    numDataIds() {
      return st('numDataIds');
    }
    disposeData(e, t) {
      return st('disposeData');
    }
    write(e, t, a) {
      return st('write');
    }
    move(e, t, a, r, n) {
      return st('move');
    }
    memory() {
      return st('memory');
    }
    floatPrecision() {
      return st('floatPrecision');
    }
    epsilon() {
      return this.floatPrecision() === 32 ? Od : Vd;
    }
    dispose() {
      return st('dispose');
    }
  };
function st(e) {
  throw new Error(
    `'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`
  );
}
function qp(e) {
  let t = e.length,
    a = 0;
  for (; t > 0; ) (a = (Math.random() * t) | 0), t--, Ga(e, t, a);
}
function Fd(e, t) {
  if (e.length !== t.length)
    throw new Error(
      `Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`
    );
  let a = e.length,
    r = 0;
  for (; a > 0; ) (r = (Math.random() * a) | 0), a--, Ga(e, a, r), Ga(t, a, r);
}
function Bd(e, t, a) {
  return Math.max(e, Math.min(t, a));
}
function Pd(e) {
  return e % 2 == 0 ? e : e + 1;
}
function Ga(e, t, a) {
  let r = e[t];
  (e[t] = e[a]), (e[a] = r);
}
function Rd(e) {
  let t = 0;
  for (let a = 0; a < e.length; a++) t += e[a];
  return t;
}
function Ld(e, t) {
  let a = Math.random();
  return t * a + (1 - a) * e;
}
function Ud(e, t) {
  let a = 0;
  for (let r = 0; r < e.length; r++) {
    let n = Number(e[r]) - Number(t[r]);
    a += n * n;
  }
  return a;
}
function S(e, t) {
  if (!e) throw new Error(typeof t == 'string' ? t : t());
}
function _t(e, t, a = '') {
  S(m1(e, t), () => a + ` Shapes ${e} and ${t} must match`);
}
function Xa(e) {
  S(e != null, () => 'The input to the tensor constructor must be a non-null value.');
}
function ta(e, t = [], a = !1) {
  if ((t == null && (t = []), Array.isArray(e) || (St(e) && !a)))
    for (let r = 0; r < e.length; ++r) ta(e[r], t, a);
  else t.push(e);
  return t;
}
function Xe(e) {
  if (e.length === 0) return 1;
  let t = e[0];
  for (let a = 1; a < e.length; a++) t *= e[a];
  return t;
}
function zd(e) {
  return e.length === 0;
}
function m1(e, t) {
  if (e === t) return !0;
  if (e == null || t == null || e.length !== t.length) return !1;
  for (let a = 0; a < e.length; a++) if (e[a] !== t[a]) return !1;
  return !0;
}
function $1(e) {
  return e % 1 == 0;
}
function jd(e) {
  if (Math.tanh != null) return Math.tanh(e);
  if (e === 1 / 0) return 1;
  if (e === -1 / 0) return -1;
  {
    let t = Math.exp(2 * e);
    return (t - 1) / (t + 1);
  }
}
function Md(e) {
  let t = Math.ceil(Math.sqrt(e));
  return [t, Math.ceil(e / t)];
}
function qd(e) {
  let t = new Uint32Array(e);
  for (let a = 0; a < e; ++a) t[a] = a;
  return qp(t), t;
}
function aa(e, t) {
  return t <= e.length ? e : e + ' '.repeat(t - e.length);
}
function Hd(e, t = (r) => 0, a) {
  return new Promise((r, n) => {
    let s = 0,
      p = () => {
        if (e()) {
          r();
          return;
        }
        s++;
        let i = t(s);
        if (a != null && s >= a) {
          n();
          return;
        }
        setTimeout(p, i);
      };
    p();
  });
}
function Wd(e, t) {
  let a = 1,
    r = -1;
  for (let s = 0; s < e.length; ++s)
    if (e[s] >= 0) a *= e[s];
    else if (e[s] === -1) {
      if (r !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${s}`);
      r = s;
    } else if (e[s] < 0) throw Error(`Shapes can not be < 0. Found ${e[s]} at dim ${s}`);
  if (r === -1) {
    if (t > 0 && t !== a) throw Error(`Size(${t}) must match the product of shape ${e}`);
    return e;
  }
  if (a === 0) throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);
  if (t % a != 0) throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${a}`);
  let n = e.slice();
  return (n[r] = t / a), n;
}
function ra(e, t) {
  let a = t.length;
  return (
    (e = e == null ? t.map((r, n) => n) : [].concat(e)),
    S(
      e.every((r) => r >= -a && r < a),
      () => `All values in axis param must be in range [-${a}, ${a}) but got axis ${e}`
    ),
    S(
      e.every((r) => $1(r)),
      () => `All values in axis param must be integers but got axis ${e}`
    ),
    e.map((r) => (r < 0 ? a + r : r))
  );
}
function Hp(e, t) {
  let a = [],
    r = [],
    n = t != null && Array.isArray(t) && t.length === 0,
    s = t == null || n ? null : ra(t, e).sort(),
    p = 0;
  for (let i = 0; i < e.length; ++i) {
    if (s != null) {
      if (s[p] === i && e[i] !== 1)
        throw new Error(`Can't squeeze axis ${i} since its dim '${e[i]}' is not 1`);
      (s[p] == null || s[p] > i) && e[i] === 1 && (a.push(e[i]), r.push(i)), s[p] <= i && p++;
    }
    e[i] !== 1 && (a.push(e[i]), r.push(i));
  }
  return { newShape: a, keptDims: r };
}
function Kd(e, t) {
  let a = null;
  if (e == null || e === 'float32') a = new Float32Array(t);
  else if (e === 'int32') a = new Int32Array(t);
  else if (e === 'bool') a = new Uint8Array(t);
  else throw new Error(`Unknown data type ${e}`);
  return a;
}
function Wp(e, t) {
  let a = null;
  if (e == null || e === 'float32') a = new Float32Array(t);
  else if (e === 'int32') a = new Int32Array(t);
  else if (e === 'bool') a = new Uint8Array(t);
  else if (e === 'string') a = new Array(t);
  else throw new Error(`Unknown data type ${e}`);
  return a;
}
function Kp(e, t) {
  for (let a = 0; a < e.length; a++) {
    let r = e[a];
    if (isNaN(r) || !isFinite(r))
      throw Error(`A tensor of type ${t} being uploaded contains ${r}.`);
  }
}
function Gp(e) {
  return e === 'bool' || e === 'complex64' || e === 'float32' || e === 'int32' || e === 'string';
}
function Gd(e, t) {
  return !(
    t === 'complex64' ||
    (t === 'float32' && e !== 'complex64') ||
    (t === 'int32' && e !== 'float32' && e !== 'complex64') ||
    (t === 'bool' && e === 'bool')
  );
}
function St(e) {
  return (
    e instanceof Float32Array ||
    e instanceof Int32Array ||
    e instanceof Uint8Array ||
    e instanceof Uint8ClampedArray
  );
}
function en(e) {
  if (e === 'float32' || e === 'int32') return 4;
  if (e === 'complex64') return 8;
  if (e === 'bool') return 1;
  throw new Error(`Unknown dtype ${e}`);
}
function Xp(e) {
  if (e == null) return 0;
  let t = 0;
  return e.forEach((a) => (t += a.length)), t;
}
function Ya(e) {
  return typeof e == 'string' || e instanceof String;
}
function Yp(e) {
  return typeof e == 'boolean';
}
function Jp(e) {
  return typeof e == 'number';
}
function Ja(e) {
  return Array.isArray(e)
    ? Ja(e[0])
    : e instanceof Float32Array
    ? 'float32'
    : e instanceof Int32Array || e instanceof Uint8Array || e instanceof Uint8ClampedArray
    ? 'int32'
    : Jp(e)
    ? 'float32'
    : Ya(e)
    ? 'string'
    : Yp(e)
    ? 'bool'
    : 'float32';
}
function Za(e) {
  return !!(e && e.constructor && e.call && e.apply);
}
function Xd(e, t) {
  for (let a = t; a < e; ++a) if (e % a == 0) return a;
  return e;
}
function Qa(e) {
  let t = e.length;
  if (t < 2) return [];
  let a = new Array(t - 1);
  a[t - 2] = e[t - 1];
  for (let r = t - 3; r >= 0; --r) a[r] = a[r + 1] * e[r + 1];
  return a;
}
function Zp(e, t, a, r = !1) {
  let n = new Array();
  if (t.length === 1) {
    let s = t[0] * (r ? 2 : 1);
    for (let p = 0; p < s; p++) n[p] = a[e + p];
  } else {
    let s = t[0],
      p = t.slice(1),
      i = p.reduce((d, l) => d * l) * (r ? 2 : 1);
    for (let d = 0; d < s; d++) n[d] = Zp(e + d * i, p, a, r);
  }
  return n;
}
function I1(e, t, a = !1) {
  if (e.length === 0) return t[0];
  let r = e.reduce((n, s) => n * s) * (a ? 2 : 1);
  if (r === 0) return [];
  if (r !== t.length)
    throw new Error(
      `[${e}] does not match the input size ${t.length}${a ? ' for a complex tensor' : ''}.`
    );
  return Zp(0, e, t, a);
}
function tn(e, t) {
  let a = er(e, t);
  for (let r = 0; r < a.length; r++) a[r] = 1;
  return a;
}
function er(e, t) {
  if (t == null || t === 'float32' || t === 'complex64') return new Float32Array(e);
  if (t === 'int32') return new Int32Array(e);
  if (t === 'bool') return new Uint8Array(e);
  throw new Error(`Unknown data type ${t}`);
}
function Yd(e, t) {
  let a = e.reduce((r, n) => r * n, 1);
  if (t == null || t === 'float32') return I1(e, new Float32Array(a));
  if (t === 'int32') return I1(e, new Int32Array(a));
  if (t === 'bool') return I1(e, new Uint8Array(a));
  throw new Error(`Unknown data type ${t}`);
}
function an(e) {
  e.forEach((t) => {
    S(
      Number.isInteger(t) && t >= 0,
      () => `Tensor must have a shape comprised of positive integers but got shape [${e}].`
    );
  });
}
function Jd(e, t, a) {
  if (t === 0) return 0;
  if (t === 1) return e[0];
  let r = e[e.length - 1];
  for (let n = 0; n < e.length - 1; ++n) r += a[n] * e[n];
  return r;
}
function Zd(e, t, a) {
  if (t === 0) return [];
  if (t === 1) return [e];
  let r = new Array(t);
  for (let n = 0; n < r.length - 1; ++n) (r[n] = Math.floor(e / a[n])), (e -= r[n] * a[n]);
  return (r[r.length - 1] = e), r;
}
function rn(e) {
  return e && e.then && typeof e.then == 'function';
}
var Qp = 'tfjsflags',
  Qd = class {
    constructor(e) {
      (this.global = e),
        (this.flags = {}),
        (this.flagRegistry = {}),
        (this.urlFlags = {}),
        (this.getQueryParams = e4),
        this.populateURLFlags();
    }
    setPlatform(e, t) {
      this.platform != null &&
        (fe().getBool('IS_TEST') ||
          fe().getBool('PROD') ||
          console.warn(
            `Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`
          )),
        (this.platformName = e),
        (this.platform = t);
    }
    registerFlag(e, t, a) {
      if (((this.flagRegistry[e] = { evaluationFn: t, setHook: a }), this.urlFlags[e] != null)) {
        let r = this.urlFlags[e];
        fe().getBool('IS_TEST') ||
          fe().getBool('PROD') ||
          console.warn(`Setting feature override from URL ${e}: ${r}.`),
          this.set(e, r);
      }
    }
    async getAsync(e) {
      return e in this.flags
        ? this.flags[e]
        : ((this.flags[e] = await this.evaluateFlag(e)), this.flags[e]);
    }
    get(e) {
      if (e in this.flags) return this.flags[e];
      let t = this.evaluateFlag(e);
      if (rn(t))
        throw new Error(
          `Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`
        );
      return (this.flags[e] = t), this.flags[e];
    }
    getNumber(e) {
      return this.get(e);
    }
    getBool(e) {
      return this.get(e);
    }
    getFlags() {
      return this.flags;
    }
    get features() {
      return this.flags;
    }
    set(e, t) {
      if (this.flagRegistry[e] == null)
        throw new Error(`Cannot set flag ${e} as it has not been registered.`);
      (this.flags[e] = t), this.flagRegistry[e].setHook != null && this.flagRegistry[e].setHook(t);
    }
    evaluateFlag(e) {
      if (this.flagRegistry[e] == null)
        throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);
      return this.flagRegistry[e].evaluationFn();
    }
    setFlags(e) {
      this.flags = Object.assign({}, e);
    }
    reset() {
      (this.flags = {}), (this.urlFlags = {}), this.populateURLFlags();
    }
    populateURLFlags() {
      if (
        typeof this.global == 'undefined' ||
        typeof this.global.location == 'undefined' ||
        typeof this.global.location.search == 'undefined'
      )
        return;
      let e = this.getQueryParams(this.global.location.search);
      Qp in e &&
        e[Qp].split(',').forEach((a) => {
          let [r, n] = a.split(':');
          this.urlFlags[r] = a4(r, n);
        });
    }
  };
function e4(e) {
  let t = {};
  return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (a, ...r) => (t4(t, r[0], r[1]), r.join('='))), t;
}
function t4(e, t, a) {
  e[decodeURIComponent(t)] = decodeURIComponent(a || '');
}
function a4(e, t) {
  if (((t = t.toLowerCase()), t === 'true' || t === 'false')) return t === 'true';
  if (`${+t}` === t) return +t;
  throw new Error(`Could not parse value flag value ${t} for flag ${e}.`);
}
function fe() {
  return ei;
}
var ei = null;
function r4(e) {
  ei = e;
}
var nn;
function ti() {
  if (nn == null) {
    let e;
    if (typeof window != 'undefined') e = window;
    else if (typeof global != 'undefined') e = global;
    else if (typeof process != 'undefined') e = process;
    else if (typeof self != 'undefined') e = self;
    else throw new Error('Could not find a global object');
    nn = e;
  }
  return nn;
}
function n4() {
  let e = ti();
  return e._tfGlobals == null && (e._tfGlobals = new Map()), e._tfGlobals;
}
function sn(e, t) {
  let a = n4();
  if (a.has(e)) return a.get(e);
  {
    let r = t();
    return a.set(e, r), a.get(e);
  }
}
var s4 = 'Abs',
  p4 = 'Acos',
  i4 = 'Acosh',
  ai = 'Add',
  o4 = 'AddN',
  d4 = 'All',
  l4 = 'Any',
  m4 = 'ArgMax',
  u4 = 'ArgMin',
  c4 = 'Asin',
  h4 = 'Asinh',
  f4 = 'Atan',
  v4 = 'Atanh',
  g4 = 'Atan2',
  y4 = 'AvgPool',
  w4 = 'AvgPool3D',
  b4 = 'BatchMatMul',
  N4 = 'BatchToSpaceND',
  _4 = 'Bincount',
  S4 = 'BroadcastArgs',
  ri = 'Cast',
  T4 = 'Ceil',
  E4 = 'ClipByValue',
  D4 = 'Complex',
  x4 = 'ComplexAbs',
  A4 = 'Concat',
  k4 = 'Conv2D',
  $4 = 'Conv2DBackpropFilter',
  I4 = 'Conv2DBackpropInput',
  O4 = 'Conv3D',
  V4 = 'Conv3DBackpropInputV2',
  C4 = 'Cos',
  F4 = 'Cosh',
  B4 = 'Cumprod',
  P4 = 'Cumsum',
  R4 = 'CropAndResize',
  L4 = 'DenseBincount',
  U4 = 'DepthToSpace',
  z4 = 'DepthwiseConv2dNative',
  j4 = 'DepthwiseConv2dNativeBackpropFilter',
  M4 = 'DepthwiseConv2dNativeBackpropInput',
  q4 = 'Diag',
  H4 = 'Dilation2D',
  W4 = 'RealDiv',
  K4 = 'Einsum',
  G4 = 'Elu',
  X4 = 'Erf',
  Y4 = 'Equal',
  J4 = 'Exp',
  Z4 = 'ExpandDims',
  Q4 = 'Expm1',
  e0 = 'FFT',
  t0 = 'Fill',
  a0 = 'FlipLeftRight',
  r0 = 'Floor',
  n0 = 'FloorDiv',
  s0 = 'FusedBatchNorm',
  p0 = 'GatherV2',
  i0 = 'GatherNd',
  o0 = 'Greater',
  d0 = 'GreaterEqual',
  ni = 'Identity',
  l0 = 'IFFT',
  m0 = 'Imag',
  u0 = 'IsFinite',
  c0 = 'IsInf',
  h0 = 'IsNan',
  f0 = 'LeakyRelu',
  v0 = 'Less',
  g0 = 'LessEqual',
  y0 = 'LinSpace',
  w0 = 'Log',
  b0 = 'Log1p',
  N0 = 'LogicalAnd',
  _0 = 'LogicalNot',
  S0 = 'LogicalOr',
  T0 = 'LRN',
  E0 = 'Max',
  D0 = 'Maximum',
  x0 = 'MaxPool',
  A0 = 'MaxPool3D',
  k0 = 'MaxPoolWithArgmax',
  $0 = 'Mean',
  I0 = 'Min',
  O0 = 'Minimum',
  V0 = 'MirrorPad',
  C0 = 'Mod',
  F0 = 'Multinomial',
  B0 = 'Multiply',
  P0 = 'Neg',
  R0 = 'NotEqual',
  L0 = 'NonMaxSuppressionV3',
  U0 = 'NonMaxSuppressionV4',
  z0 = 'NonMaxSuppressionV5',
  j0 = 'OnesLike',
  M0 = 'OneHot',
  q0 = 'Pack',
  H0 = 'PadV2',
  W0 = 'Pow',
  K0 = 'Prelu',
  G0 = 'Prod',
  X0 = 'Range',
  Y0 = 'Real',
  J0 = 'Reciprocal',
  Z0 = 'Relu',
  Q0 = 'Reshape',
  el = 'ResizeNearestNeighbor',
  tl = 'ResizeBilinear',
  al = 'Relu6',
  rl = 'Reverse',
  nl = 'Round',
  sl = 'Rsqrt',
  pl = 'ScatterNd',
  il = 'SearchSorted',
  ol = 'Select',
  dl = 'Selu',
  ll = 'Slice',
  ml = 'Sin',
  ul = 'Sinh',
  cl = 'Sign',
  hl = 'Sigmoid',
  fl = 'Softplus',
  vl = 'Sqrt',
  gl = 'Sum',
  yl = 'SpaceToBatchND',
  wl = 'SplitV',
  bl = 'Softmax',
  Nl = 'SparseFillEmptyRows',
  _l = 'SparseReshape',
  Sl = 'SparseSegmentMean',
  Tl = 'SparseSegmentSum',
  El = 'SparseToDense',
  Dl = 'SquaredDifference',
  xl = 'StridedSlice',
  Al = 'StringNGrams',
  kl = 'StringSplit',
  $l = 'StringToHashBucketFast',
  Il = 'Sub',
  Ol = 'Tan',
  Vl = 'Tanh',
  si = 'Tile',
  Cl = 'TopK',
  Fl = 'Transform',
  pn = 'Transpose',
  Bl = 'Unique',
  Pl = 'Unpack',
  Rl = 'UnsortedSegmentSum',
  Ll = 'ZerosLike',
  Ul = 'Step',
  pi = 'FromPixels',
  zl = 'RotateWithOffset',
  ii = '_FusedMatMul',
  oi = 'FusedConv2D',
  di = 'FusedDepthwiseConv2D';
function na(...e) {
  fe().getBool('IS_TEST') || fe().getBool('PROD') || console.warn(...e);
}
var li = sn('kernelRegistry', () => new Map()),
  jl = sn('gradRegistry', () => new Map());
function on(e, t) {
  let a = Ml(e, t);
  return li.get(a);
}
function mi(e) {
  return jl.get(e);
}
function ui(e) {
  let t = li.entries(),
    a = [];
  for (;;) {
    let { done: r, value: n } = t.next();
    if (r) break;
    let [s, p] = n,
      [i] = s.split('_');
    i === e && a.push(p);
  }
  return a;
}
function Ml(e, t) {
  return `${t}_${e}`;
}
var Qe = {};
be(Qe, {
  arraysEqual: () => m1,
  assert: () => S,
  assertNonNegativeIntegerDimensions: () => an,
  assertNonNull: () => Xa,
  assertShapesMatch: () => _t,
  bytesFromStringArray: () => Xp,
  bytesPerElement: () => en,
  checkConversionForErrors: () => Kp,
  clamp: () => Bd,
  computeStrides: () => Qa,
  createScalarValue: () => Xl,
  createShuffledIndices: () => qd,
  decodeString: () => mn,
  distSquared: () => Ud,
  encodeString: () => ln,
  fetch: () => Jl,
  fingerPrint64: () => Gl,
  flatten: () => ta,
  getArrayFromDType: () => Wp,
  getTypedArrayFromDType: () => Kd,
  hasEncodingLoss: () => Gd,
  hexToLong: () => sa,
  indexToLoc: () => Zd,
  inferDtype: () => Ja,
  inferFromImplicitShape: () => Wd,
  isBoolean: () => Yp,
  isFunction: () => Za,
  isInt: () => $1,
  isNumber: () => Jp,
  isPromise: () => rn,
  isScalarShape: () => zd,
  isString: () => Ya,
  isTypedArray: () => St,
  isValidDtype: () => Gp,
  locToIndex: () => Jd,
  makeOnesTypedArray: () => tn,
  makeZerosNestedTypedArray: () => Yd,
  makeZerosTypedArray: () => er,
  nearestDivisor: () => Xd,
  nearestLargerEven: () => Pd,
  now: () => pa,
  parseAxisParam: () => ra,
  randUniform: () => Ld,
  repeatedTry: () => Hd,
  rightPad: () => aa,
  shuffle: () => qp,
  shuffleCombo: () => Fd,
  sizeFromShape: () => Xe,
  sizeToSquarishShape: () => Md,
  squeezeShape: () => Hp,
  sum: () => Rd,
  swap: () => Ga,
  tanh: () => jd,
  toNestedArray: () => I1,
  toTypedArray: () => ar
});
var ci = Y1(ed()),
  u1 = ci.default || ci;
function sa(e) {
  return u1.fromString(e, !0, 16);
}
var hi = sa('c3a5c85c97cb3127'),
  c1 = sa('b492b66fbe98f273'),
  Je = sa('9ae16a3b2f90404f');
function dn(e) {
  return e.xor(e.shru(47));
}
function fi(e, t, a) {
  let r = e.slice(t, t + a);
  return u1.fromBytes(Array.from(r), !0, !0);
}
function _e(e, t) {
  return fi(e, t, 8);
}
function vi(e, t) {
  return fi(e, t, 4);
}
function Le(e, t) {
  return t === 0 ? e : e.shru(t).or(e.shl(64 - t));
}
function Zt(e, t, a = sa('9ddfea08eb382d69')) {
  let r = e.xor(t).mul(a);
  r = r.xor(r.shru(47));
  let n = t.xor(r).mul(a);
  return (n = n.xor(n.shru(47))), (n = n.mul(a)), n;
}
function ql(e, t, a, r, n, s) {
  (n = n.add(e)), (s = Le(s.add(n).add(r), 21));
  let p = n;
  return (n = n.add(t)), (n = n.add(a)), (s = s.add(Le(n, 44))), [n.add(r), s.add(p)];
}
function tr(e, t, a, r) {
  return ql(_e(e, t), _e(e, t + 8), _e(e, t + 16), _e(e, t + 24), a, r);
}
function Hl(e, t = e.length) {
  if (t >= 8) {
    let a = Je.add(t * 2),
      r = _e(e, 0).add(Je),
      n = _e(e, t - 8),
      s = Le(n, 37).mul(a).add(r),
      p = Le(r, 25).add(n).mul(a);
    return Zt(s, p, a);
  }
  if (t >= 4) {
    let a = Je.add(t * 2),
      r = vi(e, 0);
    return Zt(r.shl(3).add(t), vi(e, t - 4), a);
  }
  if (t > 0) {
    let a = e[0],
      r = e[t >> 1],
      n = e[t - 1],
      s = a + (r << 8),
      p = t + (n << 2);
    return dn(Je.mul(s).xor(hi.mul(p))).mul(Je);
  }
  return Je;
}
function Wl(e, t = e.length) {
  let a = Je.add(t * 2),
    r = _e(e, 0).mul(c1),
    n = _e(e, 8),
    s = _e(e, t - 8).mul(a),
    p = _e(e, t - 16).mul(Je);
  return Zt(Le(r.add(n), 43).add(Le(s, 30)).add(p), r.add(Le(n.add(Je), 18)).add(s), a);
}
function Kl(e, t = e.length) {
  let a = Je.add(t * 2),
    r = _e(e, 0).mul(Je),
    n = _e(e, 8),
    s = _e(e, t - 8).mul(a),
    p = _e(e, t - 16).mul(Je),
    i = Le(r.add(n), 43).add(Le(s, 30)).add(p),
    d = Zt(i, r.add(Le(n.add(Je), 18)).add(s), a),
    l = _e(e, 16).mul(a),
    m = _e(e, 24),
    u = i.add(_e(e, t - 32)).mul(a),
    f = d.add(_e(e, t - 24)).mul(a);
  return Zt(Le(l.add(m), 43).add(Le(u, 30)).add(f), l.add(Le(m.add(r), 18)).add(u), a);
}
function Gl(e, t = e.length) {
  let a = u1.fromNumber(81, !0);
  if (t <= 32) return t <= 16 ? Hl(e, t) : Wl(e, t);
  if (t <= 64) return Kl(e, t);
  let r = a,
    n = a.mul(c1).add(113),
    s = dn(n.mul(Je).add(113)).mul(Je),
    p = [u1.UZERO, u1.UZERO],
    i = [u1.UZERO, u1.UZERO];
  r = r.mul(Je).add(_e(e, 0));
  let d = 0,
    l = ((t - 1) >> 6) * 64,
    m = l + ((t - 1) & 63) - 63;
  do
    (r = Le(
      r
        .add(n)
        .add(p[0])
        .add(_e(e, d + 8)),
      37
    ).mul(c1)),
      (n = Le(n.add(p[1]).add(_e(e, d + 48)), 42).mul(c1)),
      (r = r.xor(i[1])),
      (n = n.add(p[0]).add(_e(e, d + 40))),
      (s = Le(s.add(i[0]), 33).mul(c1)),
      (p = tr(e, d, p[1].mul(c1), r.add(i[0]))),
      (i = tr(e, d + 32, s.add(i[1]), n.add(_e(e, d + 16)))),
      ([s, r] = [r, s]),
      (d += 64);
  while (d !== l);
  let u = c1.add(s.and(255).shl(1));
  return (
    (d = m),
    (i[0] = i[0].add((t - 1) & 63)),
    (p[0] = p[0].add(i[0])),
    (i[0] = i[0].add(p[0])),
    (r = Le(
      r
        .add(n)
        .add(p[0])
        .add(_e(e, d + 8)),
      37
    ).mul(u)),
    (n = Le(n.add(p[1]).add(_e(e, d + 48)), 42).mul(u)),
    (r = r.xor(i[1].mul(9))),
    (n = n.add(p[0].mul(9).add(_e(e, d + 40)))),
    (s = Le(s.add(i[0]), 33).mul(u)),
    (p = tr(e, d, p[1].mul(u), r.add(i[0]))),
    (i = tr(e, d + 32, s.add(i[1]), n.add(_e(e, d + 16)))),
    ([s, r] = [r, s]),
    Zt(Zt(p[0], i[0], u).add(dn(n).mul(hi)).add(s), Zt(p[1], i[1], u).add(r), u)
  );
}
function Xl(e, t) {
  return t === 'string' ? ln(e) : ar([e], t);
}
function Yl(e, t) {
  return (
    (e instanceof Float32Array && t === 'float32') ||
    (e instanceof Int32Array && t === 'int32') ||
    (e instanceof Uint8Array && t === 'bool')
  );
}
function ar(e, t) {
  if (t === 'string') throw new Error('Cannot convert a string[] to a TypedArray');
  if ((Array.isArray(e) && (e = ta(e)), fe().getBool('DEBUG') && Kp(e, t), Yl(e, t))) return e;
  if (t == null || t === 'float32' || t === 'complex64') return new Float32Array(e);
  if (t === 'int32') return new Int32Array(e);
  if (t === 'bool') {
    let a = new Uint8Array(e.length);
    for (let r = 0; r < a.length; ++r) Math.round(e[r]) !== 0 && (a[r] = 1);
    return a;
  } else throw new Error(`Unknown data type ${t}`);
}
function pa() {
  return fe().platform.now();
}
function Jl(e, t) {
  return fe().platform.fetch(e, t);
}
function ln(e, t = 'utf-8') {
  return (t = t || 'utf-8'), fe().platform.encode(e, t);
}
function mn(e, t = 'utf-8') {
  return (t = t || 'utf-8'), fe().platform.decode(e, t);
}
var Zl = class {
  constructor(e, t) {
    (this.backendTimer = e), (this.logger = t), t == null && (this.logger = new e6());
  }
  profileKernel(e, t, a) {
    let r,
      n = () => {
        r = a();
      },
      s,
      p = pa();
    if (this.backendTimer.timerAvailable()) s = this.backendTimer.time(n);
    else {
      n();
      for (let d of r) d.dataSync();
      s = Promise.resolve({ kernelMs: pa() - p });
    }
    if (fe().getBool('CHECK_COMPUTATION_FOR_ERRORS'))
      for (let d = 0; d < r.length; d++) {
        let l = r[d];
        l.data().then((m) => {
          Ql(m, l.dtype, e);
        });
      }
    return {
      kernelName: e,
      outputs: r,
      inputs: t,
      timeMs: s.then((d) => d.kernelMs),
      extraInfo: s.then((d) => (d.getExtraProfileInfo != null ? d.getExtraProfileInfo() : ''))
    };
  }
  logKernelProfile(e) {
    let { kernelName: t, outputs: a, timeMs: r, inputs: n, extraInfo: s } = e;
    a.forEach((p) => {
      Promise.all([p.data(), r, s]).then((i) => {
        this.logger.logKernelProfile(t, p, i[0], i[1], n, i[2]);
      });
    });
  }
};
function Ql(e, t, a) {
  if (t !== 'float32') return !1;
  for (let r = 0; r < e.length; r++) {
    let n = e[r];
    if (isNaN(n) || !isFinite(n)) return console.warn(`Found ${n} in the result of '${a}'`), !0;
  }
  return !1;
}
var e6 = class {
  logKernelProfile(e, t, a, r, n, s) {
    let p = typeof r == 'number' ? aa(`${r}ms`, 9) : r.error,
      i = aa(e, 25),
      d = t.rank,
      l = t.size,
      m = aa(t.shape.toString(), 14),
      u = '';
    for (let f in n) {
      let g = n[f];
      if (g != null) {
        let y = g.shape || t.shape,
          N = y.length;
        u += `${f}: ${N}D ${N > 0 ? y : ''} `;
      }
    }
    console.log(
      `%c${i}	%c${p}	%c${d}D ${m}	%c${l}	%c${u}	%c${s}`,
      'font-weight:bold',
      'color:red',
      'color:blue',
      'color: orange',
      'color: green',
      'color: steelblue'
    );
  }
};
function t6(e, t, a) {
  let r = {},
    n = {};
  for (let d = 0; d < t.length; d++) r[t[d].id] = !0;
  for (let d = 0; d < e.length; d++) {
    let l = e[d],
      m = l.inputs;
    for (let u in m) {
      let f = m[u],
        g = !1;
      for (let y = 0; y < t.length; y++)
        if (r[f.id]) {
          l.outputs.forEach((N) => (r[N.id] = !0)), (g = !0), (n[l.id] = !0);
          break;
        }
      if (g) break;
    }
  }
  let s = {};
  s[a.id] = !0;
  let p = {};
  for (let d = e.length - 1; d >= 0; d--) {
    let l = e[d],
      m = l.inputs;
    for (let u = 0; u < l.outputs.length; u++)
      if (s[l.outputs[u].id]) {
        for (let f in m) (s[m[f].id] = !0), (p[l.id] = !0);
        break;
      }
  }
  let i = [];
  for (let d = 0; d < e.length; d++) {
    let l = e[d];
    if (n[l.id] && p[l.id]) {
      let m = {};
      for (let f in l.inputs) {
        let g = l.inputs[f];
        r[g.id] && (m[f] = g);
      }
      let u = Object.assign({}, l);
      (u.inputs = m), (u.outputs = l.outputs), i.push(u);
    }
  }
  return i;
}
function a6(e, t, a, r) {
  for (let n = t.length - 1; n >= 0; n--) {
    let s = t[n],
      p = [];
    if (
      (s.outputs.forEach((d) => {
        let l = e[d.id];
        l != null ? p.push(l) : p.push(null);
      }),
      s.gradient == null)
    )
      throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);
    let i = s.gradient(p);
    for (let d in s.inputs) {
      if (!(d in i))
        throw new Error(
          `Cannot backprop through input ${d}. Available gradients found: ${Object.keys(i)}.`
        );
      let l = a(() => i[d]());
      if (l.dtype !== 'float32')
        throw new Error(
          `Error in gradient for op ${s.kernelName}. The gradient of input ${d} must have 'float32' dtype, but has '${l.dtype}'`
        );
      let m = s.inputs[d];
      if (!m1(l.shape, m.shape))
        throw new Error(
          `Error in gradient for op ${s.kernelName}. The gradient of input '${d}' has shape '${l.shape}', which does not match the shape of the input '${m.shape}'`
        );
      if (e[m.id] == null) e[m.id] = l;
      else {
        let u = e[m.id];
        (e[m.id] = r(u, l)), u.dispose();
      }
    }
  }
}
var gi = 20,
  ia = 3,
  un = 7;
function r6(e, t, a, r) {
  let n = Qa(t),
    s = n6(e, t, a, n),
    p = t.length,
    i = rr(e, t, a, n, s),
    d = ['Tensor'];
  return (
    r &&
      (d.push(`  dtype: ${a}`),
      d.push(`  rank: ${p}`),
      d.push(`  shape: [${t}]`),
      d.push('  values:')),
    d.push(
      i.map((l) => '    ' + l).join(`
`)
    ),
    d.join(`
`)
  );
}
function n6(e, t, a, r) {
  let n = Xe(t),
    s = r[r.length - 1],
    p = new Array(s).fill(0),
    i = t.length,
    d = a === 'complex64' ? da(e) : e;
  if (i > 1)
    for (let l = 0; l < n / s; l++) {
      let m = l * s;
      for (let u = 0; u < s; u++) p[u] = Math.max(p[u], oa(d[m + u], 0, a).length);
    }
  return p;
}
function oa(e, t, a) {
  let r;
  return (
    Array.isArray(e)
      ? (r = `${parseFloat(e[0].toFixed(un))} + ${parseFloat(e[1].toFixed(un))}j`)
      : Ya(e)
      ? (r = `'${e}'`)
      : a === 'bool'
      ? (r = yi(e))
      : (r = parseFloat(e.toFixed(un)).toString()),
    aa(r, t)
  );
}
function yi(e) {
  return e === 0 ? 'false' : 'true';
}
function rr(e, t, a, r, n, s = !0) {
  let p = a === 'complex64' ? 2 : 1,
    i = t[0],
    d = t.length;
  if (d === 0) {
    if (a === 'complex64') {
      let N = da(e);
      return [oa(N[0], 0, a)];
    }
    return a === 'bool' ? [yi(e[0])] : [e[0].toString()];
  }
  if (d === 1) {
    if (i > gi) {
      let T = ia * p,
        O = Array.from(e.slice(0, T)),
        B = Array.from(e.slice((i - ia) * p, i * p));
      return (
        a === 'complex64' && ((O = da(O)), (B = da(B))),
        [
          '[' +
            O.map((M, C) => oa(M, n[C], a)).join(', ') +
            ', ..., ' +
            B.map((M, C) => oa(M, n[i - ia + C], a)).join(', ') +
            ']'
        ]
      );
    }
    let N = a === 'complex64' ? da(e) : Array.from(e);
    return ['[' + N.map((T, O) => oa(T, n[O], a)).join(', ') + ']'];
  }
  let l = t.slice(1),
    m = r.slice(1),
    u = r[0] * p,
    f = [];
  if (i > gi) {
    for (let N = 0; N < ia; N++) {
      let T = N * u,
        O = T + u;
      f.push(...rr(e.slice(T, O), l, a, m, n, !1));
    }
    f.push('...');
    for (let N = i - ia; N < i; N++) {
      let T = N * u,
        O = T + u;
      f.push(...rr(e.slice(T, O), l, a, m, n, N === i - 1));
    }
  } else
    for (let N = 0; N < i; N++) {
      let T = N * u,
        O = T + u;
      f.push(...rr(e.slice(T, O), l, a, m, n, N === i - 1));
    }
  let g = d === 2 ? ',' : '';
  f[0] = '[' + f[0] + g;
  for (let N = 1; N < f.length - 1; N++) f[N] = ' ' + f[N] + g;
  let y = `,
`;
  for (let N = 2; N < d; N++)
    y += `
`;
  return (f[f.length - 1] = ' ' + f[f.length - 1] + ']' + (s ? '' : y)), f;
}
function da(e) {
  let t = [];
  for (let a = 0; a < e.length; a += 2) t.push([e[a], e[a + 1]]);
  return t;
}
var cn = class {
    constructor(e, t, a) {
      if (((this.dtype = t), (this.shape = e.slice()), (this.size = Xe(e)), a != null)) {
        let r = a.length;
        S(
          r === this.size,
          () =>
            `Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`
        );
      }
      if (t === 'complex64')
        throw new Error(
          'complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).'
        );
      (this.values = a || Wp(t, this.size)), (this.strides = Qa(e));
    }
    set(e, ...t) {
      t.length === 0 && (t = [0]),
        S(
          t.length === this.rank,
          () =>
            `The number of provided coordinates (${t.length}) must match the rank (${this.rank})`
        );
      let a = this.locToIndex(t);
      this.values[a] = e;
    }
    get(...e) {
      e.length === 0 && (e = [0]);
      let t = 0;
      for (let r of e) {
        if (r < 0 || r >= this.shape[t]) {
          let n = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`;
          throw new Error(n);
        }
        t++;
      }
      let a = e[e.length - 1];
      for (let r = 0; r < e.length - 1; ++r) a += this.strides[r] * e[r];
      return this.values[a];
    }
    locToIndex(e) {
      if (this.rank === 0) return 0;
      if (this.rank === 1) return e[0];
      let t = e[e.length - 1];
      for (let a = 0; a < e.length - 1; ++a) t += this.strides[a] * e[a];
      return t;
    }
    indexToLoc(e) {
      if (this.rank === 0) return [];
      if (this.rank === 1) return [e];
      let t = new Array(this.shape.length);
      for (let a = 0; a < t.length - 1; ++a)
        (t[a] = Math.floor(e / this.strides[a])), (e -= t[a] * this.strides[a]);
      return (t[t.length - 1] = e), t;
    }
    get rank() {
      return this.shape.length;
    }
    toTensor() {
      return Tt().makeTensor(this.values, this.shape, this.dtype);
    }
  },
  Tt = null,
  O1 = null,
  s6 = null;
function p6(e) {
  Tt = e;
}
function i6(e) {
  O1 = e;
}
function o6(e) {
  s6 = e;
}
var He = class {
  constructor(e, t, a, r) {
    (this.kept = !1),
      (this.isDisposedInternal = !1),
      (this.shape = e.slice()),
      (this.dtype = t || 'float32'),
      (this.size = Xe(e)),
      (this.strides = Qa(e)),
      (this.dataId = a),
      (this.id = r),
      (this.rankType = this.rank < 5 ? this.rank.toString() : 'higher');
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    let e = await this.data();
    return O1.buffer(this.shape, this.dtype, e);
  }
  bufferSync() {
    return O1.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    let e = await this.data();
    return I1(this.shape, e, this.dtype === 'complex64');
  }
  arraySync() {
    return I1(this.shape, this.dataSync(), this.dtype === 'complex64');
  }
  async data() {
    this.throwIfDisposed();
    let e = Tt().read(this.dataId);
    if (this.dtype === 'string') {
      let t = await e;
      try {
        return t.map((a) => mn(a));
      } catch {
        throw new Error(
          'Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().'
        );
      }
    }
    return e;
  }
  dataToGPU(e) {
    return this.throwIfDisposed(), Tt().readToGPU(this.dataId, e);
  }
  dataSync() {
    this.throwIfDisposed();
    let e = Tt().readSync(this.dataId);
    if (this.dtype === 'string')
      try {
        return e.map((t) => mn(t));
      } catch {
        throw new Error(
          'Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().'
        );
      }
    return e;
  }
  async bytes() {
    this.throwIfDisposed();
    let e = await Tt().read(this.dataId);
    return this.dtype === 'string' ? e : new Uint8Array(e.buffer);
  }
  dispose() {
    this.isDisposed || (Tt().disposeTensor(this), (this.isDisposedInternal = !0));
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed) throw new Error('Tensor is disposed.');
  }
  print(e = !1) {
    return O1.print(this, e);
  }
  clone() {
    return this.throwIfDisposed(), O1.clone(this);
  }
  toString(e = !1) {
    let t = this.dataSync();
    return r6(t, this.shape, this.dtype, e);
  }
  cast(e) {
    return this.throwIfDisposed(), O1.cast(this, e);
  }
  variable(e = !0, t, a) {
    return this.throwIfDisposed(), Tt().makeVariable(this, e, t, a);
  }
};
Object.defineProperty(He, Symbol.hasInstance, {
  value: (e) => !!e && e.data != null && e.dataSync != null && e.throwIfDisposed != null
});
function d6() {
  return sn('Tensor', () => He);
}
d6();
var nr = class extends He {
  constructor(e, t, a, r) {
    super(e.shape, e.dtype, e.dataId, r);
    (this.trainable = t), (this.name = a);
  }
  assign(e) {
    if (e.dtype !== this.dtype)
      throw new Error(
        `dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`
      );
    if (!m1(e.shape, this.shape))
      throw new Error(
        `shape of the new value (${e.shape}) and previous value (${this.shape}) must match`
      );
    Tt().disposeTensor(this), (this.dataId = e.dataId), Tt().incRef(this, null);
  }
  dispose() {
    Tt().disposeVariable(this), (this.isDisposedInternal = !0);
  }
};
Object.defineProperty(nr, Symbol.hasInstance, {
  value: (e) => e instanceof He && e.assign != null && e.assign instanceof Function
});
var wi;
(function (e) {
  (e.R0 = 'R0'),
    (e.R1 = 'R1'),
    (e.R2 = 'R2'),
    (e.R3 = 'R3'),
    (e.R4 = 'R4'),
    (e.R5 = 'R5'),
    (e.R6 = 'R6');
})(wi || (wi = {}));
var hn;
(function (e) {
  (e.float32 = 'float32'), (e.int32 = 'int32'), (e.bool = 'int32'), (e.complex64 = 'complex64');
})(hn || (hn = {}));
var fn;
(function (e) {
  (e.float32 = 'float32'), (e.int32 = 'int32'), (e.bool = 'bool'), (e.complex64 = 'complex64');
})(fn || (fn = {}));
var vn;
(function (e) {
  (e.float32 = 'float32'), (e.int32 = 'float32'), (e.bool = 'float32'), (e.complex64 = 'complex64');
})(vn || (vn = {}));
var gn;
(function (e) {
  (e.float32 = 'complex64'),
    (e.int32 = 'complex64'),
    (e.bool = 'complex64'),
    (e.complex64 = 'complex64');
})(gn || (gn = {}));
var l6 = { float32: vn, int32: hn, bool: fn, complex64: gn };
function m6(e, t) {
  if (e === 'string' || t === 'string') {
    if (e === 'string' && t === 'string') return 'string';
    throw new Error(`Can not upcast ${e} with ${t}`);
  }
  return l6[e][t];
}
function $e(e, t) {
  if (e.dtype === t.dtype) return [e, t];
  let a = m6(e.dtype, t.dtype);
  return [e.cast(a), t.cast(a)];
}
function u6(e, t) {
  S(
    e.dtype === t.dtype,
    () => `The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`
  );
}
function bi(e) {
  let t = [],
    a = new Set();
  return Ni(e, t, a), t;
}
function Ni(e, t, a) {
  if (e == null) return;
  if (e instanceof He) {
    t.push(e);
    return;
  }
  if (!c6(e)) return;
  let r = e;
  for (let n in r) {
    let s = r[n];
    a.has(s) || (a.add(s), Ni(s, t, a));
  }
}
function c6(e) {
  return Array.isArray(e) || typeof e == 'object';
}
function yn(e) {
  return e.kernelName != null;
}
var _i = class {
    constructor() {
      (this.registeredVariables = {}),
        (this.nextTapeNodeId = 0),
        (this.numBytes = 0),
        (this.numTensors = 0),
        (this.numStringTensors = 0),
        (this.numDataBuffers = 0),
        (this.gradientDepth = 0),
        (this.kernelDepth = 0),
        (this.scopeStack = []),
        (this.numDataMovesStack = []),
        (this.nextScopeId = 0),
        (this.tensorInfo = new WeakMap()),
        (this.profiling = !1),
        (this.activeProfile = {
          newBytes: 0,
          newTensors: 0,
          peakBytes: 0,
          kernels: [],
          result: null,
          get kernelNames() {
            return Array.from(new Set(this.kernels.map((e) => e.name)));
          }
        });
    }
    dispose() {
      for (let e in this.registeredVariables) this.registeredVariables[e].dispose();
    }
  },
  la = class {
    constructor(e) {
      (this.ENV = e),
        (this.registry = {}),
        (this.registryFactory = {}),
        (this.pendingBackendInitId = 0),
        (this.state = new _i());
    }
    async ready() {
      if (this.pendingBackendInit != null) return this.pendingBackendInit.then(() => {});
      if (this.backendInstance != null) return;
      let e = this.getSortedBackends();
      for (let t = 0; t < e.length; t++) {
        let a = e[t];
        if (await this.initializeBackend(a).success) {
          await this.setBackend(a);
          return;
        }
      }
      throw new Error('Could not initialize any backends, all backend initializations failed.');
    }
    get backend() {
      if (this.pendingBackendInit != null)
        throw new Error(
          `Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`
        );
      if (this.backendInstance == null) {
        let { name: e, asyncInit: t } = this.initializeBackendsAndReturnBest();
        if (t)
          throw new Error(
            `The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`
          );
        this.setBackend(e);
      }
      return this.backendInstance;
    }
    backendNames() {
      return Object.keys(this.registryFactory);
    }
    findBackend(e) {
      if (!(e in this.registry))
        if (e in this.registryFactory) {
          let { asyncInit: t } = this.initializeBackend(e);
          if (t) return null;
        } else return null;
      return this.registry[e];
    }
    findBackendFactory(e) {
      return e in this.registryFactory ? this.registryFactory[e].factory : null;
    }
    registerBackend(e, t, a = 1) {
      return e in this.registryFactory
        ? (na(`${e} backend was already registered. Reusing existing backend factory.`), !1)
        : ((this.registryFactory[e] = { factory: t, priority: a }), !0);
    }
    async setBackend(e) {
      if (this.registryFactory[e] == null)
        throw new Error(`Backend name '${e}' not found in registry`);
      if (((this.backendName = e), this.registry[e] == null)) {
        this.backendInstance = null;
        let { success: t, asyncInit: a } = this.initializeBackend(e);
        if (!(a ? await t : t)) return !1;
      }
      return (
        (this.backendInstance = this.registry[e]),
        this.setupRegisteredKernels(),
        (this.profiler = new Zl(this.backendInstance)),
        !0
      );
    }
    setupRegisteredKernels() {
      ui(this.backendName).forEach((t) => {
        t.setupFunc != null && t.setupFunc(this.backendInstance);
      });
    }
    disposeRegisteredKernels(e) {
      ui(e).forEach((a) => {
        a.disposeFunc != null && a.disposeFunc(this.registry[e]);
      });
    }
    initializeBackend(e) {
      let t = this.registryFactory[e];
      if (t == null) throw new Error(`Cannot initialize backend ${e}, no registration found.`);
      try {
        let a = t.factory();
        if (a && !(a instanceof Cd) && typeof a.then == 'function') {
          let r = ++this.pendingBackendInitId,
            n = a
              .then((s) =>
                r < this.pendingBackendInitId
                  ? !1
                  : ((this.registry[e] = s), (this.pendingBackendInit = null), !0)
              )
              .catch(
                (s) => (
                  r < this.pendingBackendInitId ||
                    ((this.pendingBackendInit = null),
                    na(`Initialization of backend ${e} failed`),
                    na(s.stack || s.message)),
                  !1
                )
              );
          return (this.pendingBackendInit = n), { success: n, asyncInit: !0 };
        } else return (this.registry[e] = a), { success: !0, asyncInit: !1 };
      } catch (a) {
        return (
          na(`Initialization of backend ${e} failed`),
          na(a.stack || a.message),
          { success: !1, asyncInit: !1 }
        );
      }
    }
    removeBackend(e) {
      if (!(e in this.registryFactory)) throw new Error(`${e} backend not found in registry`);
      this.backendName === e && this.pendingBackendInit != null && this.pendingBackendInitId++,
        e in this.registry &&
          (this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e]),
        delete this.registryFactory[e],
        this.backendName === e &&
          ((this.pendingBackendInit = null),
          (this.backendName = null),
          (this.backendInstance = null));
    }
    getSortedBackends() {
      if (Object.keys(this.registryFactory).length === 0)
        throw new Error('No backend found in registry.');
      return Object.keys(this.registryFactory).sort(
        (e, t) => this.registryFactory[t].priority - this.registryFactory[e].priority
      );
    }
    initializeBackendsAndReturnBest() {
      let e = this.getSortedBackends();
      for (let t = 0; t < e.length; t++) {
        let a = e[t],
          { success: r, asyncInit: n } = this.initializeBackend(a);
        if (n || r) return { name: a, asyncInit: n };
      }
      throw new Error('Could not initialize any backends, all backend initializations failed.');
    }
    moveData(e, t) {
      let a = this.state.tensorInfo.get(t),
        r = a.backend,
        n = this.readSync(t),
        s = r.refCount(t);
      r.disposeData(t, !0),
        (a.backend = e),
        e.move(t, n, a.shape, a.dtype, s),
        this.shouldCheckForMemLeaks() &&
          this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
    }
    tidy(e, t) {
      let a = null;
      if (t == null) {
        if (typeof e != 'function') throw new Error('Please provide a function to tidy()');
        t = e;
      } else {
        if (typeof e != 'string' && !(e instanceof String))
          throw new Error(
            'When calling with two arguments, the first argument to tidy() must be a string'
          );
        if (typeof t != 'function')
          throw new Error(
            'When calling with two arguments, the 2nd argument to tidy() must be a function'
          );
        a = e;
      }
      let r;
      return this.scopedRun(
        () => this.startScope(a),
        () => this.endScope(r),
        () => (
          (r = t()),
          r instanceof Promise && console.error('Cannot return a Promise inside of tidy.'),
          r
        )
      );
    }
    scopedRun(e, t, a) {
      e();
      try {
        let r = a();
        return t(), r;
      } catch (r) {
        throw (t(), r);
      }
    }
    nextTensorId() {
      return la.nextTensorId++;
    }
    nextVariableId() {
      return la.nextVariableId++;
    }
    clone(e) {
      let t = $.runKernel(ni, { x: e }),
        a = { x: e },
        r = (s) => ({
          x: () => {
            let p = 'float32',
              i = { x: s },
              d = { dtype: p };
            return $.runKernel(ri, i, d);
          }
        }),
        n = [];
      return this.addTapeNode(this.state.activeScope.name, a, [t], r, n, {}), t;
    }
    runKernel(e, t, a) {
      if ((this.backendName == null && this.backend, !(on(e, this.backendName) != null)))
        throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);
      return this.runKernelFunc({ kernelName: e, inputs: t, attrs: a });
    }
    shouldCheckForMemLeaks() {
      return this.ENV.getBool('IS_TEST');
    }
    checkKernelForMemLeak(e, t, a) {
      let r = this.backend.numDataIds(),
        n = 0;
      a.forEach((i) => {
        n += i.dtype === 'complex64' ? 3 : 1;
      });
      let s = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1],
        p = r - t - n - s;
      if (p > 0)
        throw new Error(
          `Backend '${this.backendName}' has an internal memory leak (${p} data ids) after running '${e}'`
        );
    }
    runKernelFunc(e) {
      let t,
        a = [],
        r = this.isTapeOn(),
        n = this.state.numBytes,
        s = this.state.numTensors;
      this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
      let p;
      this.backendName == null && this.backend;
      let i,
        d = yn(e)
          ? e.kernelName
          : this.state.activeScope != null
          ? this.state.activeScope.name
          : '';
      if (yn(e)) {
        let { kernelName: g, inputs: y, attrs: N } = e;
        this.backendName == null && this.backend;
        let T = on(g, this.backendName);
        S(
          T != null,
          () => `Cannot find registered kernel '${g}' for backend '${this.backendName}'`
        ),
          (p = () => {
            let O = this.backend.numDataIds();
            i = T.kernelFunc({ inputs: y, attrs: N, backend: this.backend });
            let B = Array.isArray(i) ? i : [i];
            this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(g, O, B);
            let M = B.map((C) => (C.rank != null ? C : this.makeTensorFromTensorInfo(C)));
            if (r) {
              let C = this.getTensorsForGradient(g, y, M);
              a = this.saveTensorsForBackwardMode(C);
            }
            return M;
          });
      } else {
        let { forwardFunc: g } = e,
          y = (N) => {
            !r || (a = N.map((T) => this.keep(this.clone(T))));
          };
        p = () => {
          let N = this.backend.numDataIds();
          i = this.tidy(() => g(this.backend, y));
          let T = Array.isArray(i) ? i : [i];
          return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(d, N, T), T;
        };
      }
      let { inputs: l, attrs: m } = e,
        u = yn(e) ? null : e.backwardsFunc,
        f;
      return (
        this.scopedRun(
          () => this.state.kernelDepth++,
          () => this.state.kernelDepth--,
          () => {
            !this.ENV.getBool('DEBUG') && !this.state.profiling
              ? (t = p())
              : ((f = this.profiler.profileKernel(d, l, () => p())),
                this.ENV.getBool('DEBUG') && this.profiler.logKernelProfile(f),
                (t = f.outputs));
          }
        ),
        r && this.addTapeNode(d, l, t, u, a, m),
        this.state.profiling &&
          this.state.activeProfile.kernels.push({
            name: d,
            bytesAdded: this.state.numBytes - n,
            totalBytesSnapshot: this.state.numBytes,
            tensorsAdded: this.state.numTensors - s,
            totalTensorsSnapshot: this.state.numTensors,
            inputShapes: Object.keys(l).map((g) => (l[g] != null ? l[g].shape : null)),
            outputShapes: t.map((g) => g.shape),
            kernelTimeMs: f.timeMs,
            extraInfo: f.extraInfo
          }),
        Array.isArray(i) ? t : t[0]
      );
    }
    saveTensorsForBackwardMode(e) {
      return e.map((a) => this.keep(this.clone(a)));
    }
    getTensorsForGradient(e, t, a) {
      let r = mi(e);
      if (r != null) {
        let n = r.inputsToSave || [],
          s = r.outputsToSave || [],
          p;
        r.saveAllInputs
          ? (S(Array.isArray(t), () => 'saveAllInputs is true, expected inputs to be an array.'),
            (p = Object.keys(t).map((d) => t[d])))
          : (p = n.map((d) => t[d]));
        let i = a.filter((d, l) => s[l]);
        return p.concat(i);
      }
      return [];
    }
    makeTensor(e, t, a, r) {
      if (e == null) throw new Error('Values passed to engine.makeTensor() are null');
      (a = a || 'float32'), (r = r || this.backend);
      let n = e;
      a === 'string' && Ya(e[0]) && (n = e.map((i) => ln(i)));
      let s = r.write(n, t, a),
        p = new He(t, a, s, this.nextTensorId());
      if ((this.trackTensor(p, r), a === 'string')) {
        let i = this.state.tensorInfo.get(s),
          d = Xp(n);
        (this.state.numBytes += d - i.bytes), (i.bytes = d);
      }
      return p;
    }
    makeTensorFromDataId(e, t, a, r) {
      a = a || 'float32';
      let n = { dataId: e, shape: t, dtype: a };
      return this.makeTensorFromTensorInfo(n, r);
    }
    makeTensorFromTensorInfo(e, t) {
      let { dataId: a, shape: r, dtype: n } = e,
        s = new He(r, n, a, this.nextTensorId());
      return this.trackTensor(s, t), s;
    }
    makeVariable(e, t = !0, a, r) {
      (a = a || this.nextVariableId().toString()), r != null && r !== e.dtype && (e = e.cast(r));
      let n = new nr(e, t, a, this.nextTensorId());
      if (this.state.registeredVariables[n.name] != null)
        throw new Error(`Variable with name ${n.name} was already registered`);
      return (this.state.registeredVariables[n.name] = n), this.incRef(n, this.backend), n;
    }
    trackTensor(e, t) {
      this.state.numTensors++, e.dtype === 'string' && this.state.numStringTensors++;
      let a = 0;
      e.dtype !== 'complex64' && e.dtype !== 'string' && (a = e.size * en(e.dtype)),
        (this.state.numBytes += a),
        this.state.tensorInfo.has(e.dataId) ||
          (this.state.numDataBuffers++,
          this.state.tensorInfo.set(e.dataId, {
            backend: t || this.backend,
            dtype: e.dtype,
            shape: e.shape,
            bytes: a
          })),
        e instanceof nr || this.track(e);
    }
    incRef(e, t) {
      this.trackTensor(e, t), this.backend.incRef(e.dataId);
    }
    removeDataId(e, t) {
      this.state.tensorInfo.has(e) &&
        this.state.tensorInfo.get(e).backend === t &&
        (this.state.tensorInfo.delete(e), this.state.numDataBuffers--);
    }
    disposeTensor(e) {
      if (!this.state.tensorInfo.has(e.dataId)) return;
      let t = this.state.tensorInfo.get(e.dataId);
      if (
        (this.state.numTensors--,
        e.dtype === 'string' && (this.state.numStringTensors--, (this.state.numBytes -= t.bytes)),
        e.dtype !== 'complex64' && e.dtype !== 'string')
      ) {
        let a = e.size * en(e.dtype);
        this.state.numBytes -= a;
      }
      t.backend.disposeData(e.dataId) && this.removeDataId(e.dataId, t.backend);
    }
    disposeVariables() {
      for (let e in this.state.registeredVariables) {
        let t = this.state.registeredVariables[e];
        this.disposeVariable(t);
      }
    }
    disposeVariable(e) {
      this.disposeTensor(e),
        this.state.registeredVariables[e.name] != null &&
          delete this.state.registeredVariables[e.name];
    }
    memory() {
      let e = this.backend.memory();
      return (
        (e.numTensors = this.state.numTensors),
        (e.numDataBuffers = this.state.numDataBuffers),
        (e.numBytes = this.state.numBytes),
        this.state.numStringTensors > 0 &&
          ((e.unreliable = !0),
          e.reasons == null && (e.reasons = []),
          e.reasons.push('Memory usage by string tensors is approximate (2 bytes per character)')),
        e
      );
    }
    async profile(e) {
      this.state.profiling = !0;
      let t = this.state.numBytes,
        a = this.state.numTensors;
      (this.state.activeProfile.kernels = []),
        (this.state.activeProfile.result = await e()),
        (this.state.profiling = !1),
        (this.state.activeProfile.peakBytes = Math.max(
          ...this.state.activeProfile.kernels.map((r) => r.totalBytesSnapshot)
        )),
        (this.state.activeProfile.newBytes = this.state.numBytes - t),
        (this.state.activeProfile.newTensors = this.state.numTensors - a);
      for (let r of this.state.activeProfile.kernels)
        (r.kernelTimeMs = await r.kernelTimeMs), (r.extraInfo = await r.extraInfo);
      return this.state.activeProfile;
    }
    isTapeOn() {
      return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
    }
    addTapeNode(e, t, a, r, n, s) {
      let p = { id: this.state.nextTapeNodeId++, kernelName: e, inputs: t, outputs: a, saved: n },
        i = mi(e);
      i != null && (r = i.gradFunc),
        r != null &&
          (p.gradient = (d) => (
            (d = d.map((l, m) => {
              if (l == null) {
                let u = a[m],
                  f = er(u.size, u.dtype);
                return this.makeTensor(f, u.shape, u.dtype);
              }
              return l;
            })),
            r(d.length > 1 ? d : d[0], n, s)
          )),
        this.state.activeTape.push(p);
    }
    keep(e) {
      return (e.kept = !0), e;
    }
    startTape() {
      this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
    }
    endTape() {
      this.state.gradientDepth--;
    }
    startScope(e) {
      let t = { track: [], name: 'unnamed scope', id: this.state.nextScopeId++ };
      e && (t.name = e), this.state.scopeStack.push(t), (this.state.activeScope = t);
    }
    endScope(e) {
      let t = bi(e),
        a = new Set(t.map((n) => n.id));
      for (let n = 0; n < this.state.activeScope.track.length; n++) {
        let s = this.state.activeScope.track[n];
        !s.kept && !a.has(s.id) && s.dispose();
      }
      let r = this.state.scopeStack.pop();
      (this.state.activeScope =
        this.state.scopeStack.length === 0
          ? null
          : this.state.scopeStack[this.state.scopeStack.length - 1]),
        t.forEach((n) => {
          !n.kept && n.scopeId === r.id && this.track(n);
        });
    }
    gradients(e, t, a, r = !1) {
      if (
        (S(t.length > 0, () => 'gradients() received an empty list of xs.'),
        a != null && a.dtype !== 'float32')
      )
        throw new Error(`dy must have 'float32' dtype, but has '${a.dtype}'`);
      let n = this.scopedRun(
        () => this.startTape(),
        () => this.endTape(),
        () => this.tidy('forward', e)
      );
      S(n instanceof He, () => 'The result y returned by f() must be a tensor.');
      let s = t6(this.state.activeTape, t, n);
      if (!r && s.length === 0 && t.length > 0)
        throw new Error(
          'Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.'
        );
      return this.tidy('backward', () => {
        let p = {};
        (p[n.id] = a ?? h6(n.shape)), a6(p, s, (d) => this.tidy(d), f6);
        let i = t.map((d) => p[d.id]);
        return (
          this.state.gradientDepth === 0 &&
            (this.state.activeTape.forEach((d) => {
              for (let l of d.saved) l.dispose();
            }),
            (this.state.activeTape = null)),
          { value: n, grads: i }
        );
      });
    }
    customGrad(e) {
      return (
        S(Za(e), () => 'The f passed in customGrad(f) must be a function.'),
        (...t) => {
          S(
            t.every((p) => p instanceof He),
            () => 'The args passed in customGrad(f)(x1, x2,...) must all be tensors'
          );
          let a,
            r = {};
          t.forEach((p, i) => {
            r[i] = p;
          });
          let n = (p, i) => (
              (a = e(...t, i)),
              S(
                a.value instanceof He,
                () =>
                  'The function f passed in customGrad(f) must return an object where `obj.value` is a tensor'
              ),
              S(
                Za(a.gradFunc),
                () =>
                  'The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.'
              ),
              a.value
            ),
            s = (p, i) => {
              let d = a.gradFunc(p, i),
                l = Array.isArray(d) ? d : [d];
              S(
                l.length === t.length,
                () =>
                  'The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).'
              ),
                S(
                  l.every((u) => u instanceof He),
                  () =>
                    'The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.'
                );
              let m = {};
              return (
                l.forEach((u, f) => {
                  m[f] = () => u;
                }),
                m
              );
            };
          return this.runKernelFunc({ forwardFunc: n, backwardsFunc: s, inputs: r });
        }
      );
    }
    readSync(e) {
      return this.state.tensorInfo.get(e).backend.readSync(e);
    }
    read(e) {
      return this.state.tensorInfo.get(e).backend.read(e);
    }
    readToGPU(e, t) {
      return this.state.tensorInfo.get(e).backend.readToGPU(e, t);
    }
    async time(e) {
      let t = pa(),
        a = await this.backend.time(e);
      return (a.wallMs = pa() - t), a;
    }
    track(e) {
      return (
        this.state.activeScope != null &&
          ((e.scopeId = this.state.activeScope.id), this.state.activeScope.track.push(e)),
        e
      );
    }
    get registeredVariables() {
      return this.state.registeredVariables;
    }
    reset() {
      this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), (this.state = new _i());
      for (let e in this.registry)
        this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e];
      (this.backendName = null), (this.backendInstance = null), (this.pendingBackendInit = null);
    }
  };
la.nextTensorId = 0;
la.nextVariableId = 0;
function h6(e) {
  let t = tn(Xe(e), 'float32');
  return $.makeTensor(t, e, 'float32');
}
function Si() {
  let e = ti();
  if (e._tfengine == null) {
    let t = new Qd(e);
    e._tfengine = new la(t);
  }
  return r4(e._tfengine.ENV), p6(() => e._tfengine), e._tfengine;
}
var $ = Si();
function f6(e, t) {
  let a = { a: e, b: t };
  return $.runKernel(ai, a);
}
function v6() {
  return (
    (typeof window != 'undefined' && window.document != null) ||
    typeof WorkerGlobalScope != 'undefined'
  );
}
var ct = fe();
ct.registerFlag(
  'DEBUG',
  () => !1,
  (e) => {
    e &&
      console.warn(
        'Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.'
      );
  }
);
ct.registerFlag('IS_BROWSER', () => v6());
ct.registerFlag(
  'IS_NODE',
  () =>
    typeof process != 'undefined' &&
    typeof process.versions != 'undefined' &&
    typeof process.versions.node != 'undefined'
);
ct.registerFlag(
  'IS_CHROME',
  () =>
    typeof navigator != 'undefined' &&
    navigator != null &&
    navigator.userAgent != null &&
    /Chrome/.test(navigator.userAgent) &&
    /Google Inc/.test(navigator.vendor)
);
ct.registerFlag('PROD', () => !1);
ct.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ct.getBool('DEBUG'));
ct.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => !0);
ct.registerFlag('IS_TEST', () => !1);
ct.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => !0);
ct.registerFlag('WRAP_TO_IMAGEBITMAP', () => !1);
ct.registerFlag('ENGINE_COMPILE_ONLY', () => !1);
function ma(e, t) {
  let a = e;
  if (St(e)) return t === 'string' ? [] : [e.length];
  if (!Array.isArray(e)) return [];
  let r = [];
  for (; Array.isArray(a) || (St(a) && t !== 'string'); ) r.push(a.length), (a = a[0]);
  return Array.isArray(e) && fe().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY') && Ti(e, r, []), r;
}
function Ti(e, t, a) {
  if (((a = a || []), !Array.isArray(e) && !St(e))) {
    S(
      t.length === 0,
      () =>
        `Element arr[${a.join('][')}] is a primitive, but should be an array/TypedArray of ${
          t[0]
        } elements`
    );
    return;
  }
  S(
    t.length > 0,
    () =>
      `Element arr[${a.join('][')}] should be a primitive, but is an array of ${e.length} elements`
  ),
    S(
      e.length === t[0],
      () =>
        `Element arr[${a.join('][')}] should have ${t[0]} elements, but has ${e.length} elements`
    );
  let r = t.slice(1);
  for (let n = 0; n < e.length; ++n) Ti(e[n], r, a.concat(n));
}
function Ei(e, t, a, r) {
  if (e !== 'string_or_numeric') {
    if (e == null) throw new Error('Expected dtype cannot be null.');
    if ((e !== 'numeric' && e !== t) || (e === 'numeric' && t === 'string'))
      throw new Error(`Argument '${a}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`);
  }
}
function b(e, t, a, r = 'numeric') {
  if (e instanceof He) return Ei(r, e.dtype, t, a), e;
  let n = Ja(e);
  if (
    (n !== 'string' && ['bool', 'int32', 'float32'].indexOf(r) >= 0 && (n = r),
    Ei(r, n, t, a),
    e == null ||
      (!St(e) &&
        !Array.isArray(e) &&
        typeof e != 'number' &&
        typeof e != 'boolean' &&
        typeof e != 'string'))
  ) {
    let d = e == null ? 'null' : e.constructor.name;
    throw new Error(
      `Argument '${t}' passed to '${a}' must be a Tensor or TensorLike, but got '${d}'`
    );
  }
  let s = ma(e, n);
  !St(e) && !Array.isArray(e) && (e = [e]);
  let i = n !== 'string' ? ar(e, n) : ta(e, [], !0);
  return $.makeTensor(i, s, n);
}
function sr(e, t, a, r = 'numeric') {
  if (!Array.isArray(e))
    throw new Error(`Argument ${t} passed to ${a} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return e.map((s, p) => b(s, `${t}[${p}]`, a, r));
}
var g6 = '__op';
function x(e) {
  let t = Object.keys(e);
  if (t.length !== 1)
    throw new Error(
      `Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`
    );
  let a = t[0],
    r = e[a];
  a.endsWith('_') && (a = a.substring(0, a.length - 1)), (a = a + g6);
  let n = (...s) => {
    $.startScope(a);
    try {
      let p = r(...s);
      return rn(p) && console.error('Cannot return a Promise inside of tidy.'), $.endScope(p), p;
    } catch (p) {
      throw ($.endScope(null), p);
    }
  };
  return Object.defineProperty(n, 'name', { value: a, configurable: !0 }), n;
}
function y6(e, t) {
  let a = b(e, 'real', 'complex'),
    r = b(t, 'imag', 'complex');
  _t(
    a.shape,
    r.shape,
    `real and imag shapes, ${a.shape} and ${r.shape}, must match in call to tf.complex().`
  );
  let n = { real: a, imag: r };
  return $.runKernel(D4, n);
}
var Qt = x({ complex_: y6 });
function ua(e, t, a, r) {
  if ((r == null && (r = Ja(e)), r === 'complex64'))
    throw new Error(
      'Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).'
    );
  if (
    !St(e) &&
    !Array.isArray(e) &&
    typeof e != 'number' &&
    typeof e != 'boolean' &&
    typeof e != 'string'
  )
    throw new Error(
      'values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray'
    );
  if (t != null) {
    an(t);
    let n = Xe(t),
      s = Xe(a);
    S(
      n === s,
      () => `Based on the provided shape, [${t}], the tensor should have ${n} values but has ${s}`
    );
    for (let p = 0; p < a.length; ++p) {
      let i = a[p],
        d = p === a.length - 1 ? i !== Xe(t.slice(p)) : !0;
      S(
        a[p] === t[p] || !d,
        () =>
          `Error creating a new Tensor. Inferred shape (${a}) does not match the provided shape (${t}). `
      );
    }
  }
  return (
    !St(e) && !Array.isArray(e) && (e = [e]),
    (t = t || a),
    (e = r !== 'string' ? ar(e, r) : ta(e, [], !0)),
    $.makeTensor(e, t, r)
  );
}
function e1(e, t, a) {
  let r = ma(e, a);
  return ua(e, t, r, a);
}
var wn = { float32: 4, float16: 2, int32: 4, uint16: 2, uint8: 1, bool: 1, complex64: 8 },
  pr = 4;
async function w6(e, t) {
  let a = [],
    r = [],
    n = Array.isArray(e) ? e.map((p) => p.name) : Object.keys(e);
  for (let p = 0; p < n.length; ++p) {
    let i = n[p],
      d = Array.isArray(e) ? e[p].tensor : e[i];
    if (
      d.dtype !== 'float32' &&
      d.dtype !== 'int32' &&
      d.dtype !== 'bool' &&
      d.dtype !== 'string' &&
      d.dtype !== 'complex64'
    )
      throw new Error(`Unsupported dtype in weight '${i}': ${d.dtype}`);
    let l = { name: i, shape: d.shape, dtype: d.dtype };
    if (d.dtype === 'string') {
      let m = new Promise(async (u) => {
        let f = await d.bytes(),
          g = f.reduce((T, O) => T + O.length, 0) + pr * f.length,
          y = new Uint8Array(g),
          N = 0;
        for (let T = 0; T < f.length; T++) {
          let O = f[T],
            B = new Uint8Array(new Uint32Array([O.length]).buffer);
          y.set(B, N), (N += pr), y.set(O, N), (N += O.length);
        }
        u(y);
      });
      r.push(m);
    } else r.push(d.data());
    t != null && (l.group = t), a.push(l);
  }
  let s = await Promise.all(r);
  return { data: b6(s), specs: a };
}
function Di(e, t) {
  let a = {},
    r,
    n = 0;
  for (let s of t) {
    let p = s.name,
      i = s.dtype,
      d = s.shape,
      l = Xe(d),
      m;
    if ('quantization' in s) {
      let u = s.quantization;
      if (u.dtype === 'uint8' || u.dtype === 'uint16') {
        if (!('min' in u && 'scale' in u))
          throw new Error(
            `Weight ${s.name} with quantization ${u.dtype} doesn't have corresponding metadata min and scale.`
          );
      } else if (u.dtype === 'float16') {
        if (i !== 'float32')
          throw new Error(
            `Weight ${s.name} is quantized with ${u.dtype} which only supports weights of type float32 not ${i}.`
          );
      } else
        throw new Error(
          `Weight ${s.name} has unknown quantization dtype ${u.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`
        );
      let f = wn[u.dtype],
        g = e.slice(n, n + l * f),
        y = u.dtype === 'uint8' ? new Uint8Array(g) : new Uint16Array(g);
      if (i === 'float32')
        if (u.dtype === 'uint8' || u.dtype === 'uint16') {
          m = new Float32Array(y.length);
          for (let N = 0; N < y.length; N++) {
            let T = y[N];
            m[N] = T * u.scale + u.min;
          }
        } else if (u.dtype === 'float16') r === void 0 && (r = D6()), (m = r(y));
        else throw new Error(`Unsupported quantization type ${u.dtype} for weight type float32.`);
      else if (i === 'int32') {
        if (u.dtype !== 'uint8' && u.dtype !== 'uint16')
          throw new Error(`Unsupported quantization type ${u.dtype} for weight type int32.`);
        m = new Int32Array(y.length);
        for (let N = 0; N < y.length; N++) {
          let T = y[N];
          m[N] = Math.round(T * u.scale + u.min);
        }
      } else throw new Error(`Unsupported dtype in weight '${p}': ${i}`);
      n += l * f;
    } else if (i === 'string') {
      let u = Xe(s.shape);
      m = [];
      for (let f = 0; f < u; f++) {
        let g = new Uint32Array(e.slice(n, n + pr))[0];
        n += pr;
        let y = new Uint8Array(e.slice(n, n + g));
        m.push(y), (n += g);
      }
    } else {
      let u = wn[i],
        f = e.slice(n, n + l * u);
      if (i === 'float32') m = new Float32Array(f);
      else if (i === 'int32') m = new Int32Array(f);
      else if (i === 'bool') m = new Uint8Array(f);
      else if (i === 'complex64') {
        m = new Float32Array(f);
        let g = new Float32Array(m.length / 2),
          y = new Float32Array(m.length / 2);
        for (let O = 0; O < g.length; O++) (g[O] = m[O * 2]), (y[O] = m[O * 2 + 1]);
        let N = e1(g, d, 'float32'),
          T = e1(y, d, 'float32');
        (a[p] = Qt(N, T)), N.dispose(), T.dispose();
      } else throw new Error(`Unsupported dtype in weight '${p}': ${i}`);
      n += l * u;
    }
    i !== 'complex64' && (a[p] = e1(m, d, i));
  }
  return a;
}
function b6(e) {
  if (e === null) throw new Error(`Invalid input value: ${JSON.stringify(e)}`);
  let t = 0,
    a = [];
  e.forEach((s) => {
    if (
      ((t += s.byteLength),
      a.push(s.byteLength === s.buffer.byteLength ? s : new s.constructor(s)),
      !(s instanceof Float32Array || s instanceof Int32Array || s instanceof Uint8Array))
    )
      throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`);
  });
  let r = new Uint8Array(t),
    n = 0;
  return (
    a.forEach((s) => {
      r.set(new Uint8Array(s.buffer), n), (n += s.byteLength);
    }),
    r.buffer
  );
}
var bn =
  typeof Buffer != 'undefined' &&
  (typeof Blob == 'undefined' || typeof atob == 'undefined' || typeof btoa == 'undefined');
function xi(e) {
  return bn ? Buffer.byteLength(e) : new Blob([e]).size;
}
function N6(e) {
  if (bn) return Buffer.from(e).toString('base64');
  let t = new Uint8Array(e),
    a = '';
  for (let r = 0, n = t.length; r < n; r++) a += String.fromCharCode(t[r]);
  return btoa(a);
}
function _6(e) {
  if (bn) {
    let r = Buffer.from(e, 'base64');
    return r.buffer.slice(r.byteOffset, r.byteOffset + r.byteLength);
  }
  let t = atob(e),
    a = new Uint8Array(t.length);
  for (let r = 0; r < t.length; ++r) a.set([t.charCodeAt(r)], r);
  return a.buffer;
}
function Nn(e) {
  if (e.length === 1) return e[0];
  let t = 0;
  e.forEach((n) => {
    t += n.byteLength;
  });
  let a = new Uint8Array(t),
    r = 0;
  return (
    e.forEach((n) => {
      a.set(new Uint8Array(n), r), (r += n.byteLength);
    }),
    a.buffer
  );
}
function Ai(e) {
  let t = '/';
  for (e = e.trim(); e.endsWith(t); ) e = e.slice(0, e.length - 1);
  let a = e.split(t);
  return a[a.length - 1];
}
function ki(e, t) {
  let a = {
    modelTopology: e.modelTopology,
    format: e.format,
    generatedBy: e.generatedBy,
    convertedBy: e.convertedBy,
    weightsManifest: t
  };
  return (
    e.signature != null && (a.signature = e.signature),
    e.userDefinedMetadata != null && (a.userDefinedMetadata = e.userDefinedMetadata),
    e.modelInitializer != null && (a.modelInitializer = e.modelInitializer),
    e.trainingConfig != null && (a.trainingConfig = e.trainingConfig),
    a
  );
}
async function _n(e, t) {
  let a = {
    modelTopology: e.modelTopology,
    format: e.format,
    generatedBy: e.generatedBy,
    convertedBy: e.convertedBy
  };
  if (
    (e.trainingConfig != null && (a.trainingConfig = e.trainingConfig), e.weightsManifest != null)
  ) {
    let [r, n] = await t(e.weightsManifest);
    (a.weightSpecs = r), (a.weightData = n);
  }
  return (
    e.signature != null && (a.signature = e.signature),
    e.userDefinedMetadata != null && (a.userDefinedMetadata = e.userDefinedMetadata),
    e.modelInitializer != null && (a.modelInitializer = e.modelInitializer),
    a
  );
}
function ca(e) {
  if (e.modelTopology instanceof ArrayBuffer)
    throw new Error('Expected JSON model topology, received ArrayBuffer.');
  return {
    dateSaved: new Date(),
    modelTopologyType: 'JSON',
    modelTopologyBytes: e.modelTopology == null ? 0 : xi(JSON.stringify(e.modelTopology)),
    weightSpecsBytes: e.weightSpecs == null ? 0 : xi(JSON.stringify(e.weightSpecs)),
    weightDataBytes: e.weightData == null ? 0 : e.weightData.byteLength
  };
}
function S6() {
  let e = (a) => {
      let r = a << 13,
        n = 0;
      for (; (r & 8388608) == 0; ) (n -= 8388608), (r <<= 1);
      return (r &= ~8388608), (n += 947912704), r | n;
    },
    t = new Uint32Array(2048);
  t[0] = 0;
  for (let a = 1; a < 1024; a++) t[a] = e(a);
  for (let a = 1024; a < 2048; a++) t[a] = 939524096 + ((a - 1024) << 13);
  return t;
}
function T6() {
  let e = new Uint32Array(64);
  (e[0] = 0), (e[31] = 1199570944), (e[32] = 2147483648), (e[63] = 3347054592);
  for (let t = 1; t < 31; t++) e[t] = t << 23;
  for (let t = 33; t < 63; t++) e[t] = 2147483648 + ((t - 32) << 23);
  return e;
}
function E6() {
  let e = new Uint32Array(64);
  for (let t = 0; t < 64; t++) e[t] = 1024;
  return (e[0] = e[32] = 0), e;
}
function D6() {
  let e = S6(),
    t = T6(),
    a = E6();
  return (r) => {
    let n = new ArrayBuffer(4 * r.length),
      s = new Uint32Array(n);
    for (let p = 0; p < r.length; p++) {
      let i = r[p],
        d = e[a[i >> 10] + (i & 1023)] + t[i >> 10];
      s[p] = d;
    }
    return new Float32Array(n);
  };
}
var Ie = class {
    constructor() {
      (this.saveRouters = []), (this.loadRouters = []);
    }
    static getInstance() {
      return Ie.instance == null && (Ie.instance = new Ie()), Ie.instance;
    }
    static registerSaveRouter(e) {
      Ie.getInstance().saveRouters.push(e);
    }
    static registerLoadRouter(e) {
      Ie.getInstance().loadRouters.push(e);
    }
    static getSaveHandlers(e) {
      return Ie.getHandlers(e, 'save');
    }
    static getLoadHandlers(e, t) {
      return Ie.getHandlers(e, 'load', t);
    }
    static getHandlers(e, t, a) {
      let r = [];
      return (
        (t === 'load' ? Ie.getInstance().loadRouters : Ie.getInstance().saveRouters).forEach(
          (s) => {
            let p = s(e, a);
            p !== null && r.push(p);
          }
        ),
        r
      );
    }
  },
  x6 = (e) => Ie.registerSaveRouter(e),
  A6 = (e) => Ie.registerLoadRouter(e),
  k6 = (e) => Ie.getSaveHandlers(e),
  $6 = (e, t) => Ie.getLoadHandlers(e, t),
  Sn = 'tensorflowjs',
  Tn = 1,
  h1 = 'models_store',
  t1 = 'model_info_store';
function $i() {
  if (!fe().getBool('IS_BROWSER'))
    throw new Error(
      'Failed to obtain IndexedDB factory because the current environmentis not a web browser.'
    );
  let e = typeof window == 'undefined' ? self : window,
    t = e.indexedDB || e.mozIndexedDB || e.webkitIndexedDB || e.msIndexedDB || e.shimIndexedDB;
  if (t == null) throw new Error('The current browser does not appear to support IndexedDB.');
  return t;
}
function En(e) {
  let t = e.result;
  t.createObjectStore(h1, { keyPath: 'modelPath' }),
    t.createObjectStore(t1, { keyPath: 'modelPath' });
}
var f1 = class {
  constructor(e) {
    if (((this.indexedDB = $i()), e == null || !e))
      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');
    this.modelPath = e;
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error(
        'BrowserLocalStorage.save() does not support saving model topology in binary formats yet.'
      );
    return this.databaseAction(this.modelPath, e);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(e, t) {
    return new Promise((a, r) => {
      let n = this.indexedDB.open(Sn, Tn);
      (n.onupgradeneeded = () => En(n)),
        (n.onsuccess = () => {
          let s = n.result;
          if (t == null) {
            let p = s.transaction(h1, 'readonly'),
              d = p.objectStore(h1).get(this.modelPath);
            (d.onsuccess = () => {
              if (d.result == null)
                return (
                  s.close(),
                  r(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`))
                );
              a(d.result.modelArtifacts);
            }),
              (d.onerror = (l) => (s.close(), r(d.error))),
              (p.oncomplete = () => s.close());
          } else {
            let p = ca(t),
              i = s.transaction(t1, 'readwrite'),
              d = i.objectStore(t1),
              l = d.put({ modelPath: this.modelPath, modelArtifactsInfo: p }),
              m;
            (l.onsuccess = () => {
              m = s.transaction(h1, 'readwrite');
              let f = m
                .objectStore(h1)
                .put({ modelPath: this.modelPath, modelArtifacts: t, modelArtifactsInfo: p });
              (f.onsuccess = () => a({ modelArtifactsInfo: p })),
                (f.onerror = (g) => {
                  d = i.objectStore(t1);
                  let y = d.delete(this.modelPath);
                  (y.onsuccess = () => (s.close(), r(f.error))),
                    (y.onerror = (N) => (s.close(), r(f.error)));
                });
            }),
              (l.onerror = (u) => (s.close(), r(l.error))),
              (i.oncomplete = () => {
                m == null ? s.close() : (m.oncomplete = () => s.close());
              });
          }
        }),
        (n.onerror = (s) => r(n.error));
    });
  }
};
f1.URL_SCHEME = 'indexeddb://';
var Ii = (e) =>
  fe().getBool('IS_BROWSER') && !Array.isArray(e) && e.startsWith(f1.URL_SCHEME)
    ? I6(e.slice(f1.URL_SCHEME.length))
    : null;
Ie.registerSaveRouter(Ii);
Ie.registerLoadRouter(Ii);
function I6(e) {
  return new f1(e);
}
function O6(e) {
  return e.startsWith(f1.URL_SCHEME) ? e.slice(f1.URL_SCHEME.length) : e;
}
var V6 = class {
    constructor() {
      this.indexedDB = $i();
    }
    async listModels() {
      return new Promise((e, t) => {
        let a = this.indexedDB.open(Sn, Tn);
        (a.onupgradeneeded = () => En(a)),
          (a.onsuccess = () => {
            let r = a.result,
              n = r.transaction(t1, 'readonly'),
              p = n.objectStore(t1).getAll();
            (p.onsuccess = () => {
              let i = {};
              for (let d of p.result) i[d.modelPath] = d.modelArtifactsInfo;
              e(i);
            }),
              (p.onerror = (i) => (r.close(), t(p.error))),
              (n.oncomplete = () => r.close());
          }),
          (a.onerror = (r) => t(a.error));
      });
    }
    async removeModel(e) {
      return (
        (e = O6(e)),
        new Promise((t, a) => {
          let r = this.indexedDB.open(Sn, Tn);
          (r.onupgradeneeded = () => En(r)),
            (r.onsuccess = () => {
              let n = r.result,
                s = n.transaction(t1, 'readwrite'),
                p = s.objectStore(t1),
                i = p.get(e),
                d;
              (i.onsuccess = () => {
                if (i.result == null)
                  return (
                    n.close(), a(new Error(`Cannot find model with path '${e}' in IndexedDB.`))
                  );
                {
                  let l = p.delete(e),
                    m = () => {
                      d = n.transaction(h1, 'readwrite');
                      let f = d.objectStore(h1).delete(e);
                      (f.onsuccess = () => t(i.result.modelArtifactsInfo)),
                        (f.onerror = (g) => a(i.error));
                    };
                  (l.onsuccess = m), (l.onerror = (u) => (m(), n.close(), a(i.error)));
                }
              }),
                (i.onerror = (l) => (n.close(), a(i.error))),
                (s.oncomplete = () => {
                  d == null ? n.close() : (d.oncomplete = () => n.close());
                });
            }),
            (r.onerror = (n) => a(r.error));
        })
      );
    }
  },
  Pt = '/',
  V1 = 'tensorflowjs_models',
  Oi = 'info',
  C6 = 'model_topology',
  F6 = 'weight_specs',
  B6 = 'weight_data',
  P6 = 'model_metadata';
function Vi(e) {
  return {
    info: [V1, e, Oi].join(Pt),
    topology: [V1, e, C6].join(Pt),
    weightSpecs: [V1, e, F6].join(Pt),
    weightData: [V1, e, B6].join(Pt),
    modelMetadata: [V1, e, P6].join(Pt)
  };
}
function Ci(e) {
  for (let t of Object.values(e)) window.localStorage.removeItem(t);
}
function R6(e) {
  let t = e.split(Pt);
  if (t.length < 3) throw new Error(`Invalid key format: ${e}`);
  return t.slice(1, t.length - 1).join(Pt);
}
function L6(e) {
  return e.startsWith(v1.URL_SCHEME) ? e.slice(v1.URL_SCHEME.length) : e;
}
var v1 = class {
  constructor(e) {
    if (
      !fe().getBool('IS_BROWSER') ||
      typeof window == 'undefined' ||
      typeof window.localStorage == 'undefined'
    )
      throw new Error('The current environment does not support local storage.');
    if (((this.LS = window.localStorage), e == null || !e))
      throw new Error('For local storage, modelPath must not be null, undefined or empty.');
    (this.modelPath = e), (this.keys = Vi(this.modelPath));
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error(
        'BrowserLocalStorage.save() does not support saving model topology in binary formats yet.'
      );
    {
      let t = JSON.stringify(e.modelTopology),
        a = JSON.stringify(e.weightSpecs),
        r = ca(e);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(r)),
          this.LS.setItem(this.keys.topology, t),
          this.LS.setItem(this.keys.weightSpecs, a),
          this.LS.setItem(this.keys.weightData, N6(e.weightData));
        let n = {
          format: e.format,
          generatedBy: e.generatedBy,
          convertedBy: e.convertedBy,
          signature: e.signature != null ? e.signature : void 0,
          userDefinedMetadata: e.userDefinedMetadata != null ? e.userDefinedMetadata : void 0,
          modelInitializer: e.modelInitializer != null ? e.modelInitializer : void 0,
          trainingConfig: e.trainingConfig != null ? e.trainingConfig : void 0
        };
        return (
          this.LS.setItem(this.keys.modelMetadata, JSON.stringify(n)), { modelArtifactsInfo: r }
        );
      } catch {
        throw (
          (Ci(this.keys),
          new Error(
            `Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`
          ))
        );
      }
    }
  }
  async load() {
    let e = JSON.parse(this.LS.getItem(this.keys.info));
    if (e == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (e.modelTopologyType !== 'JSON')
      throw new Error('BrowserLocalStorage does not support loading non-JSON model topology yet.');
    let t = {},
      a = JSON.parse(this.LS.getItem(this.keys.topology));
    if (a == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    t.modelTopology = a;
    let r = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (r == null)
      throw new Error(
        `In local storage, the weight specs of model '${this.modelPath}' are missing.`
      );
    t.weightSpecs = r;
    let n = this.LS.getItem(this.keys.modelMetadata);
    if (n != null) {
      let p = JSON.parse(n);
      (t.format = p.format),
        (t.generatedBy = p.generatedBy),
        (t.convertedBy = p.convertedBy),
        p.signature != null && (t.signature = p.signature),
        p.userDefinedMetadata != null && (t.userDefinedMetadata = p.userDefinedMetadata),
        p.modelInitializer != null && (t.modelInitializer = p.modelInitializer),
        p.trainingConfig != null && (t.trainingConfig = p.trainingConfig);
    }
    let s = this.LS.getItem(this.keys.weightData);
    if (s == null)
      throw new Error(
        `In local storage, the binary weight values of model '${this.modelPath}' are missing.`
      );
    return (t.weightData = _6(s)), t;
  }
};
v1.URL_SCHEME = 'localstorage://';
var Fi = (e) =>
  fe().getBool('IS_BROWSER') && !Array.isArray(e) && e.startsWith(v1.URL_SCHEME)
    ? U6(e.slice(v1.URL_SCHEME.length))
    : null;
Ie.registerSaveRouter(Fi);
Ie.registerLoadRouter(Fi);
function U6(e) {
  return new v1(e);
}
var z6 = class {
    constructor() {
      S(fe().getBool('IS_BROWSER'), () => 'Current environment is not a web browser'),
        S(
          typeof window == 'undefined' || typeof window.localStorage != 'undefined',
          () => 'Current browser does not appear to support localStorage'
        ),
        (this.LS = window.localStorage);
    }
    async listModels() {
      let e = {},
        t = V1 + Pt,
        a = Pt + Oi;
      for (let r = 0; r < this.LS.length; ++r) {
        let n = this.LS.key(r);
        if (n.startsWith(t) && n.endsWith(a)) {
          let s = R6(n);
          e[s] = JSON.parse(this.LS.getItem(n));
        }
      }
      return e;
    }
    async removeModel(e) {
      e = L6(e);
      let t = Vi(e);
      if (this.LS.getItem(t.info) == null) throw new Error(`Cannot find model at path '${e}'`);
      let a = JSON.parse(this.LS.getItem(t.info));
      return Ci(t), a;
    }
  },
  C1 = '://',
  pt = class {
    constructor() {
      this.managers = {};
    }
    static getInstance() {
      return pt.instance == null && (pt.instance = new pt()), pt.instance;
    }
    static registerManager(e, t) {
      S(e != null, () => 'scheme must not be undefined or null.'),
        e.endsWith(C1) && (e = e.slice(0, e.indexOf(C1))),
        S(e.length > 0, () => 'scheme must not be an empty string.');
      let a = pt.getInstance();
      S(
        a.managers[e] == null,
        () => `A model store manager is already registered for scheme '${e}'.`
      ),
        (a.managers[e] = t);
    }
    static getManager(e) {
      let t = this.getInstance().managers[e];
      if (t == null) throw new Error(`Cannot find model manager for scheme '${e}'`);
      return t;
    }
    static getSchemes() {
      return Object.keys(this.getInstance().managers);
    }
  };
function ir(e) {
  if (e.indexOf(C1) === -1)
    throw new Error(
      `The url string provided does not contain a scheme. Supported schemes are: ${pt
        .getSchemes()
        .join(',')}`
    );
  return { scheme: e.split(C1)[0], path: e.split(C1)[1] };
}
async function Bi(e, t, a = !1) {
  S(e !== t, () => `Old path and new path are the same: '${e}'`);
  let r = Ie.getLoadHandlers(e);
  S(r.length > 0, () => `Copying failed because no load handler is found for source URL ${e}.`),
    S(
      r.length < 2,
      () => `Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`
    );
  let n = r[0],
    s = Ie.getSaveHandlers(t);
  S(
    s.length > 0,
    () => `Copying failed because no save handler is found for destination URL ${t}.`
  ),
    S(
      s.length < 2,
      () =>
        `Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`
    );
  let p = s[0],
    i = ir(e).scheme,
    d = ir(e).path,
    l = i === ir(e).scheme,
    m = await n.load();
  a && l && (await pt.getManager(i).removeModel(d));
  let u = await p.save(m);
  return a && !l && (await pt.getManager(i).removeModel(d)), u.modelArtifactsInfo;
}
async function j6() {
  let e = pt.getSchemes(),
    t = {};
  for (let a of e) {
    let r = await pt.getManager(a).listModels();
    for (let n in r) {
      let s = a + C1 + n;
      t[s] = r[n];
    }
  }
  return t;
}
async function M6(e) {
  let t = ir(e);
  return pt.getManager(t.scheme).removeModel(t.path);
}
async function q6(e, t) {
  return Bi(e, t, !1);
}
async function H6(e, t) {
  return Bi(e, t, !0);
}
var W6 = class {
  fetch(e, t) {
    return fetch(e, t);
  }
  now() {
    return performance.now();
  }
  encode(e, t) {
    if (t !== 'utf-8' && t !== 'utf8')
      throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);
    return (
      this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(e)
    );
  }
  decode(e, t) {
    return new TextDecoder(t).decode(e);
  }
};
if (fe().get('IS_BROWSER')) {
  fe().setPlatform('browser', new W6());
  try {
    pt.registerManager(v1.URL_SCHEME, new z6());
  } catch {}
  try {
    pt.registerManager(f1.URL_SCHEME, new V6());
  } catch {}
}
var K6 = { importFetch: () => (bd(), Dp) },
  Dn,
  G6 = class {
    constructor() {
      (this.util = (Nd(), Up)), (this.textEncoder = new this.util.TextEncoder());
    }
    fetch(e, t) {
      return fe().global.fetch != null
        ? fe().global.fetch(e, t)
        : (Dn == null && (Dn = K6.importFetch()), Dn(e, t));
    }
    now() {
      let e = process.hrtime();
      return e[0] * 1e3 + e[1] / 1e6;
    }
    encode(e, t) {
      if (t !== 'utf-8' && t !== 'utf8')
        throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);
      return this.textEncoder.encode(e);
    }
    decode(e, t) {
      return e.length === 0 ? '' : new this.util.TextDecoder(t).decode(e);
    }
  };
fe().get('IS_NODE') && !fe().get('IS_BROWSER') && fe().setPlatform('node', new G6());
function a1(e, t = 'float32', a) {
  return (t = t || 'float32'), an(e), new cn(e, t, a);
}
function X6(e, t) {
  let a = b(e, 'x', 'cast');
  if (!Gp(t)) throw new Error(`Failed to cast to unknown dtype ${t}`);
  if ((t === 'string' && a.dtype !== 'string') || (t !== 'string' && a.dtype === 'string'))
    throw new Error('Only strings can be casted to strings');
  let r = { x: a },
    n = { dtype: t };
  return $.runKernel(ri, r, n);
}
var we = x({ cast_: X6 });
function Y6(e) {
  let a = { x: b(e, 'x', 'clone', 'string_or_numeric') };
  return $.runKernel(ni, a);
}
var g1 = x({ clone_: Y6 });
function J6(e, t = !1) {
  console.log(e.toString(t));
}
Si();
var Z6 = { buffer: a1, cast: we, clone: g1, print: J6 };
i6(Z6);
var F1 = {};
be(F1, {
  browserFiles: () => s3,
  browserHTTPRequest: () => l3,
  concatenateArrayBuffers: () => Nn,
  copyModel: () => q6,
  decodeWeights: () => Di,
  encodeWeights: () => w6,
  fromMemory: () => u3,
  fromMemorySync: () => Mi,
  getLoadHandlers: () => $6,
  getModelArtifactsForJSON: () => _n,
  getModelArtifactsInfoForJSON: () => ca,
  getSaveHandlers: () => k6,
  http: () => kn,
  isHTTPScheme: () => An,
  listModels: () => j6,
  loadWeights: () => p3,
  moveModel: () => H6,
  registerLoadRouter: () => A6,
  registerSaveRouter: () => x6,
  removeModel: () => M6,
  weightsLoaderFactory: () => Ui,
  withSaveHandler: () => c3,
  withSaveHandlerSync: () => h3
});
var Q6 = 'model',
  e3 = '.json',
  t3 = '.weights.bin';
function Pi(e) {
  return new Promise((t) => setTimeout(t)).then(e);
}
var B1 = class {
  constructor(e) {
    if (!fe().getBool('IS_BROWSER'))
      throw new Error(
        'browserDownloads() cannot proceed because the current environment is not a browser.'
      );
    e.startsWith(B1.URL_SCHEME) && (e = e.slice(B1.URL_SCHEME.length)),
      (e == null || e.length === 0) && (e = Q6),
      (this.modelJsonFileName = e + e3),
      (this.weightDataFileName = e + t3);
  }
  async save(e) {
    if (typeof document == 'undefined')
      throw new Error(
        'Browser downloads are not supported in this environment since `document` is not present'
      );
    let t = window.URL.createObjectURL(
      new Blob([e.weightData], { type: 'application/octet-stream' })
    );
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error(
        'BrowserDownloads.save() does not support saving model topology in binary formats yet.'
      );
    {
      let a = [{ paths: ['./' + this.weightDataFileName], weights: e.weightSpecs }],
        r = ki(e, a),
        n = window.URL.createObjectURL(new Blob([JSON.stringify(r)], { type: 'application/json' })),
        s = this.modelJsonAnchor == null ? document.createElement('a') : this.modelJsonAnchor;
      if (
        ((s.download = this.modelJsonFileName),
        (s.href = n),
        await Pi(() => s.dispatchEvent(new MouseEvent('click'))),
        e.weightData != null)
      ) {
        let p = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;
        (p.download = this.weightDataFileName),
          (p.href = t),
          await Pi(() => p.dispatchEvent(new MouseEvent('click')));
      }
      return { modelArtifactsInfo: ca(e) };
    }
  }
};
B1.URL_SCHEME = 'downloads://';
var a3 = class {
    constructor(e) {
      if (e == null || e.length < 1)
        throw new Error(
          `When calling browserFiles, at least 1 file is required, but received ${e}`
        );
      (this.jsonFile = e[0]), (this.weightsFiles = e.slice(1));
    }
    async load() {
      return new Promise((e, t) => {
        let a = new FileReader();
        (a.onload = (r) => {
          let n = JSON.parse(r.target.result),
            s = n.modelTopology;
          if (s == null) {
            t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
            return;
          }
          if (n.weightsManifest == null) {
            t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
            return;
          }
          if (this.weightsFiles.length === 0) {
            e({ modelTopology: s });
            return;
          }
          let i = _n(n, (d) => this.loadWeights(d));
          e(i);
        }),
          (a.onerror = (r) =>
            t(
              `Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`
            )),
          a.readAsText(this.jsonFile);
      });
    }
    loadWeights(e) {
      let t = [],
        a = [];
      for (let s of e) t.push(...s.weights), a.push(...s.paths);
      let r = this.checkManifestAndWeightFiles(e),
        n = a.map((s) => this.loadWeightsFile(s, r[s]));
      return Promise.all(n).then((s) => [t, Nn(s)]);
    }
    loadWeightsFile(e, t) {
      return new Promise((a, r) => {
        let n = new FileReader();
        (n.onload = (s) => {
          let p = s.target.result;
          a(p);
        }),
          (n.onerror = (s) => r(`Failed to weights data from file of path '${e}'.`)),
          n.readAsArrayBuffer(t);
      });
    }
    checkManifestAndWeightFiles(e) {
      let t = [],
        a = this.weightsFiles.map((n) => Ai(n.name)),
        r = {};
      for (let n of e)
        n.paths.forEach((s) => {
          let p = Ai(s);
          if (t.indexOf(p) !== -1)
            throw new Error(`Duplicate file basename found in weights manifest: '${p}'`);
          if ((t.push(p), a.indexOf(p) === -1))
            throw new Error(`Weight file with basename '${p}' is not provided.`);
          r[s] = this.weightsFiles[a.indexOf(p)];
        });
      if (t.length !== this.weightsFiles.length)
        throw new Error(
          `Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`
        );
      return r;
    }
  },
  r3 = (e) =>
    fe().getBool('IS_BROWSER') && !Array.isArray(e) && e.startsWith(B1.URL_SCHEME)
      ? n3(e.slice(B1.URL_SCHEME.length))
      : null;
Ie.registerSaveRouter(r3);
function n3(e = 'model') {
  return new B1(e);
}
function s3(e) {
  return new a3(e);
}
function Ri(e, t, a, r) {
  p(e), (a = a ?? 0), (r = r ?? 1), i(a, r);
  let n = 0,
    s = (d) => (
      d.then((l) => {
        let m = a + (++n / e.length) * (r - a);
        return t(m), l;
      }),
      d
    );
  function p(d) {
    S(d != null && Array.isArray(d) && d.length > 0, () => 'promises must be a none empty array');
  }
  function i(d, l) {
    S(
      d >= 0 && d <= 1,
      () => `Progress fraction must be in range [0, 1], but got startFraction ${d}`
    ),
      S(
        l >= 0 && l <= 1,
        () => `Progress fraction must be in range [0, 1], but got endFraction ${l}`
      ),
      S(
        l >= d,
        () =>
          `startFraction must be no more than endFraction, but got startFraction ${d} and endFraction ${l}`
      );
  }
  return Promise.all(e.map(s));
}
async function Li(e, t) {
  t == null && (t = {});
  let a = t.fetchFunc == null ? fe().platform.fetch : t.fetchFunc,
    r = e.map((u) => a(u, t.requestInit, { isBinary: !0 })),
    n = 0,
    s = 0.5,
    i = (t.onProgress == null ? await Promise.all(r) : await Ri(r, t.onProgress, n, s)).map((u) =>
      u.arrayBuffer()
    ),
    d = 0.5,
    l = 1;
  return t.onProgress == null ? await Promise.all(i) : await Ri(i, t.onProgress, d, l);
}
async function p3(e, t = '', a, r) {
  return Ui((p) => Li(p, { requestInit: r }))(e, t, a);
}
function Ui(e) {
  return async (t, a = '', r) => {
    let n = t.map(() => !1),
      s = {},
      p = r != null ? r.map(() => !1) : [],
      i = [];
    if (
      (t.forEach((g, y) => {
        let N = 0;
        g.weights.forEach((T) => {
          let O = 'quantization' in T ? T.quantization.dtype : T.dtype,
            B = wn[O] * Xe(T.shape),
            M = () => {
              (n[y] = !0),
                s[y] == null && (s[y] = []),
                s[y].push({ manifestEntry: T, groupOffset: N, sizeBytes: B });
            };
          r != null
            ? r.forEach((C, L) => {
                C === T.name && (M(), (p[L] = !0));
              })
            : M(),
            i.push(T.name),
            (N += B);
        });
      }),
      !p.every((g) => g))
    ) {
      let g = r.filter((y, N) => !p[N]);
      throw new Error(`Could not find weights in manifest with names: ${g.join(', ')}. 
Manifest JSON has weights with names: ${i.join(', ')}.`);
    }
    let d = n.reduce((g, y, N) => (y && g.push(N), g), []),
      l = [];
    d.forEach((g) => {
      t[g].paths.forEach((y) => {
        let N = a + (a.endsWith('/') ? '' : '/') + y;
        l.push(N);
      });
    });
    let m = await e(l),
      u = {},
      f = 0;
    return (
      d.forEach((g) => {
        let y = t[g].paths.length,
          N = 0;
        for (let C = 0; C < y; C++) N += m[f + C].byteLength;
        let T = new ArrayBuffer(N),
          O = new Uint8Array(T),
          B = 0;
        for (let C = 0; C < y; C++) {
          let L = new Uint8Array(m[f + C]);
          O.set(L, B), (B += L.byteLength);
        }
        s[g].forEach((C) => {
          let L = T.slice(C.groupOffset, C.groupOffset + C.sizeBytes),
            z = Di(L, [C.manifestEntry]);
          for (let X in z) u[X] = z[X];
        }),
          (f += y);
      }),
      u
    );
  };
}
var i3 = 'application/octet-stream',
  o3 = 'application/json',
  xn = class {
    constructor(e, t) {
      if (
        ((this.DEFAULT_METHOD = 'POST'),
        t == null && (t = {}),
        (this.weightPathPrefix = t.weightPathPrefix),
        (this.onProgress = t.onProgress),
        (this.weightUrlConverter = t.weightUrlConverter),
        t.fetchFunc != null
          ? (S(
              typeof t.fetchFunc == 'function',
              () =>
                'Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)'
            ),
            (this.fetch = t.fetchFunc))
          : (this.fetch = fe().platform.fetch),
        S(
          e != null && e.length > 0,
          () => 'URL path for http must not be null, undefined or empty.'
        ),
        Array.isArray(e) &&
          S(
            e.length === 2,
            () => `URL paths for http must have a length of 2, (actual length is ${e.length}).`
          ),
        (this.path = e),
        t.requestInit != null && t.requestInit.body != null)
      )
        throw new Error('requestInit is expected to have no pre-existing body, but has one.');
      this.requestInit = t.requestInit || {};
    }
    async save(e) {
      if (e.modelTopology instanceof ArrayBuffer)
        throw new Error(
          'BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.'
        );
      let t = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
      t.body = new FormData();
      let a = [{ paths: ['./model.weights.bin'], weights: e.weightSpecs }],
        r = ki(e, a);
      t.body.append('model.json', new Blob([JSON.stringify(r)], { type: o3 }), 'model.json'),
        e.weightData != null &&
          t.body.append(
            'model.weights.bin',
            new Blob([e.weightData], { type: i3 }),
            'model.weights.bin'
          );
      let n = await this.fetch(this.path, t);
      if (n.ok) return { modelArtifactsInfo: ca(e), responses: [n] };
      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${n.status}.`);
    }
    async load() {
      let e = await this.fetch(this.path, this.requestInit);
      if (!e.ok)
        throw new Error(
          `Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`
        );
      let t;
      try {
        t = await e.json();
      } catch {
        let s = `Failed to parse model JSON of response from ${this.path}.`;
        throw (
          (this.path.endsWith('.pb')
            ? (s +=
                " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.")
            : (s += ' Please make sure the server is serving valid JSON for this request.'),
          new Error(s))
        );
      }
      let a = t.modelTopology,
        r = t.weightsManifest;
      if (a == null && r == null)
        throw new Error(
          `The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`
        );
      return _n(t, (n) => this.loadWeights(n));
    }
    async loadWeights(e) {
      let t = Array.isArray(this.path) ? this.path[1] : this.path,
        [a, r] = d3(t),
        n = this.weightPathPrefix || a,
        s = [];
      for (let l of e) s.push(...l.weights);
      let p = [],
        i = [];
      for (let l of e)
        for (let m of l.paths)
          this.weightUrlConverter != null ? i.push(this.weightUrlConverter(m)) : p.push(n + m + r);
      this.weightUrlConverter && p.push(...(await Promise.all(i)));
      let d = await Li(p, {
        requestInit: this.requestInit,
        fetchFunc: this.fetch,
        onProgress: this.onProgress
      });
      return [s, Nn(d)];
    }
  };
xn.URL_SCHEME_REGEX = /^https?:\/\//;
function d3(e) {
  let t = e.lastIndexOf('/'),
    a = e.lastIndexOf('?'),
    r = e.substring(0, t),
    n = a > t ? e.substring(a) : '';
  return [r + '/', n];
}
function An(e) {
  return e.match(xn.URL_SCHEME_REGEX) != null;
}
var zi = (e, t) => {
  if (typeof fetch == 'undefined' && (t == null || t.fetchFunc == null)) return null;
  {
    let a = !0;
    if ((Array.isArray(e) ? (a = e.every((r) => An(r))) : (a = An(e)), a)) return kn(e, t);
  }
  return null;
};
Ie.registerSaveRouter(zi);
Ie.registerLoadRouter(zi);
function kn(e, t) {
  return new xn(e, t);
}
function l3(e, t) {
  return kn(e, t);
}
var $n = class {
    constructor(e) {
      this.modelArtifacts = e;
    }
    load() {
      return this.modelArtifacts;
    }
  },
  ji = class {
    constructor(e) {
      this.saveHandler = e;
    }
    save(e) {
      return this.saveHandler(e);
    }
  },
  m3 = class {
    constructor(e) {
      e.load && (this.load = () => Promise.resolve(e.load())),
        e.save && (this.save = (t) => Promise.resolve(e.save(t)));
    }
  };
function u3(e, t, a, r) {
  let n = arguments;
  return new m3(Mi(...n));
}
function Mi(e, t, a, r) {
  return arguments.length === 1
    ? e.modelTopology != null || e.weightSpecs != null
      ? new $n(e)
      : (console.warn(
          'Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.'
        ),
        new $n({ modelTopology: e }))
    : (console.warn(
        'Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.'
      ),
      new $n({ modelTopology: e, weightSpecs: t, weightData: a, trainingConfig: r }));
}
function c3(e) {
  return new ji(e);
}
function h3(e) {
  return new ji(e);
}
function f3(e, t, a = !1, r = !1) {
  let n = b(e, 'a', 'matMul'),
    s = b(t, 'b', 'matMul');
  [n, s] = $e(n, s);
  let p = { a: n, b: s },
    i = { transposeA: a, transposeB: r };
  return $.runKernel(b4, p, i);
}
var Te = x({ matMul_: f3 });
function v3(e, t, a = 1, r = 0) {
  if (t < 2) throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);
  let s = { indices: b(e, 'indices', 'oneHot', 'int32') },
    p = { depth: t, onValue: a, offValue: r };
  return $.runKernel(M0, s, p);
}
var In = x({ oneHot_: v3 });
function g3(e) {
  fe().getBool('DEPRECATION_WARNINGS_ENABLED') &&
    console.warn(e + ' You can disable deprecation warnings with tf.disableDeprecationWarnings().');
}
o6(g3);
function re(e, t) {
  return $.tidy(e, t);
}
function Ue(e) {
  bi(e).forEach((a) => a.dispose());
}
function Rt(e) {
  return $.keep(e);
}
function y3(e) {
  let a = { input: b(e, 'input', 'imag') };
  return $.runKernel(m0, a);
}
var or = x({ imag_: y3 });
function w3(e) {
  let a = { x: b(e, 'x', 'neg') };
  return $.runKernel(P0, a);
}
var Lt = x({ neg_: w3 });
function b3(e) {
  let a = { input: b(e, 'input', 'real') };
  return $.runKernel(Y0, a);
}
var ha = x({ real_: b3 });
function N3(e, t, a) {
  let r = b(e, 'x', 'transpose');
  if (
    (t == null && (t = r.shape.map((p, i) => i).reverse()),
    S(
      r.rank === t.length,
      () => `Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`
    ),
    t.forEach((p) => {
      S(
        p >= 0 && p < r.rank,
        () => `All entries in 'perm' must be between 0 and ${r.rank - 1} but got ${t}`
      );
    }),
    r.rank <= 1)
  )
    return r.clone();
  let n = { x: r },
    s = { perm: t };
  return r.dtype === 'complex64'
    ? re(() => {
        let p = ha(r),
          i = or(r);
        return (
          (p = $.runKernel(pn, { x: p }, s)),
          (i = $.runKernel(pn, { x: i }, s)),
          a && (i = Lt(i)),
          Qt(p, i)
        );
      })
    : $.runKernel(pn, n, s);
}
var dr = x({ transpose_: N3 });
function _3(e, t, a) {
  let r = b(e, 'labels', 'confusionMatrix'),
    n = b(t, 'predictions', 'confusionMatrix');
  S(
    a == null || (a > 0 && Number.isInteger(a)),
    () => `If provided, numClasses must be a positive integer, but got ${a}`
  ),
    S(r.rank === 1, () => `Expected the rank of labels to be 1, but got ${r.rank}`),
    S(n.rank === 1, () => `Expected the rank of predictions to be 1, but got ${n.rank}`),
    S(
      r.shape[0] === n.shape[0],
      () =>
        `Mismatch in the number of examples: ${r.shape[0]} vs. ${n.shape[0]}. Labels and predictions should have the same number of elements.`
    ),
    S(
      a > 0 && Number.isInteger(a),
      () => `numClasses is required to be a positive integer, but got ${a}`
    );
  let s = In(we(r, 'int32'), a),
    p = In(we(n, 'int32'), a),
    i = dr(s),
    d = Te(i, p);
  return we(d, 'int32');
}
var yh = x({ confusionMatrix_: _3 });
function S3(e, t) {
  let a = [];
  for (let r = 0; r < t.length; r++) {
    let n = e[e.length - r - 1],
      s = t.length - r - 1,
      p = t[s];
    (n == null || (n === 1 && p > 1)) && a.unshift(s);
  }
  return a;
}
function ze(e, t) {
  let a = [],
    r = Math.max(e.length, t.length);
  for (let n = 0; n < r; n++) {
    let s = e[e.length - n - 1];
    s == null && (s = 1);
    let p = t[t.length - n - 1];
    if ((p == null && (p = 1), s === 1)) a.unshift(p);
    else if (p === 1) a.unshift(s);
    else if (s !== p) {
      let i = `Operands could not be broadcast together with shapes ${e} and ${t}.`;
      throw Error(i);
    } else a.unshift(s);
  }
  return a;
}
var On = {};
be(On, { fromPixels: () => I3, fromPixelsAsync: () => k3, toPixels: () => $3 });
function T3(e, t, a) {
  if ((Xa(e), t != null && t.length !== 3))
    throw new Error('tensor3d() requires shape to have three numbers');
  let r = ma(e, a);
  if (r.length !== 3 && r.length !== 1)
    throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');
  if (r.length === 1 && t == null)
    throw new Error('tensor3d() requires shape to be provided when `values` are a flat array');
  return ua(e, t, r, a);
}
var y1;
function qi(e, t = 3) {
  if (t > 4) throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');
  if (e == null) throw new Error('pixels passed to tf.browser.fromPixels() can not be null');
  let a = !1,
    r = !1,
    n = !1,
    s = !1,
    p = !1,
    i = !1;
  if (e.data instanceof Uint8Array) a = !0;
  else if (typeof ImageData != 'undefined' && e instanceof ImageData) r = !0;
  else if (typeof HTMLVideoElement != 'undefined' && e instanceof HTMLVideoElement) n = !0;
  else if (typeof HTMLImageElement != 'undefined' && e instanceof HTMLImageElement) s = !0;
  else if (e.getContext != null) p = !0;
  else if (typeof ImageBitmap != 'undefined' && e instanceof ImageBitmap) i = !0;
  else
    throw new Error(
      `pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`
    );
  if (n) {
    let y = 2;
    if (n && e.readyState < y)
      throw new Error(
        'The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.'
      );
  }
  if (on(pi, $.backendName) != null) {
    let y = { pixels: e },
      N = { numChannels: t };
    return $.runKernel(pi, y, N);
  }
  let [l, m] = n ? [e.videoWidth, e.videoHeight] : [e.width, e.height],
    u;
  if (p) u = e.getContext('2d').getImageData(0, 0, l, m).data;
  else if (r || a) u = e.data;
  else if (s || n || i) {
    if (y1 == null)
      if (typeof document == 'undefined')
        if (
          typeof OffscreenCanvas != 'undefined' &&
          typeof OffscreenCanvasRenderingContext2D != 'undefined'
        )
          y1 = new OffscreenCanvas(1, 1).getContext('2d');
        else
          throw new Error(
            'Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.'
          );
      else y1 = document.createElement('canvas').getContext('2d');
    (y1.canvas.width = l),
      (y1.canvas.height = m),
      y1.drawImage(e, 0, 0, l, m),
      (u = y1.getImageData(0, 0, l, m).data);
  }
  let f;
  if (t === 4) f = new Int32Array(u);
  else {
    let y = l * m;
    f = new Int32Array(y * t);
    for (let N = 0; N < y; N++) for (let T = 0; T < t; ++T) f[N * t + T] = u[N * 4 + T];
  }
  return T3(f, [m, l, t], 'int32');
}
function E3(e) {
  return e != null && e.data instanceof Uint8Array;
}
function D3() {
  return (
    typeof window != 'undefined' &&
    typeof ImageBitmap != 'undefined' &&
    window.hasOwnProperty('createImageBitmap')
  );
}
function x3(e) {
  return e != null && e.width !== 0 && e.height !== 0;
}
function A3(e) {
  return D3() && !(e instanceof ImageBitmap) && x3(e) && !E3(e);
}
async function k3(e, t = 3) {
  let a = null;
  if (fe().getBool('WRAP_TO_IMAGEBITMAP') && A3(e)) {
    let r;
    try {
      r = await createImageBitmap(e, { premultiplyAlpha: 'none' });
    } catch {
      r = null;
    }
    r != null && r.width === e.width && r.height === e.height ? (a = r) : (a = e);
  } else a = e;
  return qi(a, t);
}
async function $3(e, t) {
  let a = b(e, 'img', 'toPixels');
  if (!(e instanceof He)) {
    let l = a;
    (a = we(l, 'int32')), l.dispose();
  }
  if (a.rank !== 2 && a.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${a.rank}.`);
  let [r, n] = a.shape.slice(0, 2),
    s = a.rank === 2 ? 1 : a.shape[2];
  if (s > 4 || s === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);
  if (a.dtype !== 'float32' && a.dtype !== 'int32')
    throw new Error(
      `Unsupported type for toPixels: ${a.dtype}. Please use float32 or int32 tensors.`
    );
  let p = await a.data(),
    i = a.dtype === 'float32' ? 255 : 1,
    d = new Uint8ClampedArray(n * r * 4);
  for (let l = 0; l < r * n; ++l) {
    let m = [0, 0, 0, 255];
    for (let f = 0; f < s; f++) {
      let g = p[l * s + f];
      if (a.dtype === 'float32') {
        if (g < 0 || g > 1)
          throw new Error(
            `Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${g}.`
          );
      } else if (a.dtype === 'int32' && (g < 0 || g > 255))
        throw new Error(
          `Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${g}.`
        );
      s === 1 ? ((m[0] = g * i), (m[1] = g * i), (m[2] = g * i)) : (m[f] = g * i);
    }
    let u = l * 4;
    (d[u + 0] = Math.round(m[0])),
      (d[u + 1] = Math.round(m[1])),
      (d[u + 2] = Math.round(m[2])),
      (d[u + 3] = Math.round(m[3]));
  }
  if (t != null) {
    (t.width = n), (t.height = r);
    let l = t.getContext('2d'),
      m = new ImageData(d, n, r);
    l.putImageData(m, 0, 0);
  }
  return a !== e && a.dispose(), d;
}
var I3 = x({ fromPixels_: qi });
function O3(e, t, a) {
  let r = t.rank > 1 ? t.shape[t.rank - 1] : 1,
    n = t.rank > 1 ? t.rank - 1 : 1,
    s = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${a.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${n}.`;
  if (a.rank < n) throw new Error(s + ` update.rank < ${n}. `);
  if (e.length < r + (a.rank - n))
    throw new Error(s + ` Output shape length < ${r + (a.rank - n)}`);
  if (a.rank !== n + e.length - r) throw new Error(s + ` update.rank != ${n + e.length - r}`);
  for (let p = 0; p < n; ++p)
    if (a.shape[p] !== t.shape[p])
      throw new Error(
        s + ` updates.shape[${p}] (${a.shape[p]}) != indices.shape[${p}] (${t.shape[p]}).`
      );
  for (let p = 0; p < a.rank - n; ++p)
    if (a.shape[p + n] !== e[p + r])
      throw new Error(
        s + ` updates.shape[${p + n}] (${a.shape[p + n]}) != shape[${p + n}] (${e[p + n]})`
      );
}
function V3(e, t, a) {
  if (t.rank < 1)
    throw new Error(
      `tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`
    );
  if (e.rank < 1)
    throw new Error(
      `tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`
    );
  if (t.dtype !== 'int32')
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);
  if (a.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${a}`);
  if (a.length === 0) {
    if (t.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);
    if (e.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`);
  }
  O3(a, t, e);
}
var C3 = class {
    getClassName() {
      return this.constructor.className;
    }
    static fromConfig(e, t) {
      return new e(t);
    }
  },
  P1 = class {
    constructor() {
      this.classNameMap = {};
    }
    static getMap() {
      return P1.instance == null && (P1.instance = new P1()), P1.instance;
    }
    static register(e) {
      P1.getMap().classNameMap[e.className] = [e, e.fromConfig];
    }
  };
function w1(e) {
  S(
    e.className != null,
    () => 'Class being registered does not have the static className property defined.'
  ),
    S(
      typeof e.className == 'string',
      () => 'className is required to be a string, but got type ' + typeof e.className
    ),
    S(
      e.className.length > 0,
      () => 'Class being registered has an empty-string as its className, which is disallowed.'
    ),
    P1.register(e);
}
function F3(e, t) {
  let a = b(e, 'a', 'add'),
    r = b(t, 'b', 'add');
  [a, r] = $e(a, r);
  let n = { a, b: r };
  return $.runKernel(ai, n);
}
var ae = x({ add_: F3 });
function B3(e, t) {
  let a = b(e, 'a', 'floorDiv'),
    r = b(t, 'b', 'floorDiv');
  [a, r] = $e(a, r);
  let n = { a, b: r };
  return $.runKernel(n0, n);
}
var Hi = x({ floorDiv_: B3 });
function P3(e, t) {
  let a = b(e, 'a', 'div'),
    r = b(t, 'b', 'div');
  if ((([a, r] = $e(a, r)), a.dtype === 'int32' && r.dtype === 'int32')) return Hi(a, r);
  let n = { a, b: r },
    s = {};
  return $.runKernel(W4, n, s);
}
var ce = x({ div_: P3 });
function R3(e, t) {
  let a = b(e, 'a', 'mul'),
    r = b(t, 'b', 'mul');
  [a, r] = $e(a, r);
  let n = { a, b: r };
  return $.runKernel(B0, n);
}
var K = x({ mul_: R3 });
function L3(e) {
  let t = b(e, 'x', 'abs');
  if (t.dtype === 'complex64') {
    let a = { x: t };
    return $.runKernel(x4, a);
  } else {
    let a = { x: t };
    return $.runKernel(s4, a);
  }
}
var it = x({ abs_: L3 });
function U3(e) {
  let a = { x: b(e, 'x', 'acos') };
  return $.runKernel(p4, a);
}
var z3 = x({ acos_: U3 });
function j3(e) {
  let a = { x: b(e, 'x', 'acosh') };
  return $.runKernel(i4, a);
}
var M3 = x({ acosh_: j3 });
function q3(e) {
  S(Array.isArray(e), () => 'The argument passed to tf.addN() must be a list of tensors'),
    S(e.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${e.length}`);
  let t = e.map((n, s) => b(n, `tensors${s}`, 'addN')),
    a = t[0];
  t.forEach((n) => {
    if (n.dtype !== a.dtype)
      throw new Error('All tensors passed to tf.addN() must have the same dtype');
  }),
    t.forEach((n) => {
      if (!m1(n.shape, a.shape))
        throw new Error('All tensors passed to tf.addN() must have the same shape');
    });
  let r = t;
  return $.runKernel(o4, r);
}
var H3 = x({ addN_: q3 });
function W3(e, t = null, a = !1) {
  let n = { x: b(e, 'x', 'all', 'bool') },
    s = { axis: t, keepDims: a };
  return $.runKernel(d4, n, s);
}
var K3 = x({ all_: W3 });
function G3(e, t = null, a = !1) {
  let n = { x: b(e, 'x', 'any', 'bool') },
    s = { axis: t, keepDims: a };
  return $.runKernel(l4, n, s);
}
var X3 = x({ any_: G3 });
function Y3(e, t = 0) {
  let r = { x: b(e, 'x', 'argMax') },
    n = { axis: t };
  return $.runKernel(m4, r, n);
}
var J3 = x({ argMax_: Y3 });
function Z3(e, t = 0) {
  let r = { x: b(e, 'x', 'argMin') },
    n = { axis: t };
  return $.runKernel(u4, r, n);
}
var Q3 = x({ argMin_: Z3 });
function em(e) {
  let a = { x: b(e, 'x', 'asin') };
  return $.runKernel(c4, a);
}
var tm = x({ asin_: em });
function am(e) {
  let a = { x: b(e, 'x', 'asinh') };
  return $.runKernel(h4, a);
}
var rm = x({ asinh_: am });
function nm(e) {
  let a = { x: b(e, 'x', 'atan') };
  return $.runKernel(f4, a);
}
var sm = x({ atan_: nm });
function pm(e, t) {
  let a = b(e, 'a', 'atan2'),
    r = b(t, 'b', 'atan2');
  [a, r] = $e(a, r);
  let n = { a, b: r };
  return $.runKernel(g4, n);
}
var im = x({ atan2_: pm });
function om(e) {
  let a = { x: b(e, 'x', 'atanh') };
  return $.runKernel(v4, a);
}
var dm = x({ atanh_: om });
function lm(e, t, a, r, n, s, p = 'channelsLast') {
  let [i, d] = lr(t),
    l;
  if (p === 'channelsLast') l = [i, d, e[3], e[3]];
  else if (p === 'channelsFirst') l = [i, d, e[1], e[1]];
  else throw new Error(`Unknown dataFormat ${p}`);
  return Vn(e, l, a, r, n, s, !1, p);
}
function Vn(e, t, a, r, n, s, p = !1, i = 'channelsLast') {
  let [d, l, m, u] = [-1, -1, -1, -1];
  if (i === 'channelsLast') [d, l, m, u] = e;
  else if (i === 'channelsFirst') [d, u, l, m] = e;
  else throw new Error(`Unknown dataFormat ${i}`);
  let [f, g, , y] = t,
    [N, T] = lr(a),
    [O, B] = lr(r),
    M = Cn(f, O),
    C = Cn(g, B),
    { padInfo: L, outHeight: z, outWidth: X } = cm(n, l, m, N, T, M, C, s, i),
    Y = p ? y * u : y,
    J;
  return (
    i === 'channelsFirst' ? (J = [d, Y, z, X]) : i === 'channelsLast' && (J = [d, z, X, Y]),
    {
      batchSize: d,
      dataFormat: i,
      inHeight: l,
      inWidth: m,
      inChannels: u,
      outHeight: z,
      outWidth: X,
      outChannels: Y,
      padInfo: L,
      strideHeight: N,
      strideWidth: T,
      filterHeight: f,
      filterWidth: g,
      effectiveFilterHeight: M,
      effectiveFilterWidth: C,
      dilationHeight: O,
      dilationWidth: B,
      inShape: e,
      outShape: J,
      filterShape: t
    }
  );
}
function mm(e, t, a, r, n) {
  r == null && (r = um(e, t, a));
  let s = e[0],
    p = e[1],
    i = mr((s - t + 2 * r) / a + 1, n),
    d = mr((p - t + 2 * r) / a + 1, n);
  return [i, d];
}
function um(e, t, a, r = 1) {
  let n = Cn(t, r);
  return Math.floor((e[0] * (a - 1) - a + n) / 2);
}
function lr(e) {
  return typeof e == 'number' ? [e, e, e] : e.length === 2 ? [e[0], e[1], 1] : e;
}
function Cn(e, t) {
  return t <= 1 ? e : e + (e - 1) * (t - 1);
}
function cm(e, t, a, r, n, s, p, i, d) {
  let l, m, u;
  if (typeof e == 'number') {
    l = { top: e, bottom: e, left: e, right: e, type: e === 0 ? 'VALID' : 'NUMBER' };
    let g = mm([t, a], s, r, e, i);
    (m = g[0]), (u = g[1]);
  } else if (e === 'same') {
    (m = Math.ceil(t / r)), (u = Math.ceil(a / n));
    let f = Math.max(0, (m - 1) * r + s - t),
      g = Math.max(0, (u - 1) * n + p - a),
      y = Math.floor(f / 2),
      N = f - y,
      T = Math.floor(g / 2),
      O = g - T;
    l = { top: y, bottom: N, left: T, right: O, type: 'SAME' };
  } else if (e === 'valid')
    (l = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' }),
      (m = Math.ceil((t - s + 1) / r)),
      (u = Math.ceil((a - p + 1) / n));
  else if (typeof e == 'object') {
    let f = d === 'channelsLast' ? e[1][0] : e[2][0],
      g = d === 'channelsLast' ? e[1][1] : e[2][1],
      y = d === 'channelsLast' ? e[2][0] : e[3][0],
      N = d === 'channelsLast' ? e[2][1] : e[3][1];
    (l = {
      top: f,
      bottom: g,
      left: y,
      right: N,
      type: f === 0 && g === 0 && y === 0 && N === 0 ? 'VALID' : 'EXPLICIT'
    }),
      (m = mr((t - s + f + g) / r + 1, i)),
      (u = mr((a - p + y + N) / n + 1, i));
  } else throw Error(`Unknown padding parameter: ${e}`);
  return { padInfo: l, outHeight: m, outWidth: u };
}
function mr(e, t) {
  if (!t) return Math.trunc(e);
  switch (t) {
    case 'round':
      return Math.round(e);
    case 'ceil':
      return Math.ceil(e);
    case 'floor':
      return Math.floor(e);
    default:
      throw new Error(`Unknown roundingMode ${t}`);
  }
}
function ur(e) {
  let [t, a, r] = lr(e);
  return t === 1 && a === 1 && r === 1;
}
function r1(e, t) {
  return ur(e) || ur(t);
}
function Et(e, t, a) {
  if (a != null) {
    if (typeof t == 'string')
      throw Error(
        `Error in ${e}: pad must be an integer when using dimRoundingMode ${a} but got pad ${t}.`
      );
    if (typeof t == 'number')
      S(
        $1(t),
        () =>
          `Error in ${e}: pad must be an integer when using dimRoundingMode ${a} but got pad ${t}.`
      );
    else if (typeof t == 'object')
      t.forEach((r) => {
        r.forEach((n) => {
          S(
            $1(n),
            () =>
              `Error in ${e}: pad must be an integer when using dimRoundingMode ${a} but got pad ${n}.`
          );
        });
      });
    else throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);
  }
}
function hm(e, t) {
  let r = { x: b(e, 'x', 'reshape', 'string_or_numeric') },
    n = { shape: t };
  return $.runKernel(Q0, r, n);
}
var U = x({ reshape_: hm });
function fm(e, t, a, r, n) {
  let s = b(e, 'x', 'avgPool', 'float32'),
    p = 1;
  S(
    r1(a, p),
    () =>
      `Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${p}'`
  );
  let i = s,
    d = !1;
  s.rank === 3 && ((d = !0), (i = U(s, [1, s.shape[0], s.shape[1], s.shape[2]]))),
    S(i.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),
    Et('avgPool', r, n);
  let l = { x: i },
    m = { filterSize: t, strides: a, pad: r, dimRoundingMode: n },
    u = $.runKernel(y4, l, m);
  return (u = we(u, s.dtype)), d ? U(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var Wi = x({ avgPool_: fm });
function vm(e, t, a, r, n, s = 'NDHWC') {
  let p = b(e, 'x', 'avgPool3d', 'float32'),
    i = p,
    d = !1;
  p.rank === 4 && ((d = !0), (i = U(p, [1, p.shape[0], p.shape[1], p.shape[2], p.shape[3]]))),
    S(i.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),
    S(
      s === 'NDHWC',
      () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`
    ),
    Et('avgPool3d', r, n);
  let l = { x: i },
    m = { filterSize: t, strides: a, pad: r, dimRoundingMode: n, dataFormat: s },
    u = $.runKernel(w4, l, m);
  return (u = we(u, i.dtype)), d ? U(u, [u.shape[1], u.shape[2], u.shape[3], u.shape[4]]) : u;
}
var gm = x({ avgPool3d_: vm });
function ym(e, t = 0) {
  S(e.length >= 1, () => 'Pass at least one tensor to concat');
  let a = sr(e, 'tensors', 'concat', 'string_or_numeric');
  if (
    (a[0].dtype === 'complex64' &&
      a.forEach((s) => {
        if (s.dtype !== 'complex64')
          throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `);
      }),
    a.length === 1)
  )
    return g1(a[0]);
  let r = a,
    n = { axis: t };
  return $.runKernel(A4, r, n);
}
var We = x({ concat_: ym });
function wm(e) {
  let a = { x: b(e, 'x', 'sigmoid', 'float32') };
  return $.runKernel(hl, a);
}
var b1 = x({ sigmoid_: wm });
function bm(e, t, a) {
  let r = b(e, 'x', 'slice', 'string_or_numeric');
  if (r.rank === 0) throw new Error('Slicing scalar is not possible');
  let n = { x: r },
    s = { begin: t, size: a };
  return $.runKernel(ll, n, s);
}
var de = x({ slice_: bm });
function Nm(e) {
  let a = { x: b(e, 'x', 'tanh', 'float32') };
  return $.runKernel(Vl, a);
}
var Fn = x({ tanh_: Nm });
function _m(e, t, a, r, n, s) {
  let p = b(e, 'forgetBias', 'basicLSTMCell'),
    i = b(t, 'lstmKernel', 'basicLSTMCell'),
    d = b(a, 'lstmBias', 'basicLSTMCell'),
    l = b(r, 'data', 'basicLSTMCell'),
    m = b(n, 'c', 'basicLSTMCell'),
    u = b(s, 'h', 'basicLSTMCell'),
    f = We([l, u], 1),
    g = Te(f, i),
    y = ae(g, d),
    N = y.shape[0],
    T = y.shape[1] / 4,
    O = [N, T],
    B = de(y, [0, 0], O),
    M = de(y, [0, T], O),
    C = de(y, [0, T * 2], O),
    L = de(y, [0, T * 3], O),
    z = ae(K(b1(B), Fn(M)), K(m, b1(ae(p, C)))),
    X = K(Fn(z), b1(L));
  return [z, X];
}
var wh = x({ basicLSTMCell_: _m });
function Sm(e, t, a) {
  let r = b(e, 'x', 'batchToSpaceND'),
    n = t.reduce((i, d) => i * d);
  S(
    r.rank >= 1 + t.length,
    () => `input rank is ${r.rank} but should be > than blockShape.length ${t.length}`
  ),
    S(
      a.length === t.length,
      () => `crops.length is ${a.length} but should be equal to blockShape.length  ${t.length}`
    ),
    S(
      r.shape[0] % n == 0,
      () =>
        `input tensor batch is ${
          r.shape[0]
        } but is not divisible by the product of the elements of blockShape ${t.join(
          ' * '
        )} === ${n}`
    );
  let s = { x: r },
    p = { blockShape: t, crops: a };
  return $.runKernel(N4, s, p);
}
var Ki = x({ batchToSpaceND_: Sm });
function Tm(e) {
  let t;
  return (
    e.rank === 0 || e.rank === 1
      ? (t = U(e, [1, 1, 1, e.size]))
      : e.rank === 2
      ? (t = U(e, [1, 1, e.shape[0], e.shape[1]]))
      : e.rank === 3
      ? (t = U(e, [1, e.shape[0], e.shape[1], e.shape[2]]))
      : (t = e),
    t
  );
}
function Em(e, t, a, r, n, s) {
  s == null && (s = 0.001);
  let p = b(e, 'x', 'batchNorm'),
    i = b(t, 'mean', 'batchNorm'),
    d = b(a, 'variance', 'batchNorm'),
    l;
  n != null && (l = b(n, 'scale', 'batchNorm'));
  let m;
  r != null && (m = b(r, 'offset', 'batchNorm')),
    S(
      i.rank === d.rank,
      () => 'Batch normalization gradient requires mean and variance to have equal ranks.'
    ),
    S(
      m == null || i.rank === m.rank,
      () => 'Batch normalization gradient requires mean and offset to have equal ranks.'
    ),
    S(
      l == null || i.rank === l.rank,
      () => 'Batch normalization gradient requires mean and scale to have equal ranks.'
    );
  let f = { x: Tm(p), scale: l, offset: m, mean: i, variance: d },
    g = { varianceEpsilon: s },
    y = $.runKernel(s0, f, g);
  return U(y, p.shape);
}
var fa = x({ batchNorm_: Em });
function Dm(e, t, a, r, n, s) {
  let p = b(e, 'x', 'batchNorm'),
    i = b(t, 'mean', 'batchNorm'),
    d = b(a, 'variance', 'batchNorm'),
    l;
  n != null && (l = b(n, 'scale', 'batchNorm'));
  let m;
  return (
    r != null && (m = b(r, 'offset', 'batchNorm')),
    S(p.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${p.rank}.`),
    S(
      i.rank === 2 || i.rank === 1,
      () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`
    ),
    S(
      d.rank === 2 || d.rank === 1,
      () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${d.rank}.`
    ),
    l != null &&
      S(
        l.rank === 2 || l.rank === 1,
        () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`
      ),
    m != null &&
      S(
        m.rank === 2 || m.rank === 1,
        () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${m.rank}.`
      ),
    fa(p, i, d, m, l, s)
  );
}
var bh = x({ batchNorm2d_: Dm });
function xm(e, t, a, r, n, s) {
  let p = b(e, 'x', 'batchNorm'),
    i = b(t, 'mean', 'batchNorm'),
    d = b(a, 'variance', 'batchNorm'),
    l;
  n != null && (l = b(n, 'scale', 'batchNorm'));
  let m;
  return (
    r != null && (m = b(r, 'offset', 'batchNorm')),
    S(p.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${p.rank}.`),
    S(
      i.rank === 3 || i.rank === 1,
      () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`
    ),
    S(
      d.rank === 3 || d.rank === 1,
      () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${d.rank}.`
    ),
    l != null &&
      S(
        l.rank === 3 || l.rank === 1,
        () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`
      ),
    m != null &&
      S(
        m.rank === 3 || m.rank === 1,
        () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${m.rank}.`
      ),
    fa(p, i, d, m, l, s)
  );
}
var Nh = x({ batchNorm3d_: xm });
function Am(e, t, a, r, n, s) {
  let p = b(e, 'x', 'batchNorm'),
    i = b(t, 'mean', 'batchNorm'),
    d = b(a, 'variance', 'batchNorm'),
    l;
  n != null && (l = b(n, 'scale', 'batchNorm'));
  let m;
  return (
    r != null && (m = b(r, 'offset', 'batchNorm')),
    S(p.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${p.rank}.`),
    S(
      i.rank === 4 || i.rank === 1,
      () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`
    ),
    S(
      d.rank === 4 || d.rank === 1,
      () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${d.rank}.`
    ),
    l != null &&
      S(
        l.rank === 4 || l.rank === 1,
        () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`
      ),
    m != null &&
      S(
        m.rank === 4 || m.rank === 1,
        () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${m.rank}.`
      ),
    fa(p, i, d, m, l, s)
  );
}
var _h = x({ batchNorm4d_: Am });
function km(e, t, a) {
  let r = b(e, 'x', 'bincount'),
    n = b(t, 'weights', 'bincount');
  S(r.dtype === 'int32', () => `Error in bincount: input dtype must be int32, but got ${r.dtype}`),
    S(a >= 0, () => `size must be non-negative, but got ${a}.`),
    S(
      n.size === r.size || n.size === 0,
      () =>
        `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${n.shape}.`
    );
  let s = { x: r, weights: n },
    p = { size: a };
  return $.runKernel(_4, s, p);
}
var Gi = x({ bincount_: km });
function $m(e, t) {
  let a = b(e, 's0', 'broadcastArgs', 'int32'),
    r = b(t, 's1', 'broadcastArgs', 'int32');
  if (a.rank !== 1)
    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${a.rank}`);
  if (r.rank !== 1)
    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);
  let n = { s0: a, s1: r };
  return $.runKernel(S4, n);
}
var Im = x({ broadcastArgs_: $m });
function Om(e, t) {
  let a = b(e, 'broadcastTo', 'x'),
    r = a.shape;
  if (t.some((l) => !(l > 0) || l % 1 != 0))
    throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);
  if (t.length < a.rank)
    throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${a.rank}.`);
  if (t.length > a.rank) {
    let l = a.shape.slice();
    for (; l.length < t.length; ) l.unshift(1);
    a = U(a, l);
  }
  let n = a.shape,
    s = Array.from(t);
  for (let l = t.length - 1; l >= 0; l--)
    if (n[l] === t[l]) s[l] = 1;
    else if (a.shape[l] !== 1)
      throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);
  if (s.map((l, m) => (l > 1 ? m : -1)).filter((l) => l >= 0).length === 0) return g1(a);
  let i = { x: a },
    d = { reps: s };
  return $.runKernel(si, i, d);
}
var cr = x({ broadcastTo_: Om });
function Vm(e) {
  let a = { x: b(e, 'x', 'ceil', 'float32') };
  return $.runKernel(T4, a);
}
var Cm = x({ ceil_: Vm });
function Fm(e, t, a) {
  let r = b(e, 'x', 'clipByValue');
  S(t <= a, () => `Error in clip: min (${t}) must be less than or equal to max (${a}).`);
  let n = { x: r },
    s = { clipValueMin: t, clipValueMax: a };
  return $.runKernel(E4, n, s);
}
var Xi = x({ clipByValue_: Fm });
function Bm(e) {
  return We(e, 0);
}
var Sh = x({ concat1d_: Bm });
function Pm(e, t) {
  return We(e, t);
}
var Th = x({ concat2d_: Pm });
function Rm(e, t) {
  return We(e, t);
}
var Eh = x({ concat3d_: Rm });
function Lm(e, t) {
  return We(e, t);
}
var Dh = x({ concat4d_: Lm });
function Um(e, t, a, r, n = 'NHWC', s = [1, 1], p) {
  let i = b(e, 'x', 'conv2d', 'float32'),
    d = b(t, 'filter', 'conv2d', 'float32'),
    l = i,
    m = !1;
  i.rank === 3 && ((m = !0), (l = U(i, [1, i.shape[0], i.shape[1], i.shape[2]]))),
    S(l.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),
    S(d.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${d.rank}.`),
    Et('conv2d', r, p);
  let u = n === 'NHWC' ? l.shape[3] : l.shape[1];
  S(
    u === d.shape[2],
    () => `Error in conv2d: depth of input (${u}) must match input depth for filter ${d.shape[2]}.`
  ),
    S(
      r1(a, s),
      () =>
        `Error in conv2D: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`
    );
  let f = { x: l, filter: d },
    g = { strides: a, pad: r, dataFormat: n, dilations: s, dimRoundingMode: p },
    y = $.runKernel(k4, f, g);
  return m ? U(y, [y.shape[1], y.shape[2], y.shape[3]]) : y;
}
var hr = x({ conv2d_: Um });
function zm(e, t, a, r, n = 'NWC', s = 1, p) {
  let i = b(e, 'x', 'conv1d'),
    d = b(t, 'filter', 'conv1d'),
    l = i,
    m = !1;
  i.rank === 2 && ((m = !0), (l = U(i, [1, i.shape[0], i.shape[1]]))),
    S(l.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),
    S(d.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${d.rank}.`),
    Et('conv1d', r, p),
    S(
      l.shape[2] === d.shape[1],
      () =>
        `Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${d.shape[1]}.`
    ),
    S(
      r1(a, s),
      () =>
        `Error in conv1D: Either stride or dilation must be 1. Got stride ${a} and dilation '${s}'`
    ),
    S(
      n === 'NWC',
      () => `Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`
    );
  let u = U(d, [1, d.shape[0], d.shape[1], d.shape[2]]),
    f = U(l, [l.shape[0], 1, l.shape[1], l.shape[2]]),
    T = hr(f, u, [1, a], r, 'NHWC', [1, s], p);
  return m ? U(T, [T.shape[2], T.shape[3]]) : U(T, [T.shape[0], T.shape[2], T.shape[3]]);
}
var jm = x({ conv1d_: zm });
function Mm(e, t, a, r, n, s = 'NHWC', p) {
  S(
    e.length === t.rank,
    () => `Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`
  );
  let i = e,
    d = t,
    l = !1;
  t.rank === 3 &&
    ((l = !0), (d = U(t, [1, t.shape[0], t.shape[1], t.shape[2]])), (i = [1, e[0], e[1], e[2]])),
    S(
      i.length === 4,
      () => `Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`
    ),
    S(d.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${d.rank}`),
    S(a.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${a.rank}`);
  let m = s === 'NHWC' ? i[3] : i[1],
    u = s === 'NHWC' ? d.shape[3] : d.shape[1];
  S(
    m === a.shape[2],
    () =>
      `Error in conv2dDerInput: depth of input (${m}) must match input depth for filter ${a.shape[2]}.`
  ),
    S(
      u === a.shape[3],
      () =>
        `Error in conv2dDerInput: depth of output (${u}) must match output depth for filter ${a.shape[3]}.`
    ),
    Et('conv2dDerInput', n, p);
  let f = { dy: d, filter: a },
    g = { strides: r, pad: n, dataFormat: s, dimRoundingMode: p, inputShape: i },
    y = $.runKernel(I4, f, g);
  return l ? U(y, [y.shape[1], y.shape[2], y.shape[3]]) : y;
}
var Yi = x({ conv2DBackpropInput_: Mm });
function qm(e, t, a, r, n, s) {
  let p = b(e, 'x', 'conv2dTranspose'),
    i = b(t, 'filter', 'conv2dTranspose');
  return Yi(a, p, i, r, n, 'NHWC', s);
}
var Hm = x({ conv2dTranspose_: qm });
function Wm(e, t, a, r, n = 'NDHWC', s = [1, 1, 1]) {
  let p = b(e, 'x', 'conv3d'),
    i = b(t, 'filter', 'conv3d'),
    d = p,
    l = !1;
  p.rank === 4 && ((l = !0), (d = U(p, [1, p.shape[0], p.shape[1], p.shape[2], p.shape[3]]))),
    S(d.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${d.rank}.`),
    S(i.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),
    S(
      d.shape[4] === i.shape[3],
      () =>
        `Error in conv3d: depth of input (${d.shape[4]}) must match input depth for filter ${i.shape[3]}.`
    ),
    S(
      r1(a, s),
      () =>
        `Error in conv3D: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`
    ),
    S(
      n === 'NDHWC',
      () => `Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`
    );
  let m = { x: d, filter: i },
    u = { strides: a, pad: r, dataFormat: n, dilations: s },
    f = $.runKernel(O4, m, u);
  return l ? U(f, [f.shape[1], f.shape[2], f.shape[3], f.shape[4]]) : f;
}
var Km = x({ conv3d_: Wm });
function Gm(e, t, a, r, n) {
  S(
    e.length === t.rank,
    () => `Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`
  );
  let s = e,
    p = t,
    i = !1;
  t.rank === 4 &&
    ((i = !0),
    (p = U(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])),
    (s = [1, e[0], e[1], e[2], e[3]]));
  let d = s[4],
    l = p.shape[4];
  S(
    s.length === 5,
    () => `Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`
  ),
    S(p.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${p.rank}`),
    S(a.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${a.rank}`),
    S(
      d === a.shape[3],
      () =>
        `Error in conv3dDerInput: depth of input (${d}) must match input depth for filter ${a.shape[3]}.`
    ),
    S(
      l === a.shape[4],
      () =>
        `Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${a.shape[4]}.`
    );
  let m = { dy: p, filter: a },
    u = { pad: n, strides: r, inputShape: s },
    f = $.runKernel(V4, m, u);
  return i ? U(f, [f.shape[1], f.shape[2], f.shape[3], f.shape[4]]) : f;
}
var Xm = x({ conv3DBackpropInput_: Gm });
function Ym(e, t, a, r, n) {
  let s = b(e, 'x', 'conv3dTranspose'),
    p = b(t, 'filter', 'conv3dTranspose');
  return Xm(a, s, p, r, n);
}
var xh = x({ conv3dTranspose_: Ym });
function Jm(e) {
  let a = { x: b(e, 'x', 'cos', 'float32') };
  return $.runKernel(C4, a);
}
var Zm = x({ cos_: Jm });
function Qm(e) {
  let a = { x: b(e, 'x', 'cosh', 'float32') };
  return $.runKernel(F4, a);
}
var eu = x({ cosh_: Qm });
function tu(e, t = 0, a = !1, r = !1) {
  let s = { x: b(e, 'x', 'cumprod') },
    p = { axis: t, exclusive: a, reverse: r };
  return $.runKernel(B4, s, p);
}
var au = x({ cumprod_: tu });
function ru(e, t = 0, a = !1, r = !1) {
  let s = { x: b(e, 'x', 'cumsum') },
    p = { axis: t, exclusive: a, reverse: r };
  return $.runKernel(P4, s, p);
}
var nu = x({ cumsum_: ru });
function su(e, t, a, r = !1) {
  let n = b(e, 'x', 'denseBincount'),
    s = b(t, 'weights', 'denseBincount');
  S(
    n.dtype === 'int32',
    () => `Error in denseBincount: input dtype must be int32, but got ${n.dtype}`
  ),
    S(
      n.rank <= 2,
      () => `Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`
    ),
    S(a >= 0, () => `size must be non-negative, but got ${a}.`),
    S(
      s.size === n.size || s.size === 0,
      () =>
        `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`
    );
  let p = { x: n, weights: s },
    i = { size: a, binaryOutput: r };
  return $.runKernel(L4, p, i);
}
var pu = x({ denseBincount_: su });
function iu(e, t, a = 'NHWC') {
  let r = b(e, 'x', 'depthToSpace', 'float32'),
    n = a === 'NHWC' ? r.shape[1] : r.shape[2],
    s = a === 'NHWC' ? r.shape[2] : r.shape[3],
    p = a === 'NHWC' ? r.shape[3] : r.shape[1];
  S(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`),
    S(
      n * t >= 0,
      () => `Negative dimension size caused by overflow when multiplying
    ${n} and ${t}  for depthToSpace with input shape
    ${r.shape}`
    ),
    S(
      s * t >= 0,
      () => `Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${r.shape}`
    ),
    S(
      p % (t * t) == 0,
      () =>
        `Dimension size must be evenly divisible by ${
          t * t
        } but is ${p} for depthToSpace with input shape ${r.shape}`
    );
  let i = { x: r },
    d = { blockSize: t, dataFormat: a };
  return $.runKernel(U4, i, d);
}
var ou = x({ depthToSpace_: iu });
function du(e, t, a, r, n = 'NHWC', s = [1, 1], p) {
  let i = b(e, 'x', 'depthwiseConv2d', 'float32'),
    d = b(t, 'filter', 'depthwiseConv2d', 'float32'),
    l = i,
    m = !1;
  i.rank === 3 && ((m = !0), (l = U(i, [1, i.shape[0], i.shape[1], i.shape[2]]))),
    S(
      l.rank === 4,
      () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`
    ),
    S(
      d.rank === 4,
      () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`
    ),
    S(
      l.shape[3] === d.shape[2],
      () =>
        `Error in depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`
    ),
    Et('depthwiseConv2d', r, p);
  let u = { x: l, filter: d },
    f = { strides: a, pad: r, dataFormat: n, dilations: s, dimRoundingMode: p },
    g = $.runKernel(z4, u, f);
  return m ? U(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
var Bn = x({ depthwiseConv2d_: du });
function lu(e) {
  let a = { x: b(e, 'x', 'diag') };
  return $.runKernel(q4, a);
}
var Ah = x({ diag_: lu });
function mu(e, t, a, r, n = [1, 1], s = 'NHWC') {
  let p = b(e, 'x', 'dilation2d'),
    i = b(t, 'filter', 'dilation2d');
  S(
    p.rank === 3 || p.rank === 4,
    () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${p.rank}.`
  ),
    S(i.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),
    S(
      s === 'NHWC',
      () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`
    );
  let d = p,
    l = !1;
  p.rank === 3 && ((d = U(p, [1, p.shape[0], p.shape[1], p.shape[2]])), (l = !0));
  let m = { x: d, filter: i },
    u = { strides: a, pad: r, dilations: n },
    f = $.runKernel(H4, m, u);
  return l ? U(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var uu = x({ dilation2d_: mu });
function cu(e, t) {
  let a = b(e, 'a', 'equal', 'string_or_numeric'),
    r = b(t, 'b', 'equal', 'string_or_numeric');
  ([a, r] = $e(a, r)), ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(Y4, n);
}
var Ji = x({ equal_: cu });
function hu(e, t, a) {
  let r = b(t, 'a', 'where'),
    n = b(a, 'b', 'where'),
    s = b(e, 'condition', 'where', 'bool'),
    p = ze(ze(s.shape, r.shape), n.shape),
    i = cr(s, p),
    d = cr(r, p),
    l = cr(n, p),
    m = { condition: i, t: d, e: l };
  return $.runKernel(ol, m);
}
var R1 = x({ where_: hu });
function fu(e) {
  let a = { x: b(e, 'x', 'zerosLike') };
  return $.runKernel(Ll, a);
}
var ot = x({ zerosLike_: fu });
function vu(e, t) {
  let a = b(e, 'a', 'div'),
    r = b(t, 'b', 'div');
  [a, r] = $e(a, r);
  let n = ce(a, r),
    s = ot(n),
    p = Ji(r, s);
  return R1(p, s, n);
}
var gu = x({ divNoNan_: vu });
function yu(e, t) {
  let a = b(e, 't1', 'dot'),
    r = b(t, 't2', 'dot');
  S(
    (a.rank === 1 || a.rank === 2) && (r.rank === 1 || r.rank === 2),
    () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${a.rank} and ${r.rank}.`
  );
  let n = a.rank === 1 ? a.size : a.shape[1],
    s = r.rank === 1 ? r.size : r.shape[0];
  if (
    (S(
      n === s,
      () => `Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`
    ),
    a.rank === 1 && r.rank === 1)
  ) {
    let p = U(a, [1, -1]),
      i = U(r, [-1, 1]),
      d = Te(p, i);
    return U(d, []);
  } else if (a.rank === 1 && r.rank === 2) {
    let p = U(a, [1, -1]),
      i = U(r, [r.shape[0], r.shape[1]]),
      d = Te(p, i);
    return U(d, [d.size]);
  } else if (a.rank === 2 && r.rank === 1) {
    let p = U(r, [-1, 1]),
      i = Te(a, p);
    return U(i, [i.size]);
  } else {
    let p = U(r, [r.shape[0], r.shape[1]]);
    return Te(a, p);
  }
}
var kh = x({ dot_: yu });
function wu(e, ...t) {
  let a = t.map((n, s) => b(n, `tensors${s}`, 'einsum')),
    r = { equation: e };
  return $.runKernel(K4, a, r);
}
var bu = x({ einsum_: wu });
function Nu(e) {
  let a = { x: b(e, 'x', 'elu', 'float32') };
  return $.runKernel(G4, a);
}
var Zi = x({ elu_: Nu });
function _u(e) {
  let t = b(e, 'x', 'erf');
  S(
    t.dtype === 'int32' || t.dtype === 'float32',
    () => 'Input dtype must be `int32` or `float32`.'
  ),
    t.dtype === 'int32' && (t = we(t, 'float32'));
  let a = { x: t };
  return $.runKernel(X4, a);
}
var Su = x({ erf_: _u });
function Tu(e, t, a) {
  let r = e.length + t.length,
    n = [],
    s = 0,
    p = 0;
  for (let i = 0; i < r; i++) a.indexOf(i) === -1 ? n.push(e[s++]) : n.push(t[p++]);
  return n;
}
function fr(e, t) {
  let a = t.map((r) => 1);
  return Tu(e, a, t);
}
function Eu(e, t = null, a = !1) {
  let n = { x: b(e, 'x', 'max') },
    s = { reductionIndices: t, keepDims: a };
  return $.runKernel(E0, n, s);
}
var L1 = x({ max_: Eu });
function Du(e, t = null, a = !1) {
  let n = { x: b(e, 'x', 'min') },
    s = { axis: t, keepDims: a };
  return $.runKernel(I0, n, s);
}
var Pn = x({ min_: Du });
function xu(e, t) {
  let a = b(e, 'base', 'pow'),
    r = b(t, 'exp', 'pow');
  [a, r] = $e(a, r);
  let n = { a, b: r };
  return $.runKernel(W0, n);
}
var va = x({ pow_: xu });
function ue(e, t) {
  if (((St(e) && t !== 'string') || Array.isArray(e)) && t !== 'complex64')
    throw new Error(
      'Error creating a new Scalar: value must be a primitive (number|boolean|string)'
    );
  if (t === 'string' && St(e) && !(e instanceof Uint8Array))
    throw new Error('When making a scalar from encoded string, the value must be `Uint8Array`.');
  return ua(e, [], [], t);
}
function Au(e) {
  let a = { x: b(e, 'x', 'sqrt', 'float32') };
  return $.runKernel(vl, a);
}
var Ut = x({ sqrt_: Au });
function ku(e) {
  let t = b(e, 'x', 'square'),
    a = {};
  return $.runKernel('Square', { x: t }, a);
}
var Dt = x({ square_: ku });
function $u(e, t = null, a = !1) {
  let r = b(e, 'x', 'sum');
  r.dtype === 'bool' && (r = we(r, 'int32'));
  let n = { x: r },
    s = { axis: t, keepDims: a };
  return $.runKernel(gl, n, s);
}
var Ee = x({ sum_: $u });
function Iu(e, t = 'euclidean', a = null, r = !1) {
  e = b(e, 'x', 'norm');
  let n = Qi(e, t, a),
    s = n.shape;
  if (r) {
    let p = ra(a, e.shape);
    s = fr(n.shape, p);
  }
  return U(n, s);
}
function Qi(e, t, a = null) {
  if (e.rank === 0) return it(e);
  if (e.rank !== 1 && a === null) return Qi(U(e, [-1]), t, a);
  if (e.rank === 1 || typeof a == 'number' || (Array.isArray(a) && a.length === 1)) {
    if (t === 1) return Ee(it(e), a);
    if (t === 1 / 0) return L1(it(e), a);
    if (t === -1 / 0) return Pn(it(e), a);
    if (t === 'euclidean' || t === 2) return Ut(Ee(va(it(e), ue(2, 'int32')), a));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  if (Array.isArray(a) && a.length === 2) {
    if (t === 1) return L1(Ee(it(e), a[0]), a[1] - 1);
    if (t === 1 / 0) return L1(Ee(it(e), a[1]), a[0]);
    if (t === -1 / 0) return Pn(Ee(it(e), a[1]), a[0]);
    if (t === 'fro' || t === 'euclidean') return Ut(Ee(Dt(e), a));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  throw new Error(`Error in norm: invalid axis: ${a}`);
}
var Rn = x({ norm_: Iu });
function Ou(e, t = null, a = !1) {
  return Rn(e, 'euclidean', t, a);
}
var Vu = x({ euclideanNorm_: Ou });
function Cu(e) {
  let a = { x: b(e, 'x', 'exp') };
  return $.runKernel(J4, a);
}
var zt = x({ exp_: Cu });
function Fu(e, t = 0) {
  let a = b(e, 'x', 'expandDims', 'string_or_numeric');
  S(t <= a.rank, () => 'Axis must be <= rank of the tensor');
  let r = { input: a },
    n = { dim: t };
  return $.runKernel(Z4, r, n);
}
var jt = x({ expandDims_: Fu });
function Bu(e) {
  let a = { x: b(e, 'x', 'expm1') };
  return $.runKernel(Q4, a);
}
var Pu = x({ expm1_: Bu });
function Ru(e, t) {
  let a = b(e, 'x', 'tile', 'string_or_numeric');
  S(
    a.rank === t.length,
    () => `Error in transpose: rank of input ${a.rank} must match length of reps ${t}.`
  );
  let r = { x: a },
    n = { reps: t };
  return $.runKernel(si, r, n);
}
var ga = x({ tile_: Ru });
function Lu(e, t, a, r = 'float32') {
  t == null && (t = e);
  let n = a1([e, t], r),
    s = e <= t ? e : t;
  for (let i = 0; i < s; ++i) n.set(1, i, i);
  let p = U(n.toTensor(), [e, t]);
  if (a == null) return p;
  if (a.length === 1) return ga(jt(p, 0), [a[0], 1, 1]);
  if (a.length === 2) return ga(jt(jt(p, 0), 0), [a[0], a[1], 1, 1]);
  if (a.length === 3) return ga(jt(jt(jt(p, 0), 0), 0), [a[0], a[1], a[2], 1, 1]);
  throw new Error(
    `eye() currently supports only 1D and 2D batchShapes, but received ${a.length}D.`
  );
}
var Uu = x({ eye_: Lu });
function vr(e, t, a) {
  let r = { shape: e, value: t, dtype: a };
  return $.runKernel(t0, {}, r);
}
function zu(e) {
  let a = { x: b(e, 'x', 'floor', 'float32') };
  return $.runKernel(r0, a);
}
var e2 = x({ floor_: zu });
function ju(e, t, a = 0, r = 0) {
  let n = b(e, 'x', 'gather'),
    s = b(t, 'indices', 'gather', 'int32'),
    p = { x: n, indices: s },
    i = { axis: a, batchDims: r };
  return $.runKernel(p0, p, i);
}
var t2 = x({ gather_: ju });
function Mu(e, t) {
  let a = b(e, 'a', 'greater', 'string_or_numeric'),
    r = b(t, 'b', 'greater', 'string_or_numeric');
  ([a, r] = $e(a, r)), ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(o0, n);
}
var gr = x({ greater_: Mu });
function qu(e, t) {
  let a = b(e, 'a', 'greaterEqual', 'string_or_numeric'),
    r = b(t, 'b', 'greaterEqual', 'string_or_numeric');
  ([a, r] = $e(a, r)), ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(d0, n);
}
var a2 = x({ greaterEqual_: qu });
function Hu(e) {
  let a = { x: b(e, 'x', 'isFinite') };
  return $.runKernel(u0, a);
}
var $h = x({ isFinite_: Hu });
function Wu(e) {
  let a = { x: b(e, 'x', 'isInf') };
  return $.runKernel(c0, a);
}
var Ih = x({ isInf_: Wu });
function Ku(e) {
  let a = { x: b(e, 'x', 'isNaN') };
  return $.runKernel(h0, a);
}
var Gu = x({ isNaN_: Ku });
function Xu(e, t = 0.2) {
  let r = { x: b(e, 'x', 'leakyRelu') },
    n = { alpha: t };
  return $.runKernel(f0, r, n);
}
var r2 = x({ leakyRelu_: Xu });
function Yu(e, t) {
  let a = b(e, 'a', 'less', 'string_or_numeric'),
    r = b(t, 'b', 'less', 'string_or_numeric');
  ([a, r] = $e(a, r)), ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(v0, n);
}
var Ju = x({ less_: Yu });
function Zu(e, t) {
  let a = b(e, 'a', 'lessEqual', 'string_or_numeric'),
    r = b(t, 'b', 'lessEqual', 'string_or_numeric');
  ([a, r] = $e(a, r)), ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(g0, n);
}
var Ln = x({ lessEqual_: Zu });
function Qu(e, t, a) {
  if (a <= 0) throw new Error('The number of values should be positive.');
  let r = { start: e, stop: t, num: a };
  return $.runKernel(y0, {}, r);
}
function e9(e, t = 5, a = 1, r = 1, n = 0.5) {
  let s = b(e, 'x', 'localResponseNormalization');
  S(
    s.rank === 4 || s.rank === 3,
    () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`
  ),
    S(
      $1(t),
      () =>
        `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`
    );
  let p = s,
    i = !1;
  s.rank === 3 && ((i = !0), (p = U(s, [1, s.shape[0], s.shape[1], s.shape[2]])));
  let d = { x: p },
    l = { depthRadius: t, bias: a, alpha: r, beta: n },
    m = $.runKernel(T0, d, l);
  return i ? U(m, [m.shape[1], m.shape[2], m.shape[3]]) : m;
}
var t9 = x({ localResponseNormalization_: e9 });
function a9(e) {
  let a = { x: b(e, 'x', 'log', 'float32') };
  return $.runKernel(w0, a);
}
var ya = x({ log_: a9 });
function r9(e) {
  let a = { x: b(e, 'x', 'log1p') };
  return $.runKernel(b0, a);
}
var n2 = x({ log1p_: r9 });
function n9(e, t) {
  S(Za(e), () => 'The f passed in variableGrads(f) must be a function'),
    S(
      t == null || (Array.isArray(t) && t.every((l) => l instanceof nr)),
      () => 'The varList passed in variableGrads(f, varList) must be an array of variables'
    );
  let a = t != null;
  if (!a) {
    t = [];
    for (let l in $.registeredVariables) t.push($.registeredVariables[l]);
  }
  let r = a ? t.filter((l) => !l.trainable) : null,
    n = t.length;
  (t = t.filter((l) => l.trainable)),
    S(
      t.length > 0,
      () =>
        `variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`
    );
  let s = !0,
    { value: p, grads: i } = $.gradients(e, t, null, s);
  S(
    i.some((l) => l != null),
    () =>
      'Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().'
  ),
    S(
      p.rank === 0,
      () =>
        `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${p.rank} tensor`
    );
  let d = {};
  return (
    t.forEach((l, m) => {
      i[m] != null && (d[l.name] = i[m]);
    }),
    r != null && r.forEach((l) => (d[l.name] = null)),
    { value: p, grads: d }
  );
}
function Mt(e) {
  return $.customGrad(e);
}
function s9(e) {
  let a = { x: b(e, 'x', 'softplus') };
  return $.runKernel(fl, a);
}
var s2 = x({ softplus_: s9 });
function p9(e) {
  let t = b(e, 'x', 'logSigmoid');
  return Mt((r) => ({ value: Lt(s2(Lt(r))), gradFunc: (p) => K(p, b1(Lt(r))) }))(t);
}
var Oh = x({ logSigmoid_: p9 });
function i9(e, t) {
  let a = b(e, 'a', 'sub'),
    r = b(t, 'b', 'sub');
  [a, r] = $e(a, r);
  let n = { a, b: r };
  return $.runKernel(Il, n);
}
var le = x({ sub_: i9 });
function o9(e, t = -1) {
  let a = b(e, 'logits', 'logSoftmax');
  if ((t === -1 && (t = a.rank - 1), t !== a.rank - 1))
    throw Error(
      `Log Softmax along a non-last dimension is not yet supported. Logits was rank ${a.rank} and axis was ${t}`
    );
  return Mt((n, s) => {
    let p = !0,
      i = L1(n, t, !0),
      d = le(n, i),
      l = le(we(d, 'float32'), ya(Ee(zt(d), t, p)));
    return (
      s([l]),
      {
        value: l,
        gradFunc: (u, f) => {
          let [g] = f,
            y = !0,
            N = zt(g);
          return le(u, K(Ee(u, t, y), N));
        }
      }
    );
  })(a);
}
var d9 = x({ logSoftmax_: o9 });
function l9(e, t = null, a = !1) {
  let r = b(e, 'x', 'logSumExp'),
    n = ra(t, r.shape),
    s = L1(r, n, !0),
    p = le(r, s),
    i = zt(p),
    d = Ee(i, n),
    l = ya(d),
    m = ae(U(s, l.shape), l);
  if (a) {
    let u = fr(m.shape, n);
    return U(m, u);
  }
  return m;
}
var m9 = x({ logSumExp_: l9 });
function u9(e, t) {
  let a = b(e, 'a', 'logicalAnd', 'bool'),
    r = b(t, 'b', 'logicalAnd', 'bool');
  ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(N0, n);
}
var yr = x({ logicalAnd_: u9 });
function c9(e) {
  let a = { x: b(e, 'x', 'logicalNot', 'bool') };
  return $.runKernel(_0, a);
}
var p2 = x({ logicalNot_: c9 });
function h9(e, t) {
  let a = b(e, 'a', 'logicalOr', 'bool'),
    r = b(t, 'b', 'logicalOr', 'bool');
  ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(S0, n);
}
var i2 = x({ logicalOr_: h9 });
function f9(e, t) {
  let a = b(e, 'a', 'logicalXor', 'bool'),
    r = b(t, 'b', 'logicalXor', 'bool');
  return ze(a.shape, r.shape), yr(i2(e, t), p2(yr(e, t)));
}
var Vh = x({ logicalXor_: f9 }),
  wr = 2147483648;
function v9(e, t, a = 'left') {
  let r = b(e, 'sortedSequence', 'searchSorted'),
    n = b(t, 'values', 'searchSorted'),
    s = r.shape[r.shape.length - 1],
    p = n.shape[n.shape.length - 1],
    i = U(r, [-1, s]),
    d = U(n, [-1, p]);
  if (i.rank < 2) throw new Error('Sorted input argument must be at least 2-dimensional');
  if (i.shape[0] !== d.shape[0])
    throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
  if (Xe(d.shape) >= wr) throw new Error(`values tensor size must less than ${wr}`);
  if (i.shape[1] >= wr)
    throw new Error(
      `trailing dim_size must less than ${wr} for int32 output type, was ${i.shape[1]}`
    );
  let l = { sortedSequence: i, values: d },
    m = { side: a };
  return $.runKernel(il, l, m);
}
var o2 = x({ searchSorted_: v9 });
function g9(e, t) {
  return o2(e, t, 'left');
}
function y9(e, t, a, r, n) {
  let s = b(e, 'x', 'maxPool'),
    p = 1,
    i = s,
    d = !1;
  s.rank === 3 && ((d = !0), (i = U(s, [1, s.shape[0], s.shape[1], s.shape[2]]))),
    S(i.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),
    S(
      r1(a, p),
      () =>
        `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${p}'`
    ),
    Et('maxPool', r, n);
  let l = { x: i },
    m = { filterSize: t, strides: a, pad: r, dimRoundingMode: n },
    u = $.runKernel(x0, l, m);
  return d ? U(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var d2 = x({ maxPool_: y9 });
function w9(e, t = [1, 1, 1], a, r, n, s = 'NDHWC') {
  let p = b(e, 'x', 'maxPool3d'),
    i = p,
    d = !1;
  p.rank === 4 && ((d = !0), (i = U(p, [1, p.shape[0], p.shape[1], p.shape[2], p.shape[3]]))),
    S(i.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),
    S(
      s === 'NDHWC',
      () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`
    ),
    Et('maxPool3d', r, n);
  let l = { x: i },
    m = { filterSize: t, strides: a, pad: r, dimRoundingMode: n, dataFormat: s },
    u = $.runKernel(A0, l, m);
  return d ? U(u, [u.shape[1], u.shape[2], u.shape[3], u.shape[4]]) : u;
}
var b9 = x({ maxPool3d_: w9 });
function N9(e, t, a, r, n = !1) {
  let p = { x: b(e, 'x', 'maxPoolWithArgmax') },
    i = { filterSize: t, strides: a, pad: r, includeBatchInIndex: n },
    d = $.runKernel(k0, p, i);
  return { result: d[0], indexes: d[1] };
}
var _9 = x({ maxPoolWithArgmax_: N9 });
function S9(e, t) {
  let a = b(e, 'a', 'maximum'),
    r = b(t, 'b', 'maximum');
  ([a, r] = $e(a, r)),
    a.dtype === 'bool' && ((a = we(a, 'int32')), (r = we(r, 'int32'))),
    ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(D0, n);
}
var l2 = x({ maximum_: S9 });
function T9(e, t = null, a = !1) {
  let n = { x: b(e, 'x', 'mean') },
    s = { axis: t, keepDims: a };
  return $.runKernel($0, n, s);
}
var br = x({ mean_: T9 });
function U1(e, t = 'float32') {
  if (t === 'complex64') {
    let r = U1(e, 'float32'),
      n = U1(e, 'float32');
    return Qt(r, n);
  }
  let a = er(Xe(e), t);
  return $.makeTensor(a, e, t);
}
function Un(e, t = 'float32') {
  if (t === 'complex64') {
    let r = Un(e, 'float32'),
      n = U1(e, 'float32');
    return Qt(r, n);
  }
  let a = tn(Xe(e), t);
  return $.makeTensor(a, e, t);
}
function E9(e, t) {
  let a = b(e, 'a', 'minimum'),
    r = b(t, 'b', 'minimum');
  ([a, r] = $e(a, r)),
    a.dtype === 'bool' && ((a = we(a, 'int32')), (r = we(r, 'int32'))),
    ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(O0, n);
}
var m2 = x({ minimum_: E9 });
function D9(e, t, a) {
  S(
    a === 'reflect' || a === 'symmetric',
    () => `Invalid mode. Mode must be either reflect or symmetric. Got ${a}.`
  );
  let r = b(e, 'x', 'mirrorPad');
  if (r.rank === 0)
    throw new Error('mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad');
  S(t.length === r.rank, () => `Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`);
  let n = a === 'reflect' ? 1 : 0;
  for (let i = 0; i < r.rank; i++)
    S(t[i].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.'),
      S(
        t[i][0] >= 0 && t[i][0] <= r.shape[i] - n && t[i][1] >= 0 && t[i][1] <= r.shape[i] - n,
        () =>
          `Padding in dimension ${i} cannot be greater than or equal to ${
            r.shape[i] - n
          } or less than 0 for input of shape ${r.shape}`
      );
  let s = { paddings: t, mode: a },
    p = { x: r };
  return $.runKernel(V0, p, s);
}
var x9 = x({ mirrorPad_: D9 });
function A9(e, t) {
  let a = b(e, 'a', 'mod'),
    r = b(t, 'b', 'mod');
  [a, r] = $e(a, r);
  let n = { a, b: r };
  return $.runKernel(C0, n);
}
var k9 = x({ mod_: A9 });
function $9(e, t = null, a = !1) {
  e = b(e, 'x', 'moments');
  let r = ra(t, e.shape),
    n = br(e, r, a),
    s = n.shape;
  a || (s = fr(n.shape, r));
  let p = Dt(le(we(e, 'float32'), U(n, s))),
    i = br(p, r, a);
  return { mean: n, variance: i };
}
var Ch = x({ moments_: $9 });
function I9(e, t, a, r) {
  let n = b(t, 'data', 'multiRNNCell'),
    s = sr(a, 'c', 'multiRNNCell'),
    p = sr(r, 'h', 'multiRNNCell'),
    i = n,
    d = [];
  for (let u = 0; u < e.length; u++) {
    let f = e[u](i, s[u], p[u]);
    d.push(f[0]), d.push(f[1]), (i = f[1]);
  }
  let l = [],
    m = [];
  for (let u = 0; u < d.length; u += 2) l.push(d[u]), m.push(d[u + 1]);
  return [l, m];
}
var Fh = x({ multiRNNCell_: I9 });
function O9(e, t, a, r = !1) {
  let n = b(e, 'logits', 'multinomial'),
    s = n.size,
    p = n.rank;
  if (s < 2) throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);
  if (p > 2) throw new Error(`Rank of probabilities must be 1 or 2, but is ${p}`);
  a = a || Math.random();
  let d = { logits: p === 1 ? U(n, [1, -1]) : n },
    l = { numSamples: t, seed: a, normalized: r },
    m = $.runKernel(F0, d, l);
  return p === 1 ? U(m, [m.size]) : m;
}
var V9 = x({ multinomial_: O9 });
function C9(e, t) {
  let a = b(e, 'a', 'notEqual', 'string_or_numeric'),
    r = b(t, 'b', 'notEqual', 'string_or_numeric');
  ([a, r] = $e(a, r)), ze(a.shape, r.shape);
  let n = { a, b: r };
  return $.runKernel(R0, n);
}
var u2 = x({ notEqual_: C9 });
function F9(e) {
  let a = { x: b(e, 'x', 'onesLike') };
  return $.runKernel(j0, a);
}
var B9 = x({ onesLike_: F9 });
function P9(e, t) {
  let a = b(e, 'v1', 'outerProduct'),
    r = b(t, 'v2', 'outerProduct');
  S(
    a.rank === 1 && r.rank === 1,
    () => `Error in outerProduct: inputs must be rank 1, but got ranks ${a.rank} and ${r.rank}.`
  );
  let n = U(a, [-1, 1]),
    s = U(r, [1, -1]);
  return Te(n, s);
}
var Bh = x({ outerProduct_: P9 });
function R9(e, t, a = 0) {
  let r = b(e, 'x', 'pad');
  if (r.rank === 0) throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
  let n = { paddings: t, constantValue: a },
    s = { x: r };
  return $.runKernel(H0, s, n);
}
var wa = x({ pad_: R9 });
function L9(e, t, a = 0) {
  return S(t.length === 2, () => 'Invalid number of paddings. Must be length of 2.'), wa(e, [t], a);
}
var Ph = x({ pad1d_: L9 });
function U9(e, t, a = 0) {
  return (
    S(
      t.length === 2 && t[0].length === 2 && t[1].length === 2,
      () => 'Invalid number of paddings. Must be length of 2 each.'
    ),
    wa(e, t, a)
  );
}
var Rh = x({ pad2d_: U9 });
function z9(e, t, a = 0) {
  return (
    S(
      t.length === 3 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2,
      () => 'Invalid number of paddings. Must be length of 2 each.'
    ),
    wa(e, t, a)
  );
}
var Lh = x({ pad3d_: z9 });
function j9(e, t, a = 0) {
  return (
    S(
      t.length === 4 &&
        t[0].length === 2 &&
        t[1].length === 2 &&
        t[2].length === 2 &&
        t[3].length === 2,
      () => 'Invalid number of paddings. Must be length of 2 each.'
    ),
    wa(e, t, a)
  );
}
var Uh = x({ pad4d_: j9 });
function M9(e, t, a) {
  let r = b(e, 'x', 'spaceToBatchND');
  S(r.rank >= 1 + t.length, () => `input rank ${r.rank} should be > than [blockShape] ${t.length}`),
    S(
      a.length === t.length,
      () => `paddings.shape[0] ${a.length} must be equal to [blockShape] ${t.length}`
    ),
    S(
      r.shape.reduce(
        (p, i, d) =>
          d > 0 && d <= t.length ? p && (i + a[d - 1][0] + a[d - 1][1]) % t[d - 1] == 0 : p,
        !0
      ),
      () =>
        `input spatial dimensions ${r.shape.slice(
          1
        )} with paddings ${a.toString()} must be divisible by blockShapes ${t.toString()}`
    );
  let n = { x: r },
    s = { blockShape: t, paddings: a };
  return $.runKernel(yl, n, s);
}
var c2 = x({ spaceToBatchND_: M9 });
function q9(e, t, a, r, n, s, p) {
  n == null && (n = [1, 1]), s == null && (s = 1), r === 0 && (r = 'valid');
  let i = b(e, 'x', 'maxPool'),
    d = i,
    l = !1;
  i.rank === 3 && ((l = !0), (d = U(i, [1, i.shape[0], i.shape[1], i.shape[2]]))),
    S(
      r1(s, n),
      () =>
        `Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`
    );
  let m = lm(d.shape, t, s, n, r),
    u = [m.dilationHeight, m.dilationWidth],
    f;
  r === 'same'
    ? (f = W9([m.filterHeight, m.filterWidth], u))
    : (f = [
        [0, 0],
        [0, 0]
      ]);
  let g = u[0] === 1 && u[1] === 1,
    [y, N] = H9([m.inHeight, m.inWidth], u, f),
    T = g ? r : 'valid',
    O = g ? d : c2(d, u, y),
    M = (a === 'avg' ? () => Wi(O, t, s, T, p) : () => d2(O, t, s, T, p))(),
    C = g ? M : Ki(M, u, N);
  return l ? U(C, [C.shape[1], C.shape[2], C.shape[3]]) : C;
}
function H9(e, t, a) {
  let r = a.map((m) => m[0]),
    n = a.map((m) => m[1]),
    s = e.concat(r, n),
    p = t.map((m, u) => (m - (s[u] % m)) % m),
    i = n.map((m, u) => m + p[u]),
    d = t.map((m, u) => [r[u], i[u]]),
    l = t.map((m, u) => [0, p[u]]);
  return [d, l];
}
function W9(e, t) {
  let r = e.map((p, i) => p + (p - 1) * (t[i] - 1)).map((p) => p - 1),
    n = r.map((p) => Math.floor(p / 2)),
    s = r.map((p, i) => p - n[i]);
  return r.map((p, i) => [n[i], s[i]]);
}
var zh = x({ pool_: q9 });
function K9(e, t) {
  let a = b(e, 'x', 'prelu'),
    r = b(t, 'alpha', 'prelu'),
    n = { x: a, alpha: r };
  return $.runKernel(K0, n);
}
var h2 = x({ prelu_: K9 });
function G9(e, t = null, a = !1) {
  let r = b(e, 'x', 'prod');
  r.dtype === 'bool' && (r = we(r, 'int32'));
  let n = { x: r },
    s = { axis: t, keepDims: a };
  return $.runKernel(G0, n, s);
}
var f2 = x({ prod_: G9 });
function X9(e, t, a) {
  let r = Xe(e),
    n = null;
  if (a == null || a === 'float32') n = new Float32Array(r);
  else if (a === 'int32') n = new Int32Array(r);
  else if (a === 'bool') n = new Uint8Array(r);
  else throw new Error(`Unknown data type ${a}`);
  for (let s = 0; s < r; s++) n[s] = t();
  return $.makeTensor(n, e, a);
}
var jh = x({ rand_: X9 }),
  zn = Y1($d()),
  jn = class {
    constructor(e, t, a, r, n) {
      (this.mean = e),
        (this.stdDev = t),
        (this.dtype = a),
        (this.nextVal = NaN),
        (this.truncated = r),
        this.truncated &&
          ((this.upper = this.mean + this.stdDev * 2), (this.lower = this.mean - this.stdDev * 2));
      let s = n || Math.random();
      this.random = zn.alea(s.toString());
    }
    nextValue() {
      if (!isNaN(this.nextVal)) {
        let r = this.nextVal;
        return (this.nextVal = NaN), r;
      }
      let e,
        t,
        a = !1;
      for (; !a; ) {
        let r, n, s;
        do (r = 2 * this.random() - 1), (n = 2 * this.random() - 1), (s = r * r + n * n);
        while (s >= 1 || s === 0);
        let p = Math.sqrt((-2 * Math.log(s)) / s);
        (e = this.mean + this.stdDev * r * p),
          (t = this.mean + this.stdDev * n * p),
          (!this.truncated || this.isValidTruncated(e)) && (a = !0);
      }
      return (
        (!this.truncated || this.isValidTruncated(t)) && (this.nextVal = this.convertValue(t)),
        this.convertValue(e)
      );
    }
    convertValue(e) {
      return this.dtype == null || this.dtype === 'float32' ? e : Math.round(e);
    }
    isValidTruncated(e) {
      return e <= this.upper && e >= this.lower;
    }
  },
  Y9 = class {
    constructor(e, t, a, r) {
      (this.alpha = e), (this.beta = 1 / t), (this.dtype = a);
      let n = r || Math.random();
      (this.randu = zn.alea(n.toString())),
        (this.randn = new jn(0, 1, a, !1, this.randu())),
        e < 1 ? (this.d = e + 2 / 3) : (this.d = e - 1 / 3),
        (this.c = 1 / Math.sqrt(9 * this.d));
    }
    nextValue() {
      let e, t, a, r, n, s;
      for (;;) {
        do (r = this.randn.nextValue()), (s = 1 + this.c * r);
        while (s <= 0);
        if (
          ((s *= s * s),
          (e = r * r),
          (t = 1 - 0.331 * e * e),
          (a = 0.5 * e + this.d * (1 - s + Math.log(s))),
          (n = this.randu()),
          n < t || Math.log(n) < a)
        )
          break;
      }
      return (
        (s = (1 / this.beta) * this.d * s),
        this.alpha < 1 && (s *= Math.pow(this.randu(), 1 / this.alpha)),
        this.convertValue(s)
      );
    }
    convertValue(e) {
      return this.dtype === 'float32' ? e : Math.round(e);
    }
  },
  J9 = class {
    constructor(e = 0, t = 1, a, r) {
      if (
        ((this.canReturnFloat = () => this.dtype == null || this.dtype === 'float32'),
        (this.min = e),
        (this.range = t - e),
        (this.dtype = a),
        r == null && (r = Math.random()),
        typeof r == 'number' && (r = r.toString()),
        !this.canReturnFloat() && this.range <= 1)
      )
        throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);
      this.random = zn.alea(r);
    }
    convertValue(e) {
      return this.canReturnFloat() ? e : Math.round(e);
    }
    nextValue() {
      return this.convertValue(this.min + this.range * this.random());
    }
  };
function Z9(e, t, a = 1, r = 'float32', n) {
  if ((a == null && (a = 1), r == null && (r = 'float32'), r !== 'float32' && r !== 'int32'))
    throw new Error(`Unsupported data type ${r}`);
  let s = new Y9(t, a, r, n),
    p = a1(e, r);
  for (let i = 0; i < p.values.length; i++) p.values[i] = s.nextValue();
  return p.toTensor();
}
var Mh = x({ randomGamma_: Z9 });
function Q9(e, t = 0, a = 1, r, n) {
  if (r != null && r === 'bool') throw new Error(`Unsupported data type ${r}`);
  let s = new jn(t, a, r, !1, n),
    p = a1(e, r);
  for (let i = 0; i < p.values.length; i++) p.values[i] = s.nextValue();
  return p.toTensor();
}
var qh = x({ randomNormal_: Q9 });
function e5(e, t = 0, a = 1, r = 'float32', n) {
  let s = a1(e, r),
    p = new J9(t, a, null, n);
  for (let i = 0; i < s.values.length; i++) s.values[i] = p.nextValue();
  return s.toTensor();
}
var v2 = x({ randomUniform_: e5 });
function ba(e, t, a = 1, r = 'float32') {
  if (a === 0) throw new Error('Cannot have a step of zero');
  let n = { start: e, stop: t, step: a, dtype: r };
  return $.runKernel(X0, {}, n);
}
function t5(e) {
  let a = { x: b(e, 'x', 'reciprocal') };
  return $.runKernel(J0, a);
}
var a5 = x({ reciprocal_: t5 });
function r5(e) {
  let a = { x: b(e, 'x', 'relu') };
  return $.runKernel(Z0, a);
}
var Nr = x({ relu_: r5 });
function n5(e) {
  let a = { x: b(e, 'x', 'relu6') };
  return $.runKernel(al, a);
}
var g2 = x({ relu6_: n5 });
function s5(e, t) {
  let r = { x: b(e, 'x', 'reverse') },
    n = { dims: t };
  return $.runKernel(rl, r, n);
}
var n1 = x({ reverse_: s5 });
function p5(e) {
  let t = b(e, 'x', 'reverse');
  return (
    S(t.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`), n1(t, 0)
  );
}
var Hh = x({ reverse1d_: p5 });
function i5(e, t) {
  let a = b(e, 'x', 'reverse');
  return (
    S(a.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${a.rank}.`), n1(a, t)
  );
}
var Wh = x({ reverse2d_: i5 });
function o5(e, t) {
  let a = b(e, 'x', 'reverse');
  return (
    S(a.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${a.rank}.`), n1(a, t)
  );
}
var Kh = x({ reverse3d_: o5 });
function d5(e, t) {
  let a = b(e, 'x', 'reverse');
  return (
    S(a.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${a.rank}.`), n1(a, t)
  );
}
var Gh = x({ reverse4d_: d5 });
function l5(e) {
  let a = { x: b(e, 'x', 'round') };
  return $.runKernel(nl, a);
}
var y2 = x({ round_: l5 });
function m5(e) {
  let a = { x: b(e, 'x', 'rsqrt', 'float32') };
  return $.runKernel(sl, a);
}
var u5 = x({ rsqrt_: m5 });
function c5(e) {
  let a = { x: b(e, 'x', 'selu') };
  return $.runKernel(dl, a);
}
var h5 = x({ selu_: c5 });
function f5(e, t, a, r, n, s = [1, 1], p = 'NHWC') {
  let i = b(e, 'x', 'separableConv2d'),
    d = b(t, 'depthwiseFilter', 'separableConv2d'),
    l = b(a, 'pointwiseFilter', 'separableConv2d'),
    m = i,
    u = !1;
  if (
    (i.rank === 3 && ((u = !0), (m = U(i, [1, i.shape[0], i.shape[1], i.shape[2]]))), p === 'NCHW')
  )
    throw new Error(
      'separableConv2d currently does not support dataFormat NCHW; only NHWC is supported'
    );
  S(m.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${m.rank}.`),
    S(
      d.rank === 4,
      () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${d.rank}.`
    ),
    S(
      l.rank === 4,
      () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${d.rank}.`
    ),
    S(
      l.shape[0] === 1,
      () =>
        `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`
    ),
    S(
      l.shape[1] === 1,
      () =>
        `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`
    );
  let f = d.shape[2],
    g = d.shape[3];
  S(
    l.shape[2] === f * g,
    () =>
      `Error in separableConv2d: the third dimension of pointwise filter must be ${
        f * g
      }, but got ${l.shape[2]}.`
  );
  let y = Bn(m, d, r, n, p, s),
    T = hr(y, l, 1, 'valid', p);
  return u ? U(T, [T.shape[1], T.shape[2], T.shape[3]]) : T;
}
var Xh = x({ separableConv2d_: f5 });
async function v5(e, t) {
  let a = b(e, 'x', 'setdiff1d'),
    r = b(t, 'y', 'setdiff1d');
  S(
    a.dtype === r.dtype,
    () => `x and y should have the same dtype, but got x (${a.dtype}) and y (${r.dtype}).`
  ),
    S(a.rank === 1, () => `x should be 1D tensor, but got x (${a.shape}).`),
    S(r.rank === 1, () => `y should be 1D tensor, but got y (${r.shape}).`);
  let n = await a.data(),
    s = await r.data(),
    p = new Set(s),
    i = 0;
  for (let m = 0; m < n.length; m++) p.has(n[m]) || i++;
  let d = new cn([i], a.dtype),
    l = new cn([i], 'int32');
  for (let m = 0, u = 0; m < n.length; m++)
    p.has(n[m]) || ((d.values[u] = n[m]), (l.values[u] = m), u++);
  return [d.toTensor(), l.toTensor()];
}
var g5 = v5;
function y5(e) {
  let a = { x: b(e, 'x', 'sign') };
  return $.runKernel(cl, a);
}
var w5 = x({ sign_: y5 });
function b5(e) {
  let a = { x: b(e, 'x', 'sin', 'float32') };
  return $.runKernel(ml, a);
}
var N5 = x({ sin_: b5 });
function _5(e) {
  let a = { x: b(e, 'x', 'sinh') };
  return $.runKernel(ul, a);
}
var S5 = x({ sinh_: _5 });
function T5(e, t, a) {
  let r = b(e, 'x', 'slice1d');
  return (
    S(r.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),
    de(r, [t], [a])
  );
}
var Yh = x({ slice1d_: T5 });
function E5(e, t, a) {
  let r = b(e, 'x', 'slice2d');
  return (
    S(r.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),
    de(r, t, a)
  );
}
var Jh = x({ slice2d_: E5 });
function D5(e, t, a) {
  let r = b(e, 'x', 'slice3d');
  return (
    S(r.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),
    de(r, t, a)
  );
}
var Zh = x({ slice3d_: D5 });
function x5(e, t, a) {
  let r = b(e, 'x', 'slice4d');
  return (
    S(r.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),
    de(r, t, a)
  );
}
var Qh = x({ slice4d_: x5 });
function A5(e, t = -1) {
  let a = b(e, 'logits', 'softmax', 'float32');
  if ((t === -1 && (t = a.rank - 1), t !== a.rank - 1))
    throw Error(
      `Softmax along a non-last dimension is not yet supported. Logits was rank ${a.rank} and dim was ${t}`
    );
  let r = { logits: a },
    n = { dim: t };
  return $.runKernel(bl, r, n);
}
var k5 = x({ softmax_: A5 });
function $5(e) {
  S(
    e.dtype === 'complex64',
    () => `The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`
  );
  let t = { input: e };
  return $.runKernel(e0, t);
}
var w2 = x({ fft_: $5 });
function I5(e) {
  S(
    e.dtype === 'complex64',
    () => `The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`
  );
  let t = { input: e };
  return $.runKernel(l0, t);
}
var Mn = x({ ifft_: I5 });
function O5(e) {
  let t = e.shape[e.shape.length - 1],
    a = e.size / t,
    r;
  if (t <= 2) {
    let n = U(e, [a, t]);
    r = Mn(n);
  } else {
    let n = [a, 2 * (t - 1)],
      s = U(ha(e), [a, t]),
      p = U(or(e), [a, t]),
      i = n1(de(s, [0, 1], [a, t - 2]), 1),
      d = K(n1(de(p, [0, 1], [a, t - 2]), 1), ue(-1)),
      l = We([s, i], 1),
      m = We([p, d], 1),
      u = U(Qt(l, m), [n[0], n[1]]);
    r = Mn(u);
  }
  if (((r = ha(r)), e.rank === 3 && e.shape[0] !== 0)) {
    let n = r,
      s = e.shape[0];
    (r = U(r, [s, r.shape[0] / s, r.shape[1]])), n.dispose();
  }
  return r;
}
var V5 = x({ irfft_: O5 });
function C5(e, t, a = 0) {
  let n = { x: b(e, 'x', 'split') },
    s = { numOrSizeSplits: t, axis: a };
  return $.runKernel(wl, n, s);
}
var Na = x({ split_: C5 });
function F5(e, t) {
  S(e.dtype === 'float32', () => `The dtype for rfft() must be real value but got ${e.dtype}`);
  let a = e.shape[e.shape.length - 1],
    r = e.size / a,
    n;
  if (t != null && t < a) {
    let y = e.shape.map((T) => 0),
      N = e.shape.map((T) => T);
    (N[e.shape.length - 1] = t), (n = de(e, y, N)), (a = t);
  } else if (t != null && t > a) {
    let y = e.shape.map((N) => N);
    (y[e.shape.length - 1] = t - a), (n = We([e, U1(y)], e.shape.length - 1)), (a = t);
  } else n = e;
  let s = ot(n),
    p = U(Qt(n, s), [r, a]),
    i = w2(p),
    d = Math.floor(a / 2) + 1,
    l = ha(i),
    m = or(i),
    u = Na(l, [d, a - d], l.shape.length - 1),
    f = Na(m, [d, a - d], m.shape.length - 1),
    g = n.shape.slice();
  return (g[n.shape.length - 1] = d), U(Qt(u[0], f[0]), g);
}
var b2 = x({ rfft_: F5 });
function B5(e, t) {
  let a = b(e, 'a', 'squaredDifference'),
    r = b(t, 'b', 'squaredDifference');
  ([a, r] = $e(a, r)), ze(a.shape, r.shape);
  let n = { a, b: r },
    s = {};
  return $.runKernel(Dl, n, s);
}
var N2 = x({ squaredDifference_: B5 });
function P5(e, t) {
  let a = b(e, 'x', 'squeeze');
  return U(a, Hp(a.shape, t).newShape);
}
var je = x({ squeeze_: P5 });
function R5(e, t = 0) {
  let a = sr(e, 'tensors', 'stack', 'string_or_numeric');
  S(a.length >= 1, () => 'Pass at least one tensor to tf.stack'),
    a.length > 0 && S(t <= a[0].rank, () => 'Axis must be <= rank of the tensor');
  let r = a,
    n = { axis: t };
  return $.runKernel(q0, r, n);
}
var qt = x({ stack_: R5 });
function L5(e, t = 0) {
  let r = { x: b(e, 'x', 'step') },
    n = { alpha: t };
  return $.runKernel(Ul, r, n);
}
var U5 = x({ step_: L5 });
function z5(e, t, a, r, n = 0, s = 0, p = 0, i = 0, d = 0) {
  let m = { x: b(e, 'x', 'stridedSlice', 'string_or_numeric') },
    u = {
      begin: t,
      end: a,
      strides: r,
      beginMask: n,
      endMask: s,
      ellipsisMask: p,
      newAxisMask: i,
      shrinkAxisMask: d
    };
  return $.runKernel(xl, m, u);
}
var j5 = x({ stridedSlice_: z5 });
function M5(e) {
  let a = { x: b(e, 'x', 'tan', 'float32') };
  return $.runKernel(Ol, a);
}
var q5 = x({ tan_: M5 });
function Ye(e, t) {
  Xa(e);
  let a = ma(e, t);
  if (a.length !== 1) throw new Error('tensor1d() requires values to be a flat/TypedArray');
  return ua(e, null, a, t);
}
function z1(e, t, a) {
  if ((Xa(e), t != null && t.length !== 2))
    throw new Error('tensor2d() requires shape to have two numbers');
  let r = ma(e, a);
  if (r.length !== 2 && r.length !== 1)
    throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');
  if (r.length === 1 && t == null)
    throw new Error('tensor2d() requires shape to be provided when `values` are a flat/TypedArray');
  return ua(e, t, r, a);
}
function H5(e, t = 1, a = !0) {
  let r = b(e, 'x', 'topk');
  if (r.rank === 0) throw new Error('topk() expects the input to be of rank 1 or higher');
  let n = r.shape[r.shape.length - 1];
  if (t < 0) throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);
  if (t > n)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${t}`);
  let s = { x: r },
    p = { k: t, sorted: a },
    [i, d] = $.runKernel(Cl, s, p);
  return { values: i, indices: d };
}
var W5 = x({ topk_: H5 });
function K5(e, t = 0, a = 1, r, n) {
  if (r != null && r === 'bool') throw new Error('Unsupported data type $ { dtype }');
  let s = new jn(t, a, r, !0, n),
    p = a1(e, r);
  for (let i = 0; i < p.values.length; i++) p.values[i] = s.nextValue();
  return p.toTensor();
}
var G5 = x({ truncatedNormal_: K5 });
function X5(e, t = 0) {
  let a = b(e, 'x', 'unique', 'string_or_numeric');
  S(a.rank > 0, () => 'The input tensor must be at least 1D');
  let r = { x: a },
    n = { axis: t },
    [s, p] = $.runKernel(Bl, r, n);
  return { values: s, indices: p };
}
var _2 = x({ unique_: X5 });
function Y5(e, t, a) {
  let r = b(e, 'x', 'unsortedSegmentSum'),
    n = b(t, 'segmentIds', 'unsortedSegmentSum', 'int32');
  S($1(a), () => 'numSegments must be of dtype int');
  let s = { x: r, segmentIds: n },
    p = { numSegments: a };
  return $.runKernel(Rl, s, p);
}
var ef = x({ unsortedSegmentSum_: Y5 });
function J5(e, t = 0) {
  let a = b(e, 'x', 'unstack', 'string_or_numeric');
  S(
    t >= -a.shape.length && t < a.shape.length,
    () => `Axis = ${t} is not in [-${a.shape.length}, ${a.shape.length})`
  );
  let r = { value: a },
    n = { axis: t };
  return $.runKernel(Pl, r, n);
}
var N1 = x({ unstack_: J5 });
function Z5(e, t) {
  return o2(e, t, 'right');
}
function Q5(e, t) {
  let a = [];
  for (let s = 0; s < t.length; s++) t[s] && a.push(s);
  let r = a1(e, 'int32'),
    n = a1([a.length, e.length], 'int32');
  for (let s = 0; s < a.length; s++) {
    let p = r.indexToLoc(a[s]),
      i = s * e.length;
    n.values.set(p, i);
  }
  return n.toTensor();
}
async function e8(e) {
  let t = b(e, 'condition', 'whereAsync', 'bool'),
    a = await t.data(),
    r = Q5(t.shape, a);
  return e !== t && t.dispose(), r;
}
var t8 = e8;
function a8(e, t, a, r, n = !0) {
  let s = b(e, 'v', 'movingAverage'),
    p = b(t, 'x', 'movingAverage'),
    i = b(a, 'decay', 'movingAverage');
  u6(s, p), S(m1(s.shape, p.shape), () => 'Shape mismatch in v and x');
  let d = ue(1),
    l = le(d, i),
    m = K(le(p, s), l);
  if (n) {
    S(r != null, () => 'When using zeroDebias: true, step is required.');
    let u = b(r, 'step', 'movingAverage');
    m = ce(m, le(d, va(i, u)));
  }
  return ae(s, m);
}
var tf = x({ movingAverage_: a8 });
function r8(e, t, a) {
  let r = b(e, 'indices', 'scatterND', 'int32'),
    n = b(t, 'updates', 'scatterND');
  V3(n, r, a);
  let s = { indices: r, updates: n },
    p = { shape: a };
  return $.runKernel(pl, s, p);
}
var n8 = x({ scatterND_: r8 });
function s8(e, t, a, r) {
  if (e.dtype !== 'int32')
    throw new Error(
      `tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`
    );
  if (e.rank > 2)
    throw new Error(
      `sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`
    );
  let n = e.rank > 0 ? e.shape[0] : 1,
    s = e.rank > 1 ? e.shape[1] : 1;
  if (a.length !== s)
    throw new Error(`outputShape has incorrect number of elements:, ${a.length}, should be: ${s}.`);
  let p = t.size;
  if (!(t.rank === 0 || (t.rank === 1 && p === n)))
    throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${n}]`);
  if (t.dtype !== r.dtype) throw new Error('sparseValues.dtype must match defaultValues.dtype');
}
function p8(e, t, a, r = 0) {
  let n = b(e, 'sparseIndices', 'sparseToDense', 'int32'),
    s = b(t, 'sparseValues', 'sparseToDense', 'string_or_numeric'),
    p = b(r, 'defaultValue', 'sparseToDense', s.dtype);
  s8(n, s, a, p);
  let i = { sparseIndices: n, sparseValues: s, defaultValue: p },
    d = { outputShape: a };
  return $.runKernel(El, i, d);
}
var S2 = x({ sparseToDense_: p8 });
function i8(e, t) {
  let a = b(t, 'indices', 'gatherND', 'int32'),
    n = { params: b(e, 'x', 'gatherND', 'string_or_numeric'), indices: a };
  return $.runKernel(i0, n);
}
var o8 = x({ gatherND_: i8 });
function d8(e, t) {
  if (t == null) return e.shape.slice();
  if (m1(e.shape, t)) return t;
  if (e.shape.length === t.length) {
    let a = [];
    for (let r = 0; r < e.shape.length; r++)
      t[r] == null && e.shape[r] != null ? a.push(e.shape[r]) : a.push(t[r]);
    return a;
  }
  return t;
}
function l8(e, t, a, r) {
  let n = b(e, 'x', 'dropout');
  if (
    (S(
      n.dtype === 'float32',
      () =>
        `x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`
    ),
    S(t >= 0 && t < 1, () => `rate must be a float in the range [0, 1), but got ${t}.`),
    t === 0)
  )
    return e instanceof He ? n.clone() : n;
  let s = d8(n, a),
    p = 1 - t,
    i = ce(e2(ae(v2(s, 0, 1, 'float32', r), p)), p);
  return K(n, i);
}
var af = x({ dropout_: l8 });
function m8(e) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(e) / Math.log(2))));
}
function T2(e, t, a) {
  let r = 1 - (e % 2),
    n = new Float32Array(e);
  for (let s = 0; s < e; ++s) {
    let p = (2 * Math.PI * s) / (e + r - 1);
    n[s] = t - a * Math.cos(p);
  }
  return Ye(n, 'float32');
}
var _r = {};
be(_r, { conv2d: () => f8, depthwiseConv2d: () => N8, matMul: () => S8 });
function u8(e, t, a, r, n, s = 'NHWC', p) {
  let i = e;
  e.rank === 3 && (i = U(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  let d = t;
  d.rank === 3 && (d = U(t, [1, t.shape[0], t.shape[1], t.shape[2]])),
    S(
      i.rank === 4,
      () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`
    ),
    S(d.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${d.shape}.`),
    S(
      a.length === 4,
      () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${a}.`
    );
  let l = s === 'NHWC' ? i.shape[3] : i.shape[1],
    m = s === 'NHWC' ? d.shape[3] : d.shape[1];
  S(
    l === a[2],
    () =>
      `Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${a[2]}.`
  ),
    S(
      m === a[3],
      () =>
        `Error in conv2dDerFilter: depth of dy (${m}) must match output depth for filter (${a[3]}).`
    ),
    Et('conv2dDerFilter', n, p);
  let u = { x: i, dy: d },
    f = { strides: r, pad: n, dataFormat: s, dimRoundingMode: p, filterShape: a };
  return $.runKernel($4, u, f);
}
var c8 = x({ conv2DBackpropFilter_: u8 });
function qn(e, t, a) {
  if (a == null || a === 'linear') return e;
  if (a === 'relu') return K(e, U5(t));
  throw new Error(`Cannot compute gradient for fused activation ${a}.`);
}
function Hn(e, t) {
  let a = t,
    r = S3(e.shape, t.shape);
  return r.length > 0 && (a = Ee(a, r)), U(a, e.shape);
}
function Wn(e, t, a, r) {
  if (t === 'linear') return e;
  if (t === 'relu') return Nr(e);
  if (t === 'elu') return Zi(e);
  if (t === 'relu6') return g2(e);
  if (t === 'prelu') return h2(e, a);
  if (t === 'leakyrelu') return r2(e, r);
  if (t === 'sigmoid') return b1(e);
  throw new Error(`Unknown fused activation ${t}.`);
}
var Kn = (e, t) => !(e > 0) || t === 'linear';
function h8({
  x: e,
  filter: t,
  strides: a,
  pad: r,
  dataFormat: n = 'NHWC',
  dilations: s = [1, 1],
  dimRoundingMode: p,
  bias: i,
  activation: d = 'linear',
  preluActivationWeights: l,
  leakyreluAlpha: m
}) {
  if (((d = d || 'linear'), Kn($.state.gradientDepth, d) === !1)) {
    S(
      n === 'NHWC',
      () =>
        `Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`
    );
    let z = hr(e, t, a, r, n, s, p);
    return i != null && (z = ae(z, i)), Wn(z, d, l, m);
  }
  let u = b(e, 'x', 'conv2d', 'float32'),
    f = b(t, 'filter', 'conv2d', 'float32'),
    g = u,
    y = !1;
  u.rank === 3 && ((y = !0), (g = U(u, [1, u.shape[0], u.shape[1], u.shape[2]]))),
    S(g.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${g.rank}.`),
    S(f.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${f.rank}.`),
    Et('fused conv2d', r, p);
  let N = n === 'NHWC' ? g.shape[3] : g.shape[1];
  S(
    f.shape[2] === N,
    () => `Error in conv2d: depth of input (${N}) must match input depth for filter ${f.shape[2]}.`
  ),
    S(
      r1(a, s),
      () =>
        `Error in conv2D: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`
    );
  let T = Vn(g.shape, f.shape, a, s, r, p),
    O;
  i != null &&
    ((O = b(i, 'bias', 'fused conv2d')),
    ([O] = $e(O, u)),
    n === 'NHWC'
      ? ze(T.outShape, O.shape)
      : (S(
          O.shape.length <= 1,
          () =>
            `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${O.shape.length}.`
        ),
        S(
          O.shape.length === 0 || O.shape[0] === T.outChannels || O.shape[0] === 1,
          () =>
            `Error in fused conv2d: bias shape (${O.shape}) is not compatible with the number of output channels (${T.outChannels})`
        )));
  let B;
  if (l != null) {
    let z = l.shape;
    if (
      (S(
        z.length <= 1 || z.length === 3,
        () =>
          `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${z.length}.`
      ),
      z.length === 1)
    )
      S(
        z[0] === 1 || z[0] === T.outChannels,
        () =>
          `Error in fused conv2d: PReLU activation weights (${z}) is not compatible with the number of output channels (${T.outChannels}).`
      );
    else if (z.length === 3)
      try {
        ze(z, T.outShape);
      } catch {
        let Y = `Error in fused conv2d: PReLU activation weights (${z}) is not compatible with the output shape of the conv2d (${T.outShape}).`;
        throw Error(Y);
      }
    B = b(l, 'prelu weights', 'fused conv2d');
  }
  let M = (z, X) => {
      S(
        n === 'NHWC',
        () =>
          `Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`
      );
      let [Y, J, Z, F] = X,
        R = qn(z, Z, d);
      S(
        ur(s),
        () =>
          `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`
      );
      let _ = Yi(J.shape, R, Y, a, r),
        q = c8(J, R, Y.shape, a, r),
        G = [_, q];
      if (F != null) {
        let ie = Hn(F, R);
        G.push(ie);
      }
      return G;
    },
    C = { x: g, filter: f, bias: O, preluActivationWeights: B },
    L = {
      strides: a,
      pad: r,
      dataFormat: n,
      dilations: s,
      dimRoundingMode: p,
      activation: d,
      leakyreluAlpha: m
    };
  return i == null
    ? Mt((X, Y, J) => {
        let Z = $.runKernel(oi, C, L);
        return (
          J([Y, X, Z]),
          y && (Z = U(Z, [Z.shape[1], Z.shape[2], Z.shape[3]])),
          { value: Z, gradFunc: M }
        );
      })(g, f)
    : Mt((X, Y, J, Z) => {
        let F = $.runKernel(oi, C, L);
        return (
          Z([Y, X, F, J]),
          y && (F = U(F, [F.shape[1], F.shape[2], F.shape[3]])),
          { value: F, gradFunc: M }
        );
      })(g, f, O);
}
var f8 = x({ fusedConv2d_: h8 });
function v8(e, t, a, r, n, s = [1, 1], p) {
  let i = e;
  e.rank === 3 && (i = U(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  let d = t;
  d.rank === 3 && (d = U(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  let l = { x: i, dy: d },
    m = { strides: r, pad: n, dimRoundingMode: p, dilations: s, filterShape: a };
  return $.runKernel(j4, l, m);
}
var g8 = x({ depthwiseConv2dNativeBackpropFilter_: v8 });
function y8(e, t, a, r, n, s = [1, 1], p) {
  let i = t,
    d = !1;
  t.rank === 3 && ((d = !0), (i = U(t, [1, t.shape[0], t.shape[1], t.shape[2]])));
  let l = { dy: i, filter: a },
    m = { strides: r, pad: n, dimRoundingMode: p, dilations: s, inputShape: e },
    u = $.runKernel(M4, l, m);
  return d ? U(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var w8 = x({ depthwiseConv2dNativeBackpropInput_: y8 });
function b8({
  x: e,
  filter: t,
  strides: a,
  pad: r,
  dataFormat: n = 'NHWC',
  dilations: s = [1, 1],
  dimRoundingMode: p,
  bias: i,
  activation: d = 'linear',
  preluActivationWeights: l,
  leakyreluAlpha: m
}) {
  if (Kn($.state.gradientDepth, d) === !1) {
    let L = Bn(e, t, a, r, n, s, p);
    return i != null && (L = ae(L, i)), Wn(L, d, l, m);
  }
  let u = b(e, 'x', 'depthwiseConv2d', 'float32'),
    f = b(t, 'filter', 'depthwiseConv2d', 'float32'),
    g = u,
    y = !1;
  u.rank === 3 && ((y = !0), (g = U(u, [1, u.shape[0], u.shape[1], u.shape[2]]))),
    S(
      g.rank === 4,
      () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${g.rank}.`
    ),
    S(
      f.rank === 4,
      () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`
    ),
    S(
      g.shape[3] === f.shape[2],
      () =>
        `Error in fused depthwiseConv2d: number of input channels (${g.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`
    ),
    s == null && (s = [1, 1]),
    S(
      r1(a, s),
      () =>
        `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`
    ),
    Et('fused depthwiseConv2d', r, p);
  let N = Vn(g.shape, f.shape, a, s, r, p, !0),
    T;
  i != null && ((T = b(i, 'bias', 'fused conv2d')), ([T] = $e(T, u)), ze(N.outShape, T.shape));
  let O;
  l != null && (O = b(l, 'prelu weights', 'fused depthwiseConv2d'));
  let B = (L, z) => {
      S(
        ur(s),
        () =>
          `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`
      );
      let [X, Y, J, Z] = z,
        F = qn(L, J, d),
        R = w8(Y.shape, F, X, a, r, s, p),
        _ = g8(Y, F, X.shape, a, r, s, p);
      if (Z != null) {
        let q = Hn(T, F);
        return [R, _, q];
      }
      return [R, _];
    },
    M = { x: g, filter: f, bias: T, preluActivationWeights: O },
    C = {
      strides: a,
      pad: r,
      dataFormat: n,
      dilations: s,
      dimRoundingMode: p,
      activation: d,
      leakyreluAlpha: m
    };
  return i == null
    ? Mt((z, X, Y) => {
        let J = $.runKernel(di, M, C);
        return (
          Y([X, z, J]),
          y && (J = U(J, [J.shape[1], J.shape[2], J.shape[3]])),
          { value: J, gradFunc: B }
        );
      })(g, f)
    : Mt((z, X, Y, J) => {
        let Z = $.runKernel(di, M, C);
        return (
          J([X, z, Z, Y]),
          y && (Z = U(Z, [Z.shape[1], Z.shape[2], Z.shape[3]])),
          { value: Z, gradFunc: B }
        );
      })(g, f, T);
}
var N8 = x({ fusedDepthwiseConv2d_: b8 });
function _8({
  a: e,
  b: t,
  transposeA: a = !1,
  transposeB: r = !1,
  bias: n,
  activation: s = 'linear',
  preluActivationWeights: p,
  leakyreluAlpha: i
}) {
  if (Kn($.state.gradientDepth, s) === !1) {
    let F = Te(e, t, a, r);
    return n != null && (F = ae(F, n)), Wn(F, s, p, i);
  }
  let d = b(e, 'a', 'fused matMul'),
    l = b(t, 'b', 'fused matMul');
  [d, l] = $e(d, l);
  let m = a ? d.shape[d.rank - 2] : d.shape[d.rank - 1],
    u = r ? l.shape[l.rank - 1] : l.shape[l.rank - 2],
    f = a ? d.shape[d.rank - 1] : d.shape[d.rank - 2],
    g = r ? l.shape[l.rank - 2] : l.shape[l.rank - 1],
    y = d.shape.slice(0, -2),
    N = l.shape.slice(0, -2),
    T = Xe(y),
    O = Xe(N);
  S(
    m === u,
    () =>
      `Error in fused matMul: inner shapes (${m}) and (${u}) of Tensors with shapes ${d.shape} and ${l.shape} and transposeA=${a} and transposeB=${r} must match.`
  );
  let M = ze(d.shape.slice(0, -2), l.shape.slice(0, -2)).concat([f, g]),
    C = a ? U(d, [T, m, f]) : U(d, [T, f, m]),
    L = r ? U(l, [O, g, u]) : U(l, [O, u, g]),
    z;
  n != null && ((z = b(n, 'bias', 'fused matMul')), ([z] = $e(z, d)), ze(M, z.shape));
  let X;
  p != null && (X = b(p, 'prelu weights', 'fused matMul'));
  let Y = (F, R) => {
      let [_, q, G, ie] = R,
        ne = qn(U(F, G.shape), G, s),
        ye,
        De;
      if (
        (!a && !r
          ? ((ye = Te(ne, q, !1, !0)), (De = Te(_, ne, !0, !1)))
          : !a && r
          ? ((ye = Te(ne, q, !1, !1)), (De = Te(ne, _, !0, !1)))
          : a && !r
          ? ((ye = Te(q, ne, !1, !0)), (De = Te(_, ne, !1, !1)))
          : ((ye = Te(q, ne, !0, !0)), (De = Te(ne, _, !0, !0))),
        n != null)
      ) {
        let Ce = Hn(ie, ne);
        return [ye, De, Ce];
      } else return [ye, De];
    },
    J = { a: C, b: L, bias: z, preluActivationWeights: X },
    Z = { transposeA: a, transposeB: r, activation: s, leakyreluAlpha: i };
  return n == null
    ? Mt((R, _, q) => {
        let G = $.runKernel(ii, J, Z);
        return q([R, _, G]), { value: U(G, M), gradFunc: Y };
      })(C, L)
    : Mt((R, _, q, G) => {
        let ie = $.runKernel(ii, J, Z);
        return G([R, _, ie, q]), { value: U(ie, M), gradFunc: Y };
      })(C, L, z);
}
var S8 = x({ fusedMatMul_: _8 });
function T8(e) {
  return T2(e, 0.54, 0.46);
}
var rf = x({ hammingWindow_: T8 });
function E8(e) {
  return T2(e, 0.5, 0.5);
}
var D8 = x({ hannWindow_: E8 });
function x8(e, t, a, r = !1, n = 0) {
  let s = 0,
    p = [];
  for (; s + t <= e.size; ) p.push(de(e, s, t)), (s += a);
  if (r)
    for (; s < e.size; ) {
      let i = s + t - e.size,
        d = We([de(e, s, t - i), vr([i], n)]);
      p.push(d), (s += a);
    }
  return p.length === 0 ? z1([], [0, t]) : U(We(p), [p.length, t]);
}
var A8 = x({ frame_: x8 });
function k8(e, t, a, r, n = D8) {
  r == null && (r = m8(t));
  let s = A8(e, t, a),
    p = K(s, n(t));
  return b2(p, r);
}
var nf = x({ stft_: k8 });
function $8(e, t, a, r, n = 'bilinear', s = 0) {
  let p = b(e, 'image', 'cropAndResize'),
    i = b(t, 'boxes', 'cropAndResize', 'float32'),
    d = b(a, 'boxInd', 'cropAndResize', 'int32'),
    l = i.shape[0];
  S(p.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${p.rank}.`),
    S(
      i.rank === 2 && i.shape[1] === 4,
      () => `Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`
    ),
    S(
      d.rank === 1 && d.shape[0] === l,
      () => `Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`
    ),
    S(
      r.length === 2,
      () => `Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`
    ),
    S(r[0] >= 1 && r[1] >= 1, () => `cropSize must be atleast [1,1], but was ${r}`),
    S(
      n === 'bilinear' || n === 'nearest',
      () => `method must be bilinear or nearest, but was ${n}`
    );
  let m = { image: p, boxes: i, boxInd: d },
    u = { method: n, extrapolationValue: s, cropSize: r };
  return $.runKernel(R4, m, u);
}
var I8 = x({ cropAndResize_: $8 });
function O8(e) {
  let t = b(e, 'image', 'flipLeftRight', 'float32');
  S(t.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);
  let a = { image: t };
  return $.runKernel(a0, a, {});
}
var V8 = x({ flipLeftRight_: O8 });
function C8(e) {
  let t = b(e, 'image', 'grayscaleToRGB'),
    a = t.rank - 1,
    r = t.shape[a];
  S(
    t.rank >= 2,
    () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`
  ),
    S(
      r === 1,
      () =>
        `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`
    );
  let n = new Array(t.rank);
  return n.fill(1, 0, a), (n[a] = 3), ga(t, n);
}
var F8 = x({ grayscaleToRGB_: C8 });
function B8(e, t, a = 0, r = 0.5) {
  let n = b(e, 'image', 'rotateWithOffset', 'float32');
  S(n.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);
  let s = { image: n },
    p = { radians: t, fillValue: a, center: r };
  return $.runKernel(zl, s, p);
}
var P8 = x({ rotateWithOffset_: B8 });
function j1(e, t, a, r, n, s) {
  r == null && (r = 0.5), n == null && (n = Number.NEGATIVE_INFINITY), s == null && (s = 0);
  let p = e.shape[0];
  return (
    (a = Math.min(a, p)),
    S(0 <= r && r <= 1, () => `iouThreshold must be in [0, 1], but was '${r}'`),
    S(e.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${e.rank}'`),
    S(e.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),
    S(t.rank === 1, () => 'scores must be a 1D tensor'),
    S(
      t.shape[0] === p,
      () => `scores has incompatible shape with boxes. Expected ${p}, but was ${t.shape[0]}`
    ),
    S(0 <= s && s <= 1, () => `softNmsSigma must be in [0, 1], but was '${s}'`),
    { maxOutputSize: a, iouThreshold: r, scoreThreshold: n, softNmsSigma: s }
  );
}
function R8(e, t, a, r = 0.5, n = Number.NEGATIVE_INFINITY) {
  let s = b(e, 'boxes', 'nonMaxSuppression', 'float32'),
    p = b(t, 'scores', 'nonMaxSuppression', 'float32'),
    i = j1(s, p, a, r, n);
  (a = i.maxOutputSize), (r = i.iouThreshold), (n = i.scoreThreshold);
  let d = { maxOutputSize: a, iouThreshold: r, scoreThreshold: n };
  return $.runKernel(L0, { boxes: s, scores: p }, d);
}
var L8 = x({ nonMaxSuppression_: R8 });
function U8(e, t, a) {
  let r = z8(e, t, a),
    n = r < 0 ? -(r + 1) : r;
  e.splice(n, 0, t);
}
function z8(e, t, a) {
  return M8(e, t, a || j8);
}
function j8(e, t) {
  return e > t ? 1 : e < t ? -1 : 0;
}
function M8(e, t, a) {
  let r = 0,
    n = e.length,
    s = 0,
    p = !1;
  for (; r < n; ) {
    s = r + ((n - r) >>> 1);
    let i = a(t, e[s]);
    i > 0 ? (r = s + 1) : ((n = s), (p = !i));
  }
  return p ? r : -r - 1;
}
function q8(e, t, a, r, n) {
  return Gn(e, t, a, r, n, 0);
}
function H8(e, t, a, r, n, s) {
  return Gn(e, t, a, r, n, 0, !1, s, !0);
}
function W8(e, t, a, r, n, s) {
  return Gn(e, t, a, r, n, s, !0);
}
function Gn(e, t, a, r, n, s, p = !1, i = !1, d = !1) {
  let l = [];
  for (let T = 0; T < t.length; T++)
    t[T] > n && l.push({ score: t[T], boxIndex: T, suppressBeginIndex: 0 });
  l.sort(E2);
  let m = s > 0 ? -0.5 / s : 0,
    u = [],
    f = [];
  for (; u.length < a && l.length > 0; ) {
    let T = l.pop(),
      { score: O, boxIndex: B, suppressBeginIndex: M } = T;
    if (O < n) break;
    let C = !1;
    for (let L = u.length - 1; L >= M; --L) {
      let z = K8(e, B, u[L]);
      if (z >= r) {
        C = !0;
        break;
      }
      if (((T.score = T.score * G8(r, m, z)), T.score <= n)) break;
    }
    (T.suppressBeginIndex = u.length),
      C || (T.score === O ? (u.push(B), f.push(T.score)) : T.score > n && U8(l, T, E2));
  }
  let g = u.length,
    y = a - g;
  i && y > 0 && (u.push(...new Array(y).fill(0)), f.push(...new Array(y).fill(0)));
  let N = { selectedIndices: u };
  return p && (N.selectedScores = f), d && (N.validOutputs = g), N;
}
function K8(e, t, a) {
  let r = e.subarray(t * 4, t * 4 + 4),
    n = e.subarray(a * 4, a * 4 + 4),
    s = Math.min(r[0], r[2]),
    p = Math.min(r[1], r[3]),
    i = Math.max(r[0], r[2]),
    d = Math.max(r[1], r[3]),
    l = Math.min(n[0], n[2]),
    m = Math.min(n[1], n[3]),
    u = Math.max(n[0], n[2]),
    f = Math.max(n[1], n[3]),
    g = (i - s) * (d - p),
    y = (u - l) * (f - m);
  if (g <= 0 || y <= 0) return 0;
  let N = Math.max(s, l),
    T = Math.max(p, m),
    O = Math.min(i, u),
    B = Math.min(d, f),
    M = Math.max(O - N, 0) * Math.max(B - T, 0);
  return M / (g + y - M);
}
function G8(e, t, a) {
  let r = Math.exp(t * a * a);
  return a <= e ? r : 0;
}
function E2(e, t) {
  return e.score - t.score || (e.score === t.score && t.boxIndex - e.boxIndex);
}
async function X8(e, t, a, r = 0.5, n = Number.NEGATIVE_INFINITY) {
  let s = b(e, 'boxes', 'nonMaxSuppressionAsync'),
    p = b(t, 'scores', 'nonMaxSuppressionAsync'),
    i = j1(s, p, a, r, n);
  (a = i.maxOutputSize), (r = i.iouThreshold), (n = i.scoreThreshold);
  let d = await Promise.all([s.data(), p.data()]),
    l = d[0],
    m = d[1],
    { selectedIndices: u } = q8(l, m, a, r, n);
  return s !== e && s.dispose(), p !== t && p.dispose(), Ye(u, 'int32');
}
var Y8 = X8;
function J8(e, t, a, r = 0.5, n = Number.NEGATIVE_INFINITY, s = 0) {
  let p = b(e, 'boxes', 'nonMaxSuppression'),
    i = b(t, 'scores', 'nonMaxSuppression'),
    d = j1(p, i, a, r, n, s);
  (a = d.maxOutputSize), (r = d.iouThreshold), (n = d.scoreThreshold), (s = d.softNmsSigma);
  let l = { boxes: p, scores: i },
    m = { maxOutputSize: a, iouThreshold: r, scoreThreshold: n, softNmsSigma: s },
    u = $.runKernel(z0, l, m);
  return { selectedIndices: u[0], selectedScores: u[1] };
}
var Z8 = x({ nonMaxSuppressionWithScore_: J8 });
async function Q8(e, t, a, r = 0.5, n = Number.NEGATIVE_INFINITY, s = 0) {
  let p = b(e, 'boxes', 'nonMaxSuppressionAsync'),
    i = b(t, 'scores', 'nonMaxSuppressionAsync'),
    d = j1(p, i, a, r, n, s);
  (a = d.maxOutputSize), (r = d.iouThreshold), (n = d.scoreThreshold), (s = d.softNmsSigma);
  let l = await Promise.all([p.data(), i.data()]),
    m = l[0],
    u = l[1],
    { selectedIndices: f, selectedScores: g } = W8(m, u, a, r, n, s);
  return (
    p !== e && p.dispose(),
    i !== t && i.dispose(),
    { selectedIndices: Ye(f, 'int32'), selectedScores: Ye(g) }
  );
}
var e7 = Q8;
function t7(e, t, a, r = 0.5, n = Number.NEGATIVE_INFINITY, s = !1) {
  let p = b(e, 'boxes', 'nonMaxSuppression'),
    i = b(t, 'scores', 'nonMaxSuppression'),
    d = j1(p, i, a, r, n, null),
    l = d.maxOutputSize,
    m = d.iouThreshold,
    u = d.scoreThreshold,
    f = { boxes: p, scores: i },
    g = { maxOutputSize: l, iouThreshold: m, scoreThreshold: u, padToMaxOutputSize: s },
    y = $.runKernel(U0, f, g);
  return { selectedIndices: y[0], validOutputs: y[1] };
}
var a7 = x({ nonMaxSuppressionPadded_: t7 });
async function r7(e, t, a, r = 0.5, n = Number.NEGATIVE_INFINITY, s = !1) {
  let p = b(e, 'boxes', 'nonMaxSuppressionAsync'),
    i = b(t, 'scores', 'nonMaxSuppressionAsync'),
    d = j1(p, i, a, r, n, null),
    l = d.maxOutputSize,
    m = d.iouThreshold,
    u = d.scoreThreshold,
    [f, g] = await Promise.all([p.data(), i.data()]),
    { selectedIndices: y, validOutputs: N } = H8(f, g, l, m, u, s);
  return (
    p !== e && p.dispose(),
    i !== t && i.dispose(),
    { selectedIndices: Ye(y, 'int32'), validOutputs: ue(N, 'int32') }
  );
}
var n7 = r7;
function s7(e, t, a = !1, r = !1) {
  let n = b(e, 'images', 'resizeBilinear');
  S(
    n.rank === 3 || n.rank === 4,
    () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`
  ),
    S(t.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),
    S(
      r === !1 || a === !1,
      () => 'Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.'
    );
  let s = n,
    p = !1;
  n.rank === 3 && ((p = !0), (s = U(n, [1, n.shape[0], n.shape[1], n.shape[2]])));
  let [] = t,
    i = { images: s },
    d = { alignCorners: a, halfPixelCenters: r, size: t },
    l = $.runKernel(tl, i, d);
  return p ? U(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var p7 = x({ resizeBilinear_: s7 });
function i7(e, t, a = !1, r = !1) {
  let n = b(e, 'images', 'resizeNearestNeighbor');
  S(
    n.rank === 3 || n.rank === 4,
    () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`
  ),
    S(
      t.length === 2,
      () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`
    ),
    S(
      n.dtype === 'float32' || n.dtype === 'int32',
      () => '`images` must have `int32` or `float32` as dtype'
    ),
    S(
      r === !1 || a === !1,
      () =>
        'Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.'
    );
  let s = n,
    p = !1;
  n.rank === 3 && ((p = !0), (s = U(n, [1, n.shape[0], n.shape[1], n.shape[2]])));
  let [] = t,
    i = { images: s },
    d = { alignCorners: a, halfPixelCenters: r, size: t },
    l = $.runKernel(el, i, d);
  return p ? U(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var o7 = x({ resizeNearestNeighbor_: i7 });
function d7(e, t = 'binary', a = !1, r = 0.5) {
  let n = b(e, 'image', 'threshold'),
    s = 0.2989,
    p = 0.587,
    i = 0.114,
    d = n.shape[0] * n.shape[1],
    l = K(Ye([r]), 255),
    m,
    u,
    f,
    g;
  if (
    (S(n.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${n.rank}.`),
    S(
      n.shape[2] === 3 || n.shape[2] === 1,
      () => `Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`
    ),
    S(
      n.dtype === 'int32' || n.dtype === 'float32',
      () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`
    ),
    S(t === 'otsu' || t === 'binary', () => `Method must be binary or otsu, but was ${t}`),
    n.shape[2] === 3)
  ) {
    [m, u, f] = Na(n, [1, 1, 1], -1);
    let T = K(m, s),
      O = K(u, p),
      B = K(f, i);
    g = ae(ae(T, O), B);
  } else g = e;
  if (t === 'otsu') {
    let T = Gi(we(y2(g), 'int32'), e1([]), 256);
    l = l7(T, d);
  }
  let y = a ? Ln(g, l) : gr(g, l);
  return we(K(y, 255), 'int32');
}
function l7(e, t) {
  let a = Ye([-1]),
    r = Ye([0]),
    n = Ye([0]),
    s,
    p,
    i,
    d,
    l,
    m;
  for (let u = 0; u < e.size - 1; u++) {
    (s = de(e, 0, u + 1)), (p = de(e, u + 1)), (l = ce(Ee(s), t)), (m = ce(Ee(p), t));
    let f = Ee(K(s, ba(0, s.size)));
    i = ce(f, Ee(s));
    let g = vr(p.shape, s.size),
      y = ae(ba(0, p.size), g),
      N = K(p, y);
    d = ce(Ee(N), Ee(p));
    let T = le(i, d),
      O = le(i, d),
      B = K(l, m);
    n = K(K(B, T), O);
    let M = gr(n, r);
    (r = R1(M, n, r)), (a = R1(M, Ye([u]), a));
  }
  return a;
}
var m7 = x({ threshold_: d7 });
function u7(e, t, a = 'nearest', r = 'constant', n = 0, s) {
  let p = b(e, 'image', 'transform', 'float32'),
    i = b(t, 'transforms', 'transform', 'float32');
  S(p.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${p.rank}.`),
    S(
      i.rank === 2 && (i.shape[0] === p.shape[0] || i.shape[0] === 1) && i.shape[1] === 8,
      () => 'Error in transform: Input transform should be batch x 8 or 1 x 8'
    ),
    S(
      s == null || s.length === 2,
      () => `Error in transform: outputShape must be [height, width] or null, but got ${s}.`
    );
  let d = { image: p, transforms: i },
    l = { interpolation: a, fillMode: r, fillValue: n, outputShape: s };
  return $.runKernel(Fl, d, l);
}
var c7 = x({ transform_: u7 });
function h7(e, t, a) {
  S(t % 1 == 0, () => `bandPart(): numLower must be an integer, got ${t}.`),
    S(a % 1 == 0, () => `bandPart(): numUpper must be an integer, got ${a}.`);
  let r = b(e, 'a', 'bandPart');
  S(r.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${r.rank}.`);
  let n = r.shape,
    [s, p] = r.shape.slice(-2);
  if (!(t <= s))
    throw new Error(
      `bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`
    );
  if (!(a <= p))
    throw new Error(
      `bandPart(): numUpper (${a}) must not be greater than the number of columns (${p}).`
    );
  t < 0 && (t = s), a < 0 && (a = p);
  let i = U(ba(0, s, 1, 'int32'), [-1, 1]),
    d = ba(0, p, 1, 'int32'),
    l = le(i, d),
    m = yr(Ln(l, ue(+t, 'int32')), a2(l, ue(-a, 'int32'))),
    u = U1([s, p], r.dtype);
  return U(qt(N1(U(r, [-1, s, p])).map((f) => R1(m, f, u))), n);
}
var sf = x({ bandPart_: h7 });
function f7(e) {
  let t;
  if (Array.isArray(e)) {
    (t = !1),
      S(
        e != null && e.length > 0,
        () => 'Gram-Schmidt process: input must not be null, undefined, or empty'
      );
    let n = e[0].shape[0];
    for (let s = 1; s < e.length; ++s)
      S(
        e[s].shape[0] === n,
        () =>
          `Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[s].shape[0]} vs. ${n})`
      );
  } else (t = !0), (e = Na(e, e.shape[0], 0).map((n) => je(n, [0])));
  S(
    e.length <= e[0].shape[0],
    () =>
      `Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`
  );
  let a = [],
    r = e;
  for (let n = 0; n < e.length; ++n)
    a.push(
      $.tidy(() => {
        let s = r[n];
        if (n > 0)
          for (let p = 0; p < n; ++p) {
            let i = K(Ee(K(a[p], s)), a[p]);
            s = le(s, i);
          }
        return ce(s, Rn(s, 'euclidean'));
      })
    );
  return t ? qt(a, 0) : a;
}
var pf = x({ gramSchmidt_: f7 });
function v7(e, t = !1) {
  if (
    (S(e.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),
    e.rank === 2)
  )
    return D2(e, t);
  {
    let a = e.shape.slice(0, e.shape.length - 2).reduce((d, l) => d * l),
      r = N1(U(e, [a, e.shape[e.shape.length - 2], e.shape[e.shape.length - 1]]), 0),
      n = [],
      s = [];
    r.forEach((d) => {
      let [l, m] = D2(d, t);
      n.push(l), s.push(m);
    });
    let p = U(qt(n, 0), e.shape),
      i = U(qt(s, 0), e.shape);
    return [p, i];
  }
}
function D2(e, t = !1) {
  return $.tidy(() => {
    S(
      e.shape.length === 2,
      () => `qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`
    );
    let a = e.shape[0],
      r = e.shape[1],
      n = Uu(a),
      s = g1(e),
      p = z1([[1]], [1, 1]),
      i = g1(p),
      d = a >= r ? r : a;
    for (let l = 0; l < d; ++l) {
      let m = s,
        u = i,
        f = n;
      ([i, s, n] = $.tidy(() => {
        let g = de(s, [l, l], [a - l, 1]),
          y = Rn(g),
          N = de(s, [l, l], [1, 1]),
          T = R1(gr(N, 0), z1([[-1]]), z1([[1]])),
          O = le(N, K(T, y)),
          B = ce(g, O);
        B.shape[0] === 1
          ? (i = g1(p))
          : (i = We([p, de(B, [1, 0], [B.shape[0] - 1, B.shape[1]])], 0));
        let M = Lt(ce(Te(T, O), y)),
          C = de(s, [l, 0], [a - l, r]),
          L = K(M, i),
          z = dr(i);
        if (l === 0) s = le(C, Te(L, Te(z, C)));
        else {
          let J = le(C, Te(L, Te(z, C)));
          s = We([de(s, [0, 0], [l, r]), J], 0);
        }
        let X = dr(L),
          Y = de(n, [0, l], [a, n.shape[1] - l]);
        if (l === 0) n = le(Y, Te(Te(Y, i), X));
        else {
          let J = le(Y, Te(Te(Y, i), X));
          n = We([de(n, [0, 0], [a, l]), J], 1);
        }
        return [i, s, n];
      })),
        Ue([m, u, f]);
    }
    return !t && a > r && ((n = de(n, [0, 0], [a, r])), (s = de(s, [0, 0], [r, r]))), [n, s];
  });
}
var of = x({ qr_: v7 }),
  et;
(function (e) {
  (e[(e.NONE = 0)] = 'NONE'),
    (e[(e.MEAN = 1)] = 'MEAN'),
    (e[(e.SUM = 2)] = 'SUM'),
    (e[(e.SUM_BY_NONZERO_WEIGHTS = 3)] = 'SUM_BY_NONZERO_WEIGHTS');
})(et || (et = {}));
function g7(e, t, a = et.SUM_BY_NONZERO_WEIGHTS) {
  let r = b(e, 'losses', 'computeWeightedLoss'),
    n = null;
  t != null && (n = b(t, 'weights', 'computeWeightedLoss'));
  let s = n == null ? r : K(r, n);
  if (a === et.NONE) return s;
  if (a === et.SUM) return Ee(s);
  if (a === et.MEAN) {
    if (n == null) return br(s);
    {
      let p = r.size / n.size,
        i = ce(Ee(s), Ee(n));
      return p > 1 ? ce(i, ue(p)) : i;
    }
  }
  if (a === et.SUM_BY_NONZERO_WEIGHTS) {
    if (n == null) return ce(Ee(s), ue(r.size));
    {
      let p = K(n, Un(r.shape)),
        i = we(Ee(u2(p, ue(0))), 'float32');
      return ce(Ee(s), i);
    }
  }
  throw Error(`Unknown reduction: ${a}`);
}
var s1 = x({ computeWeightedLoss_: g7 });
function y7(e, t, a, r = et.SUM_BY_NONZERO_WEIGHTS) {
  let n = b(e, 'labels', 'absoluteDifference'),
    s = b(t, 'predictions', 'absoluteDifference'),
    p = null;
  a != null && (p = b(a, 'weights', 'absoluteDifference')),
    _t(n.shape, s.shape, 'Error in absoluteDifference: ');
  let i = it(le(n, s));
  return s1(i, p, r);
}
var df = x({ absoluteDifference_: y7 });
function w7(e, t, a, r, n = et.SUM_BY_NONZERO_WEIGHTS) {
  let s = b(e, 'labels', 'cosineDistance'),
    p = b(t, 'predictions', 'cosineDistance'),
    i = null;
  r != null && (i = b(r, 'weights', 'cosineDistance')),
    _t(s.shape, p.shape, 'Error in cosineDistance: ');
  let d = ue(1),
    l = le(d, Ee(K(s, p), a, !0));
  return s1(l, i, n);
}
var lf = x({ cosineDistance_: w7 });
function b7(e, t, a, r = et.SUM_BY_NONZERO_WEIGHTS) {
  let n = b(e, 'labels', 'hingeLoss'),
    s = b(t, 'predictions', 'hingeLoss'),
    p = null;
  a != null && (p = b(a, 'weights', 'hingeLoss')), _t(n.shape, s.shape, 'Error in hingeLoss: ');
  let i = ue(1);
  n = le(K(ue(2), n), i);
  let d = Nr(le(i, K(n, s)));
  return s1(d, p, r);
}
var mf = x({ hingeLoss_: b7 });
function N7(e, t, a, r = 1, n = et.SUM_BY_NONZERO_WEIGHTS) {
  let s = b(e, 'labels', 'huberLoss'),
    p = b(t, 'predictions', 'huberLoss'),
    i = null;
  a != null && (i = b(a, 'weights', 'huberLoss')), _t(s.shape, p.shape, 'Error in huberLoss: ');
  let d = ue(r),
    l = it(le(p, s)),
    m = m2(l, d),
    u = le(l, m),
    f = ae(K(ue(0.5), Dt(m)), K(d, u));
  return s1(f, i, n);
}
var uf = x({ huberLoss_: N7 });
function _7(e, t, a, r = 1e-7, n = et.SUM_BY_NONZERO_WEIGHTS) {
  let s = b(e, 'labels', 'logLoss'),
    p = b(t, 'predictions', 'logLoss'),
    i = null;
  a != null && (i = b(a, 'weights', 'logLoss')), _t(s.shape, p.shape, 'Error in logLoss: ');
  let d = ue(1),
    l = ue(r),
    m = Lt(K(s, ya(ae(p, l)))),
    u = K(le(d, s), ya(ae(le(d, p), l))),
    f = le(m, u);
  return s1(f, i, n);
}
var cf = x({ logLoss_: _7 });
function S7(e, t, a, r = et.SUM_BY_NONZERO_WEIGHTS) {
  let n = b(e, 'labels', 'meanSquaredError'),
    s = b(t, 'predictions', 'meanSquaredError'),
    p = null;
  a != null && (p = b(a, 'weights', 'meanSquaredError')),
    _t(n.shape, s.shape, 'Error in meanSquaredError: ');
  let i = N2(n, s);
  return s1(i, p, r);
}
var hf = x({ meanSquaredError_: S7 });
function T7(e, t) {
  let a = b(e, 'labels', 'sigmoidCrossEntropyWithLogits'),
    r = b(t, 'logits', 'sigmoidCrossEntropyWithLogits');
  _t(a.shape, r.shape, 'Error in sigmoidCrossEntropyWithLogits: ');
  let n = Nr(r),
    s = K(r, a),
    p = n2(zt(Lt(it(r))));
  return ae(le(n, s), p);
}
function E7(e, t, a, r = 0, n = et.SUM_BY_NONZERO_WEIGHTS) {
  let s = b(e, 'multiClassLabels', 'sigmoidCrossEntropy'),
    p = b(t, 'logits', 'sigmoidCrossEntropy'),
    i = null;
  if (
    (a != null && (i = b(a, 'weights', 'sigmoidCrossEntropy')),
    _t(s.shape, p.shape, 'Error in sigmoidCrossEntropy: '),
    r > 0)
  ) {
    let l = ue(r),
      m = ue(1),
      u = ue(0.5);
    s = ae(K(s, le(m, l)), K(u, l));
  }
  let d = T7(s, p);
  return s1(d, i, n);
}
var ff = x({ sigmoidCrossEntropy_: E7 });
function D7(e, t, a = -1) {
  if ((a === -1 && (a = t.rank - 1), a !== t.rank - 1))
    throw Error(
      `Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${a}`
    );
  return Mt((n, s, p) => {
    let d = m9(s, [a], !0),
      l = le(we(s, 'float32'), d);
    p([n, l]);
    let m = Lt(K(l, n));
    return {
      value: Ee(m, [a]),
      gradFunc: (g, y) => {
        let [N, T] = y,
          O = fr(g.shape, [a]);
        return [K(U(g, O), le(we(N, 'float32'), zt(T))), K(U(g, O), le(zt(T), we(N, 'float32')))];
      }
    };
  })(e, t);
}
function x7(e, t, a, r = 0, n = et.SUM_BY_NONZERO_WEIGHTS) {
  let s = b(e, 'onehotLabels', 'softmaxCrossEntropy'),
    p = b(t, 'logits', 'softmaxCrossEntropy'),
    i = null;
  if (
    (a != null && (i = b(a, 'weights', 'softmaxCrossEntropy')),
    _t(s.shape, p.shape, 'Error in softmaxCrossEntropy: '),
    r > 0)
  ) {
    let l = ue(r),
      m = ue(1),
      u = ue(s.shape[1]);
    s = ae(K(s, le(m, l)), ce(l, u));
  }
  let d = D7(s, p);
  return s1(d, i, n);
}
var vf = x({ softmaxCrossEntropy_: x7 });
function A7(e, t, a, r) {
  let n = b(e, 'indices', 'sparseFillEmptyRows', 'int32'),
    s = b(t, 'values', 'sparseFillEmptyRows'),
    p = b(a, 'denseShape', 'sparseFillEmptyRows', 'int32'),
    i = b(r, 'defaultValue', 'sparseFillEmptyRows', s.dtype);
  if (n.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);
  if (s.rank !== 1) throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);
  if (p.rank !== 1) throw new Error(`Dense shape should be Tensor1D but received shape ${p.shape}`);
  if (i.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${i.shape}`);
  let d = { indices: n, values: s, denseShape: p, defaultValue: i },
    l = $.runKernel(Nl, d);
  return {
    outputIndices: l[0],
    outputValues: l[1],
    emptyRowIndicator: l[2],
    reverseIndexMap: l[3]
  };
}
var k7 = x({ sparseFillEmptyRows_: A7 });
function $7(e, t, a) {
  let r = b(e, 'inputIndices', 'sparseReshape', 'int32'),
    n = b(t, 'inputShape', 'sparseReshape', 'int32'),
    s = b(a, 'newShape', 'sparseReshape', 'int32');
  if (r.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${r.shape}`);
  if (n.rank !== 1) throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);
  if (s.rank !== 1) throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);
  let p = { inputIndices: r, inputShape: n, newShape: s },
    i = $.runKernel(_l, p);
  return { outputIndices: i[0], outputShape: i[1] };
}
var I7 = x({ sparseReshape_: $7 });
function O7(e, t, a) {
  let r = b(e, 'data', 'sparseSegmentMean'),
    n = b(t, 'indices', 'sparseSegmentMean', 'int32'),
    s = b(a, 'segmentIds', 'sparseSegmentMean', 'int32');
  if (r.rank < 1) throw new Error('Data should be at least 1 dimensional but received scalar');
  if (n.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);
  let p = { data: r, indices: n, segmentIds: s };
  return $.runKernel(Sl, p);
}
var V7 = x({ sparseSegmentMean_: O7 });
function C7(e, t, a) {
  let r = b(e, 'data', 'sparseSegmentSum'),
    n = b(t, 'indices', 'sparseSegmentSum', 'int32'),
    s = b(a, 'segmentIds', 'sparseSegmentSum', 'int32');
  if (r.rank < 1) throw new Error('Data should be at least 1 dimensional but received scalar');
  if (n.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);
  let p = { data: r, indices: n, segmentIds: s };
  return $.runKernel(Tl, p);
}
var F7 = x({ sparseSegmentSum_: C7 });
function B7(e, t, a, r, n, s, p, i) {
  let d = b(e, 'data', 'stringNGrams', 'string');
  if (d.dtype !== 'string') throw new Error('Data must be of datatype string');
  if (d.shape.length !== 1) throw new Error(`Data must be a vector, saw: ${d.shape}`);
  let l = b(t, 'dataSplits', 'stringNGrams');
  if (l.dtype !== 'int32') throw new Error('Data splits must be of datatype int32');
  let m = {
      separator: a,
      nGramWidths: r,
      leftPad: n,
      rightPad: s,
      padWidth: p,
      preserveShortSequences: i
    },
    u = { data: d, dataSplits: l },
    f = $.runKernel(Al, u, m);
  return { nGrams: f[0], nGramsSplits: f[1] };
}
var P7 = x({ stringNGrams_: B7 });
function R7(e, t, a = !0) {
  let r = b(e, 'input', 'stringSplit', 'string'),
    n = b(t, 'delimiter', 'stringSplit', 'string');
  if (r.rank !== 1) throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);
  if (n.rank !== 0) throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);
  let s = { skipEmpty: a },
    p = { input: r, delimiter: n },
    i = $.runKernel(kl, p, s);
  return { indices: i[0], values: i[1], shape: i[2] };
}
var L7 = x({ stringSplit_: R7 });
function U7(e, t) {
  let a = b(e, 'input', 'stringToHashBucketFast', 'string'),
    r = { numBuckets: t };
  if (t <= 0) throw new Error('Number of buckets must be at least 1');
  let n = { input: a };
  return $.runKernel($l, n, r);
}
var z7 = x({ stringToHashBucketFast_: U7 }),
  Ot = {
    flipLeftRight: V8,
    grayscaleToRGB: F8,
    resizeNearestNeighbor: o7,
    resizeBilinear: p7,
    rotateWithOffset: P8,
    cropAndResize: I8,
    nonMaxSuppression: L8,
    nonMaxSuppressionAsync: Y8,
    nonMaxSuppressionWithScore: Z8,
    nonMaxSuppressionWithScoreAsync: e7,
    nonMaxSuppressionPadded: a7,
    nonMaxSuppressionPaddedAsync: n7,
    threshold: m7,
    transform: c7
  },
  Sr = { sparseFillEmptyRows: k7, sparseReshape: I7, sparseSegmentMean: V7, sparseSegmentSum: F7 },
  Xn = { stringNGrams: P7, stringSplit: L7, stringToHashBucketFast: z7 },
  _1 = class extends C3 {
    minimize(e, t = !1, a) {
      let { value: r, grads: n } = this.computeGradients(e, a);
      if (a != null) {
        let s = a.map((p) => ({ name: p.name, tensor: n[p.name] }));
        this.applyGradients(s);
      } else this.applyGradients(n);
      return Ue(n), t ? r : (r.dispose(), null);
    }
    get iterations() {
      return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
    }
    incrementIterations() {
      this.iterations_ = this.iterations + 1;
    }
    computeGradients(e, t) {
      return n9(e, t);
    }
    dispose() {
      this.iterations_ != null && Ue(this.iterations_);
    }
    async saveIterations() {
      return (
        this.iterations_ == null && (this.iterations_ = 0),
        { name: 'iter', tensor: ue(this.iterations_, 'int32') }
      );
    }
    async getWeights() {
      throw new Error('getWeights() is not implemented for this optimizer yet.');
    }
    async setWeights(e) {
      throw new Error(
        `setWeights() is not implemented for this optimizer class ${this.getClassName()}`
      );
    }
    async extractIterations(e) {
      return (this.iterations_ = (await e[0].tensor.data())[0]), e.slice(1);
    }
  };
Object.defineProperty(_1, Symbol.hasInstance, {
  value: (e) => e.minimize != null && e.computeGradients != null && e.applyGradients != null
});
var Yn = class extends _1 {
  constructor(e, t, a = null) {
    super();
    (this.learningRate = e),
      (this.rho = t),
      (this.epsilon = a),
      (this.accumulatedGrads = []),
      (this.accumulatedUpdates = []),
      a == null && (this.epsilon = $.backend.epsilon());
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((a) => a.name) : Object.keys(e)).forEach((a, r) => {
      let n = $.registeredVariables[a],
        s = !1;
      this.accumulatedGrads[r] == null &&
        (this.accumulatedGrads[r] = {
          originalName: `${a}/accum_grad`,
          variable: re(() => ot(n).variable(s))
        }),
        this.accumulatedUpdates[r] == null &&
          (this.accumulatedUpdates[r] = {
            originalName: `${a}/accum_var`,
            variable: re(() => ot(n).variable(s))
          });
      let p = Array.isArray(e) ? e[r].tensor : e[a];
      if (p == null) return;
      let i = this.accumulatedGrads[r].variable,
        d = this.accumulatedUpdates[r].variable;
      re(() => {
        let l = ae(K(i, this.rho), K(Dt(p), 1 - this.rho)),
          m = K(ce(Ut(ae(d, this.epsilon)), Ut(ae(i, this.epsilon))), p),
          u = ae(K(d, this.rho), K(Dt(m), 1 - this.rho));
        i.assign(l), d.assign(u);
        let f = ae(K(m, -this.learningRate), n);
        n.assign(f);
      });
    }),
      this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null &&
      (Ue(this.accumulatedGrads.map((e) => e.variable)),
      Ue(this.accumulatedUpdates.map((e) => e.variable)));
  }
  async getWeights() {
    let e = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(
      e.map((t) => ({ name: t.originalName, tensor: t.variable }))
    );
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = e.length / 2,
      a = !1;
    (this.accumulatedGrads = e
      .slice(0, t)
      .map((r) => ({ originalName: r.name, variable: r.tensor.variable(a) }))),
      (this.accumulatedUpdates = e
        .slice(t, t * 2)
        .map((r) => ({ originalName: r.name, variable: r.tensor.variable(a) })));
  }
  getConfig() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.rho, t.epsilon);
  }
};
Yn.className = 'Adadelta';
w1(Yn);
var Jn = class extends _1 {
  constructor(e, t = 0.1) {
    super();
    (this.learningRate = e), (this.initialAccumulatorValue = t), (this.accumulatedGrads = []);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((a) => a.name) : Object.keys(e)).forEach((a, r) => {
      let n = $.registeredVariables[a];
      if (this.accumulatedGrads[r] == null) {
        let i = !1;
        this.accumulatedGrads[r] = {
          originalName: `${a}/accumulator`,
          variable: re(() => vr(n.shape, this.initialAccumulatorValue).variable(i))
        };
      }
      let s = Array.isArray(e) ? e[r].tensor : e[a];
      if (s == null) return;
      let p = this.accumulatedGrads[r].variable;
      re(() => {
        let i = ae(p, Dt(s));
        p.assign(i);
        let d = ae(K(ce(s, Ut(ae(i, $.backend.epsilon()))), -this.learningRate), n);
        n.assign(d);
      });
    }),
      this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Ue(this.accumulatedGrads.map((e) => e.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(
      this.accumulatedGrads.map((e) => ({ name: e.originalName, tensor: e.variable }))
    );
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = !1;
    this.accumulatedGrads = e.map((a) => ({
      originalName: a.name,
      variable: a.tensor.variable(t)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      initialAccumulatorValue: this.initialAccumulatorValue
    };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.initialAccumulatorValue);
  }
};
Jn.className = 'Adagrad';
w1(Jn);
var Zn = class extends _1 {
  constructor(e, t, a, r = null) {
    super();
    (this.learningRate = e),
      (this.beta1 = t),
      (this.beta2 = a),
      (this.epsilon = r),
      (this.accumulatedFirstMoment = []),
      (this.accumulatedSecondMoment = []),
      re(() => {
        (this.accBeta1 = ue(t).variable()), (this.accBeta2 = ue(a).variable());
      }),
      r == null && (this.epsilon = $.backend.epsilon());
  }
  applyGradients(e) {
    let t = Array.isArray(e) ? e.map((a) => a.name) : Object.keys(e);
    re(() => {
      let a = le(1, this.accBeta1),
        r = le(1, this.accBeta2);
      t.forEach((n, s) => {
        let p = $.registeredVariables[n],
          i = !1;
        this.accumulatedFirstMoment[s] == null &&
          (this.accumulatedFirstMoment[s] = {
            originalName: `${n}/m`,
            variable: re(() => ot(p).variable(i))
          }),
          this.accumulatedSecondMoment[s] == null &&
            (this.accumulatedSecondMoment[s] = {
              originalName: `${n}/v`,
              variable: re(() => ot(p).variable(i))
            });
        let d = Array.isArray(e) ? e[s].tensor : e[n];
        if (d == null) return;
        let l = this.accumulatedFirstMoment[s].variable,
          m = this.accumulatedSecondMoment[s].variable,
          u = ae(K(l, this.beta1), K(d, 1 - this.beta1)),
          f = ae(K(m, this.beta2), K(Dt(d), 1 - this.beta2)),
          g = ce(u, a),
          y = ce(f, r);
        l.assign(u), m.assign(f);
        let N = ae(K(ce(g, ae(Ut(y), this.epsilon)), -this.learningRate), p);
        p.assign(N);
      }),
        this.accBeta1.assign(K(this.accBeta1, this.beta1)),
        this.accBeta2.assign(K(this.accBeta2, this.beta2));
    }),
      this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(),
      this.accBeta2.dispose(),
      this.accumulatedFirstMoment != null && Ue(this.accumulatedFirstMoment.map((e) => e.variable)),
      this.accumulatedSecondMoment != null &&
        Ue(this.accumulatedSecondMoment.map((e) => e.variable));
  }
  async getWeights() {
    let e = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(
      e.map((t) => ({ name: t.originalName, tensor: t.variable }))
    );
  }
  async setWeights(e) {
    (e = await this.extractIterations(e)),
      re(() => {
        this.accBeta1.assign(va(this.beta1, this.iterations_ + 1)),
          this.accBeta2.assign(va(this.beta2, this.iterations_ + 1));
      });
    let t = e.length / 2,
      a = !1;
    (this.accumulatedFirstMoment = e
      .slice(0, t)
      .map((r) => ({ originalName: r.name, variable: r.tensor.variable(a) }))),
      (this.accumulatedSecondMoment = e
        .slice(t, t * 2)
        .map((r) => ({ originalName: r.name, variable: r.tensor.variable(a) })));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon
    };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon);
  }
};
Zn.className = 'Adam';
w1(Zn);
var Qn = class extends _1 {
  constructor(e, t, a, r = null, n = 0) {
    super();
    (this.learningRate = e),
      (this.beta1 = t),
      (this.beta2 = a),
      (this.epsilon = r),
      (this.decay = n),
      (this.accumulatedFirstMoment = []),
      (this.accumulatedWeightedInfNorm = []),
      re(() => {
        (this.iteration = ue(0).variable()), (this.accBeta1 = ue(t).variable());
      }),
      r == null && (this.epsilon = $.backend.epsilon());
  }
  applyGradients(e) {
    let t = Array.isArray(e) ? e.map((a) => a.name) : Object.keys(e);
    re(() => {
      let a = le(1, this.accBeta1),
        r = ce(-this.learningRate, ae(K(this.iteration, this.decay), 1));
      t.forEach((n, s) => {
        let p = $.registeredVariables[n],
          i = !1;
        this.accumulatedFirstMoment[s] == null &&
          (this.accumulatedFirstMoment[s] = {
            originalName: `${n}/m`,
            variable: ot(p).variable(i)
          }),
          this.accumulatedWeightedInfNorm[s] == null &&
            (this.accumulatedWeightedInfNorm[s] = {
              originalName: `${n}/v`,
              variable: ot(p).variable(i)
            });
        let d = Array.isArray(e) ? e[s].tensor : e[n];
        if (d == null) return;
        let l = this.accumulatedFirstMoment[s].variable,
          m = this.accumulatedWeightedInfNorm[s].variable,
          u = ae(K(l, this.beta1), K(d, 1 - this.beta1)),
          f = K(m, this.beta2),
          g = it(d),
          y = l2(f, g);
        l.assign(u), m.assign(y);
        let N = ae(K(ce(r, a), ce(u, ae(y, this.epsilon))), p);
        p.assign(N);
      }),
        this.iteration.assign(ae(this.iteration, 1)),
        this.accBeta1.assign(K(this.accBeta1, this.beta1));
    }),
      this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(),
      this.iteration.dispose(),
      this.accumulatedFirstMoment != null && Ue(this.accumulatedFirstMoment.map((e) => e.variable)),
      this.accumulatedWeightedInfNorm != null &&
        Ue(this.accumulatedWeightedInfNorm.map((e) => e.variable));
  }
  async getWeights() {
    throw new Error('getWeights() is not implemented for Adamax yet.');
  }
  async setWeights(e) {
    throw new Error('setWeights() is not implemented for Adamax yet.');
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon,
      decay: this.decay
    };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
  }
};
Qn.className = 'Adamax';
w1(Qn);
var Tr = class extends _1 {
  constructor(e) {
    super();
    (this.learningRate = e), this.setLearningRate(e);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((a) => a.name) : Object.keys(e)).forEach((a, r) => {
      let n = Array.isArray(e) ? e[r].tensor : e[a];
      if (n == null) return;
      let s = $.registeredVariables[a];
      re(() => {
        let p = ae(K(this.c, n), s);
        s.assign(p);
      });
    }),
      this.incrementIterations();
  }
  setLearningRate(e) {
    (this.learningRate = e), this.c != null && this.c.dispose(), (this.c = Rt(ue(-e)));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(e) {
    if (((e = await this.extractIterations(e)), e.length !== 0))
      throw new Error('SGD optimizer does not have settable weights.');
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate);
  }
};
Tr.className = 'SGD';
w1(Tr);
var es = class extends Tr {
  constructor(e, t, a = !1) {
    super(e);
    (this.learningRate = e),
      (this.momentum = t),
      (this.useNesterov = a),
      (this.accumulations = []),
      (this.m = ue(this.momentum));
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((a) => a.name) : Object.keys(e)).forEach((a, r) => {
      let n = $.registeredVariables[a];
      if (this.accumulations[r] == null) {
        let i = !1;
        this.accumulations[r] = {
          originalName: `${a}/momentum`,
          variable: re(() => ot(n).variable(i))
        };
      }
      let s = this.accumulations[r].variable,
        p = Array.isArray(e) ? e[r].tensor : e[a];
      p != null &&
        re(() => {
          let i,
            d = ae(K(this.m, s), p);
          this.useNesterov
            ? (i = ae(K(this.c, ae(p, K(d, this.m))), n))
            : (i = ae(K(this.c, d), n)),
            s.assign(d),
            n.assign(i);
        });
    }),
      this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Ue(this.accumulations.map((e) => e.variable));
  }
  setMomentum(e) {
    this.momentum = e;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(
      this.accumulations.map((e) => ({ name: e.originalName, tensor: e.variable }))
    );
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = !1;
    this.accumulations = e.map((a) => ({ originalName: a.name, variable: a.tensor.variable(t) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      momentum: this.momentum,
      useNesterov: this.useNesterov
    };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.momentum, t.useNesterov);
  }
};
es.className = 'Momentum';
w1(es);
var ts = class extends _1 {
  constructor(e, t = 0.9, a = 0, r = null, n = !1) {
    super();
    if (
      ((this.learningRate = e),
      (this.decay = t),
      (this.momentum = a),
      (this.epsilon = r),
      (this.accumulatedMeanSquares = []),
      (this.accumulatedMoments = []),
      (this.accumulatedMeanGrads = []),
      (this.centered = n),
      r == null && (this.epsilon = $.backend.epsilon()),
      e == null)
    )
      throw new Error('learningRate for RMSPropOptimizer must be defined.');
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((a) => a.name) : Object.keys(e)).forEach((a, r) => {
      let n = $.registeredVariables[a],
        s = !1;
      this.accumulatedMeanSquares[r] == null &&
        (this.accumulatedMeanSquares[r] = {
          originalName: `${a}/rms`,
          variable: re(() => ot(n).variable(s))
        }),
        this.accumulatedMoments[r] == null &&
          (this.accumulatedMoments[r] = {
            originalName: `${a}/momentum`,
            variable: re(() => ot(n).variable(s))
          }),
        this.accumulatedMeanGrads[r] == null &&
          this.centered &&
          (this.accumulatedMeanGrads[r] = {
            originalName: `${a}/mg`,
            variable: re(() => ot(n).variable(s))
          });
      let p = Array.isArray(e) ? e[r].tensor : e[a];
      if (p == null) return;
      let i = this.accumulatedMeanSquares[r].variable,
        d = this.accumulatedMoments[r].variable;
      re(() => {
        let l = ae(K(i, this.decay), K(Dt(p), 1 - this.decay));
        if (this.centered) {
          let m = this.accumulatedMeanGrads[r].variable,
            u = ae(K(m, this.decay), K(p, 1 - this.decay)),
            f = ce(K(p, this.learningRate), Ut(le(l, ae(Dt(u), this.epsilon)))),
            g = ae(K(d, this.momentum), f);
          i.assign(l), m.assign(u), d.assign(g);
          let y = le(n, g);
          n.assign(y);
        } else {
          let m = ae(K(i, this.decay), K(Dt(p), 1 - this.decay)),
            u = ae(K(d, this.momentum), ce(K(p, this.learningRate), Ut(ae(m, this.epsilon))));
          i.assign(m), d.assign(u);
          let f = le(n, u);
          n.assign(f);
        }
      });
    }),
      this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Ue(this.accumulatedMeanSquares.map((e) => e.variable)),
      this.accumulatedMeanGrads != null &&
        this.centered &&
        Ue(this.accumulatedMeanGrads.map((e) => e.variable)),
      this.accumulatedMoments != null && Ue(this.accumulatedMoments.map((e) => e.variable));
  }
  async getWeights() {
    let e = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return (
      this.centered && e.push(...this.accumulatedMeanGrads),
      [await this.saveIterations()].concat(
        e.map((t) => ({ name: t.originalName, tensor: t.variable }))
      )
    );
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t = this.centered ? e.length / 3 : e.length / 2,
      a = !1;
    (this.accumulatedMeanSquares = e
      .slice(0, t)
      .map((r) => ({ originalName: r.name, variable: r.tensor.variable(a) }))),
      (this.accumulatedMoments = e
        .slice(t, t * 2)
        .map((r) => ({ originalName: r.name, variable: r.tensor.variable(a) }))),
      this.centered &&
        (this.accumulatedMeanGrads = e
          .slice(t * 2, t * 3)
          .map((r) => ({ originalName: r.name, variable: r.tensor.variable(a) })));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      decay: this.decay,
      momentum: this.momentum,
      epsilon: this.epsilon,
      centered: this.centered
    };
  }
  static fromConfig(e, t) {
    return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
  }
};
ts.className = 'RMSProp';
w1(ts);
var S1 = class {
    static sgd(e) {
      return new Tr(e);
    }
    static momentum(e, t, a = !1) {
      return new es(e, t, a);
    }
    static rmsprop(e, t = 0.9, a = 0, r = null, n = !1) {
      return new ts(e, t, a, r, n);
    }
    static adam(e = 0.001, t = 0.9, a = 0.999, r = null) {
      return new Zn(e, t, a, r);
    }
    static adadelta(e = 0.001, t = 0.95, a = null) {
      return new Yn(e, t, a);
    }
    static adamax(e = 0.002, t = 0.9, a = 0.999, r = null, n = 0) {
      return new Qn(e, t, a, r, n);
    }
    static adagrad(e, t = 0.1) {
      return new Jn(e, t);
    }
  },
  gf = {
    sgd: S1.sgd,
    momentum: S1.momentum,
    adadelta: S1.adadelta,
    adagrad: S1.adagrad,
    rmsprop: S1.rmsprop,
    adamax: S1.adamax,
    adam: S1.adam
  },
  yf = (() =>
    typeof requestAnimationFrame != 'undefined'
      ? requestAnimationFrame
      : typeof setImmediate != 'undefined'
      ? setImmediate
      : (e) => e())(),
  j7 = fe();
j7.registerFlag(
  'KEEP_INTERMEDIATE_TENSORS',
  () => !1,
  (e) => {
    e &&
      console.warn(
        'Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.'
      );
  }
);
var ht;
(function (e) {
  (e[(e.DT_INVALID = 0)] = 'DT_INVALID'),
    (e[(e.DT_FLOAT = 1)] = 'DT_FLOAT'),
    (e[(e.DT_DOUBLE = 2)] = 'DT_DOUBLE'),
    (e[(e.DT_INT32 = 3)] = 'DT_INT32'),
    (e[(e.DT_UINT8 = 4)] = 'DT_UINT8'),
    (e[(e.DT_INT16 = 5)] = 'DT_INT16'),
    (e[(e.DT_INT8 = 6)] = 'DT_INT8'),
    (e[(e.DT_STRING = 7)] = 'DT_STRING'),
    (e[(e.DT_COMPLEX64 = 8)] = 'DT_COMPLEX64'),
    (e[(e.DT_INT64 = 9)] = 'DT_INT64'),
    (e[(e.DT_BOOL = 10)] = 'DT_BOOL'),
    (e[(e.DT_QINT8 = 11)] = 'DT_QINT8'),
    (e[(e.DT_QUINT8 = 12)] = 'DT_QUINT8'),
    (e[(e.DT_QINT32 = 13)] = 'DT_QINT32'),
    (e[(e.DT_BFLOAT16 = 14)] = 'DT_BFLOAT16'),
    (e[(e.DT_QINT16 = 15)] = 'DT_QINT16'),
    (e[(e.DT_QUINT16 = 16)] = 'DT_QUINT16'),
    (e[(e.DT_UINT16 = 17)] = 'DT_UINT16'),
    (e[(e.DT_COMPLEX128 = 18)] = 'DT_COMPLEX128'),
    (e[(e.DT_HALF = 19)] = 'DT_HALF'),
    (e[(e.DT_RESOURCE = 20)] = 'DT_RESOURCE'),
    (e[(e.DT_VARIANT = 21)] = 'DT_VARIANT'),
    (e[(e.DT_UINT32 = 22)] = 'DT_UINT32'),
    (e[(e.DT_UINT64 = 23)] = 'DT_UINT64'),
    (e[(e.DT_FLOAT_REF = 101)] = 'DT_FLOAT_REF'),
    (e[(e.DT_DOUBLE_REF = 102)] = 'DT_DOUBLE_REF'),
    (e[(e.DT_INT32_REF = 103)] = 'DT_INT32_REF'),
    (e[(e.DT_UINT8_REF = 104)] = 'DT_UINT8_REF'),
    (e[(e.DT_INT16_REF = 105)] = 'DT_INT16_REF'),
    (e[(e.DT_INT8_REF = 106)] = 'DT_INT8_REF'),
    (e[(e.DT_STRING_REF = 107)] = 'DT_STRING_REF'),
    (e[(e.DT_COMPLEX64_REF = 108)] = 'DT_COMPLEX64_REF'),
    (e[(e.DT_INT64_REF = 109)] = 'DT_INT64_REF'),
    (e[(e.DT_BOOL_REF = 110)] = 'DT_BOOL_REF'),
    (e[(e.DT_QINT8_REF = 111)] = 'DT_QINT8_REF'),
    (e[(e.DT_QUINT8_REF = 112)] = 'DT_QUINT8_REF'),
    (e[(e.DT_QINT32_REF = 113)] = 'DT_QINT32_REF'),
    (e[(e.DT_BFLOAT16_REF = 114)] = 'DT_BFLOAT16_REF'),
    (e[(e.DT_QINT16_REF = 115)] = 'DT_QINT16_REF'),
    (e[(e.DT_QUINT16_REF = 116)] = 'DT_QUINT16_REF'),
    (e[(e.DT_UINT16_REF = 117)] = 'DT_UINT16_REF'),
    (e[(e.DT_COMPLEX128_REF = 118)] = 'DT_COMPLEX128_REF'),
    (e[(e.DT_HALF_REF = 119)] = 'DT_HALF_REF'),
    (e[(e.DT_RESOURCE_REF = 120)] = 'DT_RESOURCE_REF'),
    (e[(e.DT_VARIANT_REF = 121)] = 'DT_VARIANT_REF'),
    (e[(e.DT_UINT32_REF = 122)] = 'DT_UINT32_REF'),
    (e[(e.DT_UINT64_REF = 123)] = 'DT_UINT64_REF');
})(ht || (ht = {}));
var x2;
(function (e) {
  let t;
  (function (a) {
    (a[(a.LEGACY = 0)] = 'LEGACY'), (a[(a.V1 = 1)] = 'V1'), (a[(a.V2 = 2)] = 'V2');
  })((t = e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {})));
})(x2 || (x2 = {}));
var M7 = {};
function A2(e) {
  return M7[e];
}
function h(e, t, a, r, n) {
  let s = t.inputParams[e];
  if (s && s.inputIndexStart !== void 0) {
    let i = s.inputIndexStart,
      d = s.inputIndexEnd === 0 ? void 0 : s.inputIndexEnd === void 0 ? i + 1 : s.inputIndexEnd;
    if (s.type === 'tensor') return Ze(t.inputNames[s.inputIndexStart], a, r, n);
    if (s.type === 'tensors') return t.inputNames.slice(i, d).map((f) => Ze(f, a, r, n));
    let l = Ze(t.inputNames.slice(i)[0], a, r, n),
      m = l.dataSync();
    return s.type === 'number' ? m[0] : Qe.toNestedArray(l.shape, m);
  }
  let p = t.attrParams[e];
  return p && p.value;
}
function Ze(e, t, a, r) {
  let [n, s] = rt(e);
  if (r != null) {
    let i = r.getHashTableHandleByName(n);
    if (i != null) return i;
  }
  let p = a.currentContextIds.find((i) => !!t[Er(n, i)]);
  return p !== void 0 ? t[Er(n, p)][s] : void 0;
}
function q7(e, t, a) {
  return t[Er(e, a.currentContextId)];
}
function Vt(e, t) {
  let [a, r, n] = rt(e);
  return [Er(a, t && t.currentContextId), r, n];
}
function Er(e, t) {
  return t ? `${e}-${t}` : e;
}
function rt(e) {
  let t = e.split(':');
  if (t.length === 1) return [e, 0, void 0];
  let a = t[0],
    r = t.length === 3 ? t[1] : void 0,
    n = Number(t[t.length - 1]);
  return [a, n, r];
}
function Dr(e, t, a) {
  let r = h('pad', e, t, a);
  if (r === 'explicit') {
    r = h('explicitPaddings', e, t, a);
    let n = [
      [0, 0],
      [0, 0],
      [0, 0],
      [0, 0]
    ];
    for (let s = 0; s < 4; s++) (n[s][0] = r[s * 2]), (n[s][1] = r[s * 2 + 1]);
    return n;
  }
  return r;
}
function Ht(e) {
  return e.kept ? e : g1(e);
}
var k2 = {};
be(k2, { json: () => H7 });
var H7 = [
    {
      tfOpName: 'Add',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'AddV2',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'AddN',
      category: 'arithmetic',
      inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }]
    },
    {
      tfOpName: 'BiasAdd',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Sub',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'RealDiv',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Div',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'DivNoNan',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'FloorDiv',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Mul',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Maximum',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Minimum',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Pow',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'SquaredDifference',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Mod',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'FloorMod',
      category: 'arithmetic',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    }
  ],
  $2 = {};
be($2, { json: () => W7 });
var W7 = [
    {
      tfOpName: 'Abs',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Acos',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Asin',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Atan',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Atan2',
      category: 'basic_math',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'y', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Ceil',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'ClipByValue',
      category: 'basic_math',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'clipValueMin', type: 'number' },
        { start: 2, name: 'clipValueMax', type: 'number' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Complex',
      category: 'basic_math',
      inputs: [
        { start: 0, name: 'real', type: 'tensor' },
        { start: 1, name: 'imag', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'ComplexAbs',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Cos',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Cosh',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Elu',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Exp',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Floor',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Log',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Imag',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
        { tfName: 'Tout', name: 'outputType', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Neg',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Real',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
        { tfName: 'Tout', name: 'outputType', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Prelu',
      category: 'basic_math',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'alpha', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Relu',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Relu6',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Selu',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Sigmoid',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Sin',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Sinh',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Sqrt',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Rsqrt',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Square',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Tan',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Tanh',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Sign',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Round',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Expm1',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Log1p',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Reciprocal',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Softplus',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Asinh',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Acosh',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Atanh',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Erf',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Prod',
      category: 'basic_math',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axes', type: 'number[]' }
      ],
      attrs: [
        { tfName: 'keep_dims', name: 'keepDims', type: 'bool', notSupported: !0 },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'LeakyRelu',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'alpha', name: 'alpha', type: 'number', defaultValue: 0.2 },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'IsNan',
      category: 'basic_math',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    }
  ],
  I2 = {};
be(I2, { json: () => K7 });
var K7 = [
    {
      tfOpName: 'EmptyTensorList',
      category: 'control',
      inputs: [
        { start: 0, name: 'elementShape', type: 'shape' },
        { start: 1, name: 'maxNumElements', type: 'number' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'LoopCond',
      category: 'control',
      inputs: [{ start: 0, name: 'pred', type: 'tensor' }]
    },
    {
      tfOpName: 'Switch',
      category: 'control',
      inputs: [
        { start: 0, name: 'data', type: 'tensor' },
        { start: 1, name: 'pred', type: 'tensor' }
      ]
    },
    {
      tfOpName: 'Merge',
      category: 'control',
      inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }]
    },
    {
      tfOpName: 'Enter',
      category: 'control',
      inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
      attrs: [
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
        { tfName: 'frame_name', name: 'frameName', type: 'string' },
        { tfName: 'is_constant', name: 'isConstant', type: 'bool' }
      ]
    },
    {
      tfOpName: 'Exit',
      category: 'control',
      inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'NextIteration',
      category: 'control',
      inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'TensorArrayV3',
      category: 'control',
      inputs: [{ start: 0, name: 'size', type: 'number' }],
      attrs: [
        { tfName: 'dtype', name: 'dtype', type: 'dtype' },
        { tfName: 'element_shape', name: 'elementShape', type: 'shape' },
        { tfName: 'dynamic_size', name: 'dynamicSize', type: 'bool' },
        { tfName: 'clear_after_read', name: 'clearAfterRead', type: 'bool' },
        { tfName: 'identical_element_shapes', name: 'identicalElementShapes', type: 'bool' },
        { tfName: 'tensor_array_name', name: 'name', type: 'string' }
      ]
    },
    {
      tfOpName: 'TensorArrayWriteV3',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorArrayId', type: 'tensor' },
        { start: 1, name: 'index', type: 'number' },
        { start: 2, name: 'tensor', type: 'tensor' },
        { start: 3, name: 'flowIn', type: 'number' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'TensorArrayReadV3',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorArrayId', type: 'tensor' },
        { start: 1, name: 'index', type: 'number' },
        { start: 2, name: 'flowIn', type: 'number' }
      ],
      attrs: [{ tfName: 'dtype', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'TensorArrayGatherV3',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorArrayId', type: 'tensor' },
        { start: 1, name: 'indices', type: 'number[]' },
        { start: 2, name: 'flowIn', type: 'number' }
      ],
      attrs: [
        { tfName: 'dtype', name: 'dtype', type: 'dtype' },
        { tfName: 'element_shape', name: 'elementShape', type: 'shape' }
      ]
    },
    {
      tfOpName: 'TensorArrayScatterV3',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorArrayId', type: 'tensor' },
        { start: 1, name: 'indices', type: 'number[]' },
        { start: 2, name: 'tensor', type: 'tensor' },
        { start: 3, name: 'flowIn', type: 'number' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorArrayConcatV3',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorArrayId', type: 'tensor' },
        { start: 1, name: 'flowIn', type: 'number' }
      ],
      attrs: [
        { tfName: 'dtype', name: 'dtype', type: 'dtype' },
        {
          tfName: 'element_shape_except0',
          name: 'elementShapeExcept0',
          type: 'shape',
          notSupported: !0
        }
      ]
    },
    {
      tfOpName: 'TensorArraySplitV3',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorArrayId', type: 'tensor' },
        { start: 1, name: 'tensor', type: 'tensor' },
        { start: 2, name: 'lengths', type: 'number[]' },
        { start: 3, name: 'flowIn', type: 'number' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorArraySizeV3',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorArrayId', type: 'tensor' },
        { start: 1, name: 'flowIn', type: 'number' }
      ]
    },
    {
      tfOpName: 'TensorArrayCloseV3',
      category: 'control',
      inputs: [{ start: 0, name: 'tensorArrayId', type: 'tensor' }]
    },
    {
      tfOpName: 'StatelessIf',
      category: 'control',
      inputs: [
        { start: 0, name: 'cond', type: 'tensor' },
        { start: 1, end: 0, name: 'args', type: 'tensors' }
      ],
      attrs: [
        { tfName: 'then_branch', name: 'thenBranch', type: 'func' },
        { tfName: 'else_branch', name: 'elseBranch', type: 'func' }
      ]
    },
    {
      tfOpName: 'If',
      category: 'control',
      inputs: [
        { start: 0, name: 'cond', type: 'tensor' },
        { start: 1, end: 0, name: 'args', type: 'tensors' }
      ],
      attrs: [
        { tfName: 'then_branch', name: 'thenBranch', type: 'func' },
        { tfName: 'else_branch', name: 'elseBranch', type: 'func' }
      ]
    },
    {
      tfOpName: 'StatelessWhile',
      category: 'control',
      inputs: [{ start: 0, end: 0, name: 'args', type: 'tensors' }],
      attrs: [
        { tfName: 'cond', name: 'cond', type: 'func' },
        { tfName: 'body', name: 'body', type: 'func' }
      ]
    },
    {
      tfOpName: 'While',
      category: 'control',
      inputs: [{ start: 0, end: 0, name: 'args', type: 'tensors' }],
      attrs: [
        { tfName: 'cond', name: 'cond', type: 'func' },
        { tfName: 'body', name: 'body', type: 'func' }
      ]
    },
    {
      tfOpName: 'TensorListScatter',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensor', type: 'tensor' },
        { start: 1, name: 'indices', type: 'number[]' },
        { start: 2, name: 'elementShape', type: 'shape' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListScatterV2',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensor', type: 'tensor' },
        { start: 1, name: 'indices', type: 'number[]' },
        { start: 2, name: 'elementShape', type: 'shape' },
        { start: 3, name: 'numElements', type: 'number' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListGather',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorListId', type: 'tensor' },
        { start: 1, name: 'indices', type: 'number[]' },
        { start: 2, name: 'elementShape', type: 'shape' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListGetItem',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorListId', type: 'tensor' },
        { start: 1, name: 'index', type: 'number' },
        { start: 2, name: 'elementShape', type: 'shape' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListSetItem',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorListId', type: 'tensor' },
        { start: 1, name: 'index', type: 'number' },
        { start: 2, name: 'tensor', type: 'tensor' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListReserve',
      category: 'control',
      inputs: [
        { start: 0, name: 'elementShape', type: 'shape' },
        { start: 1, name: 'numElements', type: 'number' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListFromTensor',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensor', type: 'tensor' },
        { start: 1, name: 'elementShape', type: 'shape' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListStack',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorListId', type: 'tensor' },
        { start: 1, name: 'elementShape', type: 'shape' }
      ],
      attrs: [
        { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' },
        { tfName: 'num_elements', name: 'numElements', type: 'dtype' }
      ]
    },
    {
      tfOpName: 'TensorListSplit',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensor', type: 'tensor' },
        { start: 1, name: 'elementShape', type: 'shape' },
        { start: 2, name: 'lengths', type: 'number[]' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListConcat',
      category: 'control',
      inputs: [{ start: 0, name: 'tensorListId', type: 'tensor' }],
      attrs: [
        { tfName: 'element_shape', name: 'elementShape', type: 'shape' },
        { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }
      ]
    },
    {
      tfOpName: 'TensorListConcatV2',
      category: 'control',
      inputs: [{ start: 0, name: 'tensorListId', type: 'tensor' }],
      attrs: [
        { tfName: 'element_shape', name: 'elementShape', type: 'shape' },
        { tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }
      ]
    },
    {
      tfOpName: 'TensorListPopBack',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorListId', type: 'tensor' },
        { start: 1, name: 'elementShape', type: 'shape' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListPushBack',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorListId', type: 'tensor' },
        { start: 1, name: 'tensor', type: 'tensor' }
      ],
      attrs: [{ tfName: 'element_dtype', name: 'elementDType', type: 'dtype' }]
    },
    {
      tfOpName: 'TensorListLength',
      category: 'control',
      inputs: [{ start: 0, name: 'tensorListId', type: 'tensor' }]
    },
    {
      tfOpName: 'TensorListResize',
      category: 'control',
      inputs: [
        { start: 0, name: 'tensorListId', type: 'tensor' },
        { start: 1, name: 'size', type: 'number' }
      ]
    }
  ],
  O2 = {};
be(O2, { json: () => G7 });
var G7 = [
    {
      tfOpName: 'AvgPool',
      category: 'convolution',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', notSupported: !0 },
        { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'MaxPool',
      category: 'convolution',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', notSupported: !0 },
        { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
        {
          tfName: 'explicit_paddings',
          name: 'explicitPaddings',
          type: 'number[]',
          defaultValue: [],
          notSupported: !0
        },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'MaxPoolWithArgmax',
      category: 'convolution',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
        { tfName: 'include_batch_in_index', name: 'includeBatchInIndex', type: 'bool' },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'AvgPool3D',
      category: 'convolution',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', notSupported: !0 },
        { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'MaxPool3D',
      category: 'convolution',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', notSupported: !0 },
        { tfName: 'ksize', name: 'kernelSize', type: 'number[]' },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Conv1D',
      category: 'convolution',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'filter', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'stride', name: 'stride', type: 'number' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', defaultValue: 'NWC' },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
        { tfName: 'dilation', name: 'dilation', type: 'number', defaultValue: 1 }
      ]
    },
    {
      tfOpName: 'Conv2D',
      category: 'convolution',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'filter', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'useCudnnOnGpu', name: 'useCudnnOnGpu', type: 'bool' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', defaultValue: 'NHWC' },
        {
          tfName: 'explicit_paddings',
          name: 'explicitPaddings',
          type: 'number[]',
          defaultValue: []
        },
        { tfName: 'dilations', name: 'dilations', type: 'number[]' }
      ]
    },
    {
      tfOpName: '_FusedConv2D',
      category: 'convolution',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'filter', type: 'tensor' },
        { start: 2, end: 0, name: 'args', type: 'tensors' }
      ],
      attrs: [
        { tfName: 'num_args', name: 'numArgs', type: 'number' },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        {
          tfName: 'explicit_paddings',
          name: 'explicitPaddings',
          type: 'number[]',
          defaultValue: []
        },
        { tfName: 'use_cudnn_on_gpu', name: 'useCudnnOnGpu', type: 'bool', defaultValue: !0 },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', defaultValue: 'NHWC' },
        { tfName: 'dilations', name: 'dilations', type: 'number[]', defaultValue: [1, 1, 1, 1] },
        { tfName: 'fused_ops', name: 'fusedOps', type: 'string[]', defaultValue: [] },
        { tfName: 'epsilon', name: 'epsilon', type: 'number', defaultValue: 1e-4 },
        { tfName: 'leakyrelu_alpha', name: 'leakyreluAlpha', type: 'number' }
      ]
    },
    {
      tfOpName: 'Conv2DBackpropInput',
      category: 'convolution',
      inputs: [
        { start: 2, name: 'x', type: 'tensor' },
        { start: 1, name: 'filter', type: 'tensor' },
        { start: 0, name: 'outputShape', type: 'number[]' }
      ],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', notSupported: !0 },
        {
          tfName: 'explicit_paddings',
          name: 'explicitPaddings',
          type: 'number[]',
          defaultValue: []
        },
        { tfName: 'dilations', name: 'dilations', type: 'number[]', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'DepthwiseConv2d',
      category: 'convolution',
      inputs: [
        { start: 0, name: 'input', type: 'tensor' },
        { start: 1, name: 'filter', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', defaultValue: 'NHWC' },
        {
          tfName: 'explicit_paddings',
          name: 'explicitPaddings',
          type: 'number[]',
          defaultValue: []
        },
        { tfName: 'dilations', name: 'dilations', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'DepthwiseConv2dNative',
      category: 'convolution',
      inputs: [
        { start: 0, name: 'input', type: 'tensor' },
        { start: 1, name: 'filter', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', defaultValue: 'NHWC' },
        {
          tfName: 'explicit_paddings',
          name: 'explicitPaddings',
          type: 'number[]',
          defaultValue: []
        },
        { tfName: 'dilations', name: 'dilations', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'FusedDepthwiseConv2dNative',
      category: 'convolution',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'filter', type: 'tensor' },
        { start: 2, end: 0, name: 'args', type: 'tensors' }
      ],
      attrs: [
        { tfName: 'num_args', name: 'numArgs', type: 'number' },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', defaultValue: 'NHWC' },
        { tfName: 'dilations', name: 'dilations', type: 'number[]', defaultValue: [1, 1, 1, 1] },
        { tfName: 'fused_ops', name: 'fusedOps', type: 'string[]', defaultValue: [] },
        {
          tfName: 'explicit_paddings',
          name: 'explicitPaddings',
          type: 'number[]',
          defaultValue: []
        }
      ]
    },
    {
      tfOpName: 'Conv3D',
      category: 'convolution',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'filter', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', defaultValue: 'NHWC' },
        { tfName: 'dilations', name: 'dilations', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'Dilation2D',
      category: 'convolution',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'filter', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'strides', name: 'strides', type: 'number[]' },
        { tfName: 'rates', name: 'dilations', type: 'number[]' },
        { tfName: 'padding', name: 'pad', type: 'string' }
      ]
    }
  ],
  V2 = {};
be(V2, { json: () => X7 });
var X7 = [
    {
      tfOpName: 'Fill',
      category: 'creation',
      inputs: [
        { start: 0, name: 'shape', type: 'number[]' },
        { start: 1, name: 'value', type: 'number' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }]
    },
    {
      tfOpName: 'LinSpace',
      category: 'creation',
      inputs: [
        { start: 0, name: 'start', type: 'number' },
        { start: 1, name: 'stop', type: 'number' },
        { start: 2, name: 'num', type: 'number' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'OneHot',
      category: 'creation',
      inputs: [
        { start: 0, name: 'indices', type: 'tensor' },
        { start: 1, name: 'depth', type: 'number' },
        { start: 2, name: 'onValue', type: 'number', defaultValue: 1 },
        { start: 3, name: 'offValue', type: 'number', defaultValue: 0 }
      ],
      attrs: [
        { tfName: 'axis', name: 'axis', type: 'number', notSupported: !0 },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Ones',
      category: 'creation',
      inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }]
    },
    {
      tfOpName: 'OnesLike',
      category: 'creation',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'dtype', name: 'dtype', type: 'dtype' }]
    },
    {
      tfOpName: 'RandomUniform',
      category: 'creation',
      inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
      attrs: [
        { tfName: 'minval', name: 'minval', type: 'number', defaultValue: 0 },
        { tfName: 'maxval', name: 'maxval', type: 'number', defaultValue: 1 },
        { tfName: 'dtype', name: 'dtype', type: 'dtype' },
        { tfName: 'seed', name: 'seed', type: 'number', defaultValue: 0 },
        { tfName: 'seed2', name: 'seed2', type: 'number', defaultValue: 0, notSupported: !0 },
        { tfName: 'T', name: 'T', type: 'number', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Range',
      category: 'creation',
      inputs: [
        { start: 0, name: 'start', type: 'number' },
        { start: 1, name: 'stop', type: 'number' },
        { start: 2, name: 'step', type: 'number', defaultValue: 0 }
      ],
      attrs: [{ tfName: 'Tidx', name: 'dtype', type: 'dtype' }]
    },
    {
      tfOpName: 'TruncatedNormal',
      category: 'creation',
      inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
      attrs: [
        { tfName: 'means', name: 'mean', type: 'number', defaultValue: 0 },
        { tfName: 'stddev', name: 'stdDev', type: 'number', defaultValue: 1 },
        { tfName: 'seed', name: 'seed', type: 'number' },
        { tfName: 'seed2', name: 'seed2', type: 'number', defaultValue: 0, notSupported: !0 },
        { tfName: 'dtype', name: 'dtype', type: 'dtype' },
        { tfName: 'T', name: 'T', type: 'number', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Zeros',
      category: 'creation',
      inputs: [{ start: 0, name: 'shape', type: 'number[]' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }]
    },
    {
      tfOpName: 'ZerosLike',
      category: 'creation',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype' }]
    },
    {
      tfOpName: 'Multinomial',
      category: 'creation',
      inputs: [
        { start: 0, name: 'logits', type: 'tensor' },
        { start: 1, name: 'numSamples', type: 'number' }
      ],
      attrs: [
        { tfName: 'seed', name: 'seed', type: 'number' },
        { tfName: 'seed2', name: 'seed2', type: 'number' },
        { tfName: 'T', name: 'dtype', type: 'dtype' },
        { tfName: 'output_dtype', name: 'output_dtype', type: 'dtype' }
      ]
    }
  ],
  C2 = {};
be(C2, { json: () => Y7 });
var Y7 = [
    {
      tfOpName: 'NonMaxSuppressionV2',
      category: 'dynamic',
      inputs: [
        { start: 0, name: 'boxes', type: 'tensor' },
        { start: 1, name: 'scores', type: 'tensor' },
        { start: 2, name: 'maxOutputSize', type: 'number' },
        { start: 3, name: 'iouThreshold', type: 'number' }
      ]
    },
    {
      tfOpName: 'NonMaxSuppressionV3',
      category: 'dynamic',
      inputs: [
        { start: 0, name: 'boxes', type: 'tensor' },
        { start: 1, name: 'scores', type: 'tensor' },
        { start: 2, name: 'maxOutputSize', type: 'number' },
        { start: 3, name: 'iouThreshold', type: 'number' },
        { start: 4, name: 'scoreThreshold', type: 'number' }
      ]
    },
    {
      tfOpName: 'NonMaxSuppressionV4',
      category: 'dynamic',
      inputs: [
        { start: 0, name: 'boxes', type: 'tensor' },
        { start: 1, name: 'scores', type: 'tensor' },
        { start: 2, name: 'maxOutputSize', type: 'number' },
        { start: 3, name: 'iouThreshold', type: 'number' },
        { start: 4, name: 'scoreThreshold', type: 'number' }
      ],
      attrs: [
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 },
        { tfName: 'T_threshold', name: 'threshold', type: 'dtype', notSupported: !0 },
        { tfName: 'pad_to_max_output_size', name: 'padToMaxOutputSize', type: 'bool' }
      ]
    },
    {
      tfOpName: 'NonMaxSuppressionV5',
      category: 'dynamic',
      inputs: [
        { start: 0, name: 'boxes', type: 'tensor' },
        { start: 1, name: 'scores', type: 'tensor' },
        { start: 2, name: 'maxOutputSize', type: 'number' },
        { start: 3, name: 'iouThreshold', type: 'number' },
        { start: 4, name: 'scoreThreshold', type: 'number' },
        { start: 5, name: 'softNmsSigma', type: 'number' }
      ]
    },
    {
      tfOpName: 'Where',
      category: 'dynamic',
      inputs: [{ start: 0, name: 'condition', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'ListDiff',
      category: 'dynamic',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'y', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    }
  ],
  F2 = {};
be(F2, { json: () => J7 });
var J7 = [
    {
      tfOpName: 'LowerBound',
      category: 'evaluation',
      inputs: [
        { start: 0, name: 'sortedSequence', type: 'tensor' },
        { start: 1, name: 'values', type: 'tensor' }
      ]
    },
    {
      tfOpName: 'TopKV2',
      category: 'evaluation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'k', type: 'number' }
      ],
      attrs: [{ tfName: 'sorted', name: 'sorted', type: 'bool' }]
    },
    {
      tfOpName: 'UpperBound',
      category: 'evaluation',
      inputs: [
        { start: 0, name: 'sortedSequence', type: 'tensor' },
        { start: 1, name: 'values', type: 'tensor' }
      ]
    },
    {
      tfOpName: 'Unique',
      category: 'evaluation',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }]
    },
    {
      tfOpName: 'UniqueV2',
      category: 'evaluation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number' }
      ]
    }
  ],
  B2 = {};
be(B2, { json: () => Z7 });
var Z7 = [
    {
      tfOpName: 'PlaceholderWithDefault',
      category: 'graph',
      inputs: [{ start: 0, name: 'default', type: 'tensor' }],
      attrs: [
        { tfName: 'shape', name: 'shape', type: 'shape' },
        { tfName: 'dtype', name: 'dtype', type: 'dtype' }
      ]
    },
    {
      tfOpName: 'Placeholder',
      category: 'graph',
      attrs: [
        { tfName: 'shape', name: 'shape', type: 'shape' },
        { tfName: 'dtype', name: 'dtype', type: 'dtype' }
      ]
    },
    { tfOpName: 'Const', category: 'graph' },
    { tfOpName: 'Identity', category: 'graph', inputs: [{ start: 0, name: 'x', type: 'tensor' }] },
    {
      tfOpName: 'IdentityN',
      category: 'graph',
      inputs: [{ start: 0, end: 0, name: 'x', type: 'tensors' }]
    },
    { tfOpName: 'Snapshot', category: 'graph', inputs: [{ start: 0, name: 'x', type: 'tensor' }] },
    { tfOpName: 'Rank', category: 'graph', inputs: [{ start: 0, name: 'x', type: 'tensor' }] },
    { tfOpName: 'Size', category: 'graph', inputs: [{ start: 0, name: 'x', type: 'tensor' }] },
    { tfOpName: 'Shape', category: 'graph', inputs: [{ start: 0, name: 'x', type: 'tensor' }] },
    {
      tfOpName: 'ShapeN',
      category: 'graph',
      inputs: [{ start: 0, end: 0, name: 'x', type: 'tensors' }]
    },
    {
      tfOpName: 'Print',
      category: 'graph',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'data', type: 'tensors' }
      ],
      attrs: [
        { tfName: 'message', name: 'message', type: 'string' },
        { tfName: 'first_n', name: 'firstN', type: 'number', notSupported: !0 },
        { tfName: 'summarize', name: 'summarize', type: 'number', defaultValue: 3 }
      ]
    },
    { tfOpName: 'NoOp', category: 'graph', inputs: [] },
    {
      tfOpName: 'StopGradient',
      category: 'graph',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }]
    },
    {
      tfOpName: 'FakeQuantWithMinMaxVars',
      category: 'graph',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'min', name: 'min', type: 'number' },
        { tfName: 'max', name: 'max', type: 'number' }
      ]
    }
  ],
  P2 = {};
be(P2, { json: () => Q7 });
var Q7 = [
    {
      tfOpName: 'HashTable',
      category: 'hash_table',
      inputs: [],
      attrs: [
        { tfName: 'shared_name', name: 'sharedName', type: 'string' },
        { tfName: 'use_node_name_sharing', name: 'useNodeNameSharing', type: 'bool' },
        { tfName: 'key_dtype', name: 'keyDType', type: 'dtype' },
        { tfName: 'value_dtype', name: 'valueDType', type: 'dtype' }
      ]
    },
    {
      tfOpName: 'HashTableV2',
      category: 'hash_table',
      inputs: [],
      attrs: [
        { tfName: 'shared_name', name: 'sharedName', type: 'string' },
        { tfName: 'use_node_name_sharing', name: 'useNodeNameSharing', type: 'bool' },
        { tfName: 'key_dtype', name: 'keyDType', type: 'dtype' },
        { tfName: 'value_dtype', name: 'valueDType', type: 'dtype' }
      ]
    },
    {
      tfOpName: 'LookupTableImport',
      category: 'hash_table',
      inputs: [
        { start: 0, name: 'tableHandle', type: 'tensor' },
        { start: 1, name: 'keys', type: 'tensor' },
        { start: 2, name: 'values', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
        { tfName: 'Tout', name: 'tOut', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'LookupTableImportV2',
      category: 'hash_table',
      inputs: [
        { start: 0, name: 'tableHandle', type: 'tensor' },
        { start: 1, name: 'keys', type: 'tensor' },
        { start: 2, name: 'values', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
        { tfName: 'Tout', name: 'tOut', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'LookupTableFind',
      category: 'hash_table',
      inputs: [
        { start: 0, name: 'tableHandle', type: 'tensor' },
        { start: 1, name: 'keys', type: 'tensor' },
        { start: 2, name: 'defaultValue', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
        { tfName: 'Tout', name: 'tOut', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'LookupTableFindV2',
      category: 'hash_table',
      inputs: [
        { start: 0, name: 'tableHandle', type: 'tensor' },
        { start: 1, name: 'keys', type: 'tensor' },
        { start: 2, name: 'defaultValue', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'Tin', name: 'tIn', type: 'dtype', notSupported: !0 },
        { tfName: 'Tout', name: 'tOut', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'LookupTableSize',
      category: 'hash_table',
      inputs: [{ start: 0, name: 'tableHandle', type: 'tensor' }]
    },
    {
      tfOpName: 'LookupTableSizeV2',
      category: 'hash_table',
      inputs: [{ start: 0, name: 'tableHandle', type: 'tensor' }]
    }
  ],
  R2 = {};
be(R2, { json: () => ec });
var ec = [
    {
      tfOpName: 'ResizeBilinear',
      category: 'image',
      inputs: [
        { start: 0, name: 'images', type: 'tensor' },
        { start: 1, name: 'size', type: 'number[]' }
      ],
      attrs: [
        { tfName: 'align_corners', name: 'alignCorners', type: 'bool' },
        { tfName: 'half_pixel_centers', name: 'halfPixelCenters', type: 'bool' },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'ResizeNearestNeighbor',
      category: 'image',
      inputs: [
        { start: 0, name: 'images', type: 'tensor' },
        { start: 1, name: 'size', type: 'number[]' }
      ],
      attrs: [
        { tfName: 'align_corners', name: 'alignCorners', type: 'bool' },
        { tfName: 'half_pixel_centers', name: 'halfPixelCenters', type: 'bool' },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'CropAndResize',
      category: 'image',
      inputs: [
        { start: 0, name: 'image', type: 'tensor' },
        { start: 1, name: 'boxes', type: 'tensor' },
        { start: 2, name: 'boxInd', type: 'tensor' },
        { start: 3, name: 'cropSize', type: 'number[]' }
      ],
      attrs: [
        { tfName: 'method', name: 'method', type: 'string' },
        { tfName: 'extrapolation_value', name: 'extrapolationValue', type: 'number' }
      ]
    },
    {
      tfOpName: 'ImageProjectiveTransformV3',
      category: 'image',
      inputs: [
        { start: 0, name: 'images', type: 'tensor' },
        { start: 1, name: 'transforms', type: 'tensor' },
        { start: 2, name: 'outputShape', type: 'number[]' },
        { start: 3, name: 'fillValue', type: 'number' }
      ],
      attrs: [
        { tfName: 'interpolation', name: 'interpolation', type: 'string' },
        { tfName: 'fill_mode', name: 'fillMode', type: 'string' }
      ]
    }
  ],
  L2 = {};
be(L2, { json: () => tc });
var tc = [
    {
      tfOpName: 'Equal',
      category: 'logical',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'NotEqual',
      category: 'logical',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Greater',
      category: 'logical',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'GreaterEqual',
      category: 'logical',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Less',
      category: 'logical',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'LessEqual',
      category: 'logical',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'LogicalAnd',
      category: 'logical',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'LogicalNot',
      category: 'logical',
      inputs: [{ start: 0, name: 'a', type: 'tensor' }],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'LogicalOr',
      category: 'logical',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Select',
      category: 'logical',
      inputs: [
        { start: 0, name: 'condition', type: 'tensor' },
        { start: 1, name: 'a', type: 'tensor' },
        { start: 2, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'SelectV2',
      category: 'logical',
      inputs: [
        { start: 0, name: 'condition', type: 'tensor' },
        { start: 1, name: 'a', type: 'tensor' },
        { start: 2, name: 'b', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    }
  ],
  U2 = {};
be(U2, { json: () => ac });
var ac = [
    {
      tfOpName: '_FusedMatMul',
      category: 'matrices',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' },
        { start: 2, end: 0, name: 'args', type: 'tensors' }
      ],
      attrs: [
        { tfName: 'num_args', name: 'numArgs', type: 'number' },
        { tfName: 'fused_ops', name: 'fusedOps', type: 'string[]', defaultValue: [] },
        { tfName: 'epsilon', name: 'epsilon', type: 'number', defaultValue: 1e-4 },
        { tfName: 'transpose_a', name: 'transposeA', type: 'bool', defaultValue: !1 },
        { tfName: 'transpose_b', name: 'transposeB', type: 'bool', defaultValue: !1 },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'MatMul',
      category: 'matrices',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'transpose_a', name: 'transposeA', type: 'bool', defaultValue: !1 },
        { tfName: 'transpose_b', name: 'transposeB', type: 'bool', defaultValue: !1 },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'BatchMatMul',
      category: 'matrices',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'adj_x', name: 'transposeA', type: 'bool', defaultValue: !1 },
        { tfName: 'adj_y', name: 'transposeB', type: 'bool', defaultValue: !1 },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'BatchMatMulV2',
      category: 'matrices',
      inputs: [
        { start: 0, name: 'a', type: 'tensor' },
        { start: 1, name: 'b', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'adj_x', name: 'transposeA', type: 'bool', defaultValue: !1 },
        { tfName: 'adj_y', name: 'transposeB', type: 'bool', defaultValue: !1 },
        { tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Transpose',
      category: 'matrices',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'perm', type: 'number[]' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'Einsum',
      category: 'matrices',
      inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
      attrs: [
        { tfName: 'equation', name: 'equation', type: 'string' },
        { tfName: 'N', name: 'n', type: 'number', defaultValue: 2 },
        { tfName: 'T', name: 'dtype', type: 'dtype' }
      ]
    }
  ],
  z2 = {};
be(z2, { json: () => rc });
var rc = [
    {
      tfOpName: 'EuclideanNorm',
      category: 'normalization',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number[]' }
      ],
      attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool', defaultValue: !1 }]
    },
    {
      tfOpName: 'FusedBatchNorm',
      category: 'normalization',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'scale', type: 'tensor' },
        { start: 2, name: 'offset', type: 'tensor' },
        { start: 3, name: 'mean', type: 'tensor' },
        { start: 4, name: 'variance', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'epsilon', name: 'epsilon', type: 'number', defaultValue: 0.001 },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'FusedBatchNormV2',
      category: 'normalization',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'scale', type: 'tensor' },
        { start: 2, name: 'offset', type: 'tensor' },
        { start: 3, name: 'mean', type: 'tensor' },
        { start: 4, name: 'variance', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'epsilon', name: 'epsilon', type: 'number', defaultValue: 0.001 },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'FusedBatchNormV3',
      category: 'normalization',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'scale', type: 'tensor' },
        { start: 2, name: 'offset', type: 'tensor' },
        { start: 3, name: 'mean', type: 'tensor' },
        { start: 4, name: 'variance', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'epsilon', name: 'epsilon', type: 'number', defaultValue: 0.001 },
        { tfName: 'data_format', name: 'dataFormat', type: 'string', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'LRN',
      category: 'normalization',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'depth_radius', name: 'radius', type: 'number', defaultValue: 5 },
        { tfName: 'bias', name: 'bias', type: 'number', defaultValue: 1 },
        { tfName: 'alpha', name: 'alpha', type: 'number', defaultValue: 1 },
        { tfName: 'beta', name: 'beta', type: 'number', defaultValue: 0.5 }
      ]
    },
    {
      tfOpName: 'Softmax',
      category: 'normalization',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }]
    },
    {
      tfOpName: 'LogSoftmax',
      category: 'normalization',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }]
    },
    {
      tfOpName: 'SparseToDense',
      category: 'normalization',
      inputs: [
        { start: 0, name: 'sparseIndices', type: 'tensor' },
        { start: 1, name: 'outputShape', type: 'number[]' },
        { start: 2, name: 'sparseValues', type: 'tensor' },
        { start: 3, name: 'defaultValue', type: 'tensor' }
      ],
      attrs: [
        {
          tfName: 'validate_indices',
          name: 'validateIndices',
          type: 'bool',
          defaultValue: !0,
          notSupported: !0
        }
      ]
    }
  ],
  j2 = {};
be(j2, { json: () => nc });
var nc = [
    {
      tfOpName: 'Bincount',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'size', type: 'number' },
        { start: 2, name: 'weights', type: 'tensor' }
      ]
    },
    {
      tfOpName: 'DenseBincount',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'size', type: 'number' },
        { start: 2, name: 'weights', type: 'tensor' }
      ],
      attrs: [{ tfName: 'binary_output', name: 'binaryOutput', type: 'bool' }]
    },
    {
      tfOpName: 'Max',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number[]' }
      ],
      attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }]
    },
    {
      tfOpName: 'Mean',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number[]' }
      ],
      attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }]
    },
    {
      tfOpName: 'Min',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number[]' }
      ],
      attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }]
    },
    {
      tfOpName: 'Sum',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number[]' }
      ],
      attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }]
    },
    {
      tfOpName: 'All',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number[]' }
      ],
      attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }]
    },
    {
      tfOpName: 'Any',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number[]' }
      ],
      attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }]
    },
    {
      tfOpName: 'ArgMax',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number' }
      ]
    },
    {
      tfOpName: 'ArgMin',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number' }
      ]
    },
    {
      tfOpName: 'Prod',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number[]' }
      ],
      attrs: [{ tfName: 'keep_dims', name: 'keepDims', type: 'bool' }]
    },
    {
      tfOpName: 'Cumprod',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number' }
      ],
      attrs: [
        { tfName: 'exclusive', name: 'exclusive', type: 'bool' },
        { tfName: 'reverse', name: 'reverse', type: 'bool' }
      ]
    },
    {
      tfOpName: 'Cumsum',
      category: 'reduction',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number' }
      ],
      attrs: [
        { tfName: 'exclusive', name: 'exclusive', type: 'bool' },
        { tfName: 'reverse', name: 'reverse', type: 'bool' }
      ]
    }
  ],
  M2 = {};
be(M2, { json: () => sc });
var sc = [
    {
      tfOpName: 'ConcatV2',
      category: 'slice_join',
      inputs: [
        { start: 0, end: -1, name: 'tensors', type: 'tensors' },
        { start: -1, name: 'axis', type: 'number' }
      ],
      attrs: [{ tfName: 'N', name: 'n', type: 'number', defaultValue: 2 }]
    },
    {
      tfOpName: 'Concat',
      category: 'slice_join',
      inputs: [
        { start: 1, end: 0, name: 'tensors', type: 'tensors' },
        { start: 0, name: 'axis', type: 'number' }
      ],
      attrs: [{ tfName: 'N', name: 'n', type: 'number', defaultValue: 2 }]
    },
    {
      tfOpName: 'GatherV2',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'indices', type: 'tensor' },
        { start: 2, name: 'axis', type: 'number', defaultValue: 0 }
      ],
      attrs: [{ tfName: 'batch_dims', name: 'batchDims', type: 'number', defaultValue: 0 }]
    },
    {
      tfOpName: 'Gather',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'indices', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'validate_indices', name: 'validateIndices', type: 'bool', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Reverse',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'dims', type: 'bool[]' }
      ]
    },
    {
      tfOpName: 'ReverseV2',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'Slice',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'begin', type: 'number[]' },
        { start: 2, name: 'size', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'StridedSlice',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'begin', type: 'number[]' },
        { start: 2, name: 'end', type: 'number[]' },
        { start: 3, name: 'strides', type: 'number[]' }
      ],
      attrs: [
        { tfName: 'begin_mask', name: 'beginMask', type: 'number', defaultValue: 0 },
        { tfName: 'end_mask', name: 'endMask', type: 'number', defaultValue: 0 },
        { tfName: 'new_axis_mask', name: 'newAxisMask', type: 'number', defaultValue: 0 },
        { tfName: 'ellipsis_mask', name: 'ellipsisMask', type: 'number', defaultValue: 0 },
        { tfName: 'shrink_axis_mask', name: 'shrinkAxisMask', type: 'number', defaultValue: 0 }
      ]
    },
    {
      tfOpName: 'Pack',
      category: 'slice_join',
      inputs: [{ start: 0, end: 0, name: 'tensors', type: 'tensors' }],
      attrs: [{ tfName: 'axis', name: 'axis', type: 'number', defaultValue: 0 }]
    },
    {
      tfOpName: 'Unpack',
      category: 'slice_join',
      inputs: [{ start: 0, name: 'tensor', type: 'tensor' }],
      attrs: [
        { tfName: 'axis', name: 'axis', type: 'number', defaultValue: 0 },
        { tfName: 'num', name: 'num', type: 'number', defaultValue: 0, notSupported: !0 }
      ]
    },
    {
      tfOpName: 'Tile',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'reps', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'Split',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'axis', type: 'number', defaultValue: 0 },
        { start: 1, name: 'x', type: 'tensor' }
      ],
      attrs: [{ tfName: 'num_split', name: 'numOrSizeSplits', type: 'number', defaultValue: 1 }]
    },
    {
      tfOpName: 'SplitV',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'numOrSizeSplits', type: 'number[]' },
        { start: 2, name: 'axis', type: 'number', defaultValue: 0 }
      ]
    },
    {
      tfOpName: 'ScatterNd',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'indices', type: 'tensor' },
        { start: 1, name: 'values', type: 'tensor' },
        { start: 2, name: 'shape', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'GatherNd',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'indices', type: 'tensor' }
      ]
    },
    {
      tfOpName: 'SparseToDense',
      category: 'slice_join',
      inputs: [
        { start: 0, name: 'sparseIndices', type: 'tensor' },
        { start: 1, name: 'outputShape', type: 'number[]' },
        { start: 2, name: 'sparseValues', type: 'tensor' },
        { start: 3, name: 'defaultValue', type: 'tensor' }
      ],
      attrs: [
        {
          tfName: 'validate_indices',
          name: 'validateIndices',
          type: 'bool',
          defaultValue: !1,
          notSupported: !0
        }
      ]
    }
  ],
  q2 = {};
be(q2, { json: () => pc });
var pc = [
    {
      tfOpName: 'SparseFillEmptyRows',
      category: 'sparse',
      inputs: [
        { start: 0, name: 'indices', type: 'tensor' },
        { start: 1, name: 'values', type: 'tensor' },
        { start: 2, name: 'denseShape', type: 'tensor' },
        { start: 3, name: 'defaultValue', type: 'tensor' }
      ]
    },
    {
      tfOpName: 'SparseReshape',
      category: 'sparse',
      inputs: [
        { start: 0, name: 'inputIndices', type: 'tensor' },
        { start: 1, name: 'inputShape', type: 'tensor' },
        { start: 2, name: 'newShape', type: 'tensor' }
      ],
      attrs: [{ tfName: 'T', name: 'dtype', type: 'dtype', notSupported: !0 }]
    },
    {
      tfOpName: 'SparseSegmentMean',
      category: 'sparse',
      inputs: [
        { start: 0, name: 'data', type: 'tensor' },
        { start: 1, name: 'indices', type: 'tensor' },
        { start: 2, name: 'segmentIds', type: 'tensor' }
      ]
    },
    {
      tfOpName: 'SparseSegmentSum',
      category: 'sparse',
      inputs: [
        { start: 0, name: 'data', type: 'tensor' },
        { start: 1, name: 'indices', type: 'tensor' },
        { start: 2, name: 'segmentIds', type: 'tensor' }
      ]
    }
  ],
  H2 = {};
be(H2, { json: () => ic });
var ic = [
    { tfOpName: 'FFT', category: 'spectral', inputs: [{ start: 0, name: 'x', type: 'tensor' }] },
    { tfOpName: 'IFFT', category: 'spectral', inputs: [{ start: 0, name: 'x', type: 'tensor' }] },
    {
      tfOpName: 'RFFT',
      category: 'spectral',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'fft_length', type: 'number', notSupported: !0 }
      ]
    },
    {
      tfOpName: 'IRFFT',
      category: 'spectral',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'fft_length', type: 'number', notSupported: !0 }
      ]
    }
  ],
  W2 = {};
be(W2, { json: () => oc });
var oc = [
    {
      tfOpName: 'StringNGrams',
      category: 'string',
      inputs: [
        { start: 0, name: 'data', type: 'tensor' },
        { start: 1, name: 'dataSplits', type: 'tensor' }
      ],
      attrs: [
        { tfName: 'separator', name: 'separator', type: 'string' },
        { tfName: 'ngram_widths', name: 'nGramWidths', type: 'number[]' },
        { tfName: 'left_pad', name: 'leftPad', type: 'string' },
        { tfName: 'right_pad', name: 'rightPad', type: 'string' },
        { tfName: 'pad_width', name: 'padWidth', type: 'number' },
        { tfName: 'preserve_short_sequences', name: 'preserveShortSequences', type: 'bool' }
      ],
      outputs: ['ngrams', 'ngrams_splits']
    },
    {
      tfOpName: 'StringSplit',
      category: 'string',
      inputs: [
        { start: 0, name: 'input', type: 'tensor' },
        { start: 1, name: 'delimiter', type: 'tensor' }
      ],
      attrs: [{ tfName: 'skip_empty', name: 'skipEmpty', type: 'bool' }],
      outputs: ['indices', 'values', 'shape']
    },
    {
      tfOpName: 'StringToHashBucketFast',
      category: 'string',
      inputs: [{ start: 0, name: 'input', type: 'tensor' }],
      attrs: [{ tfName: 'num_buckets', name: 'numBuckets', type: 'number' }]
    }
  ],
  K2 = {};
be(K2, { json: () => dc });
var dc = [
    {
      tfOpName: 'Cast',
      category: 'transformation',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'SrcT', name: 'sdtype', type: 'dtype', notSupported: !0 },
        { tfName: 'DstT', name: 'dtype', type: 'dtype' }
      ]
    },
    {
      tfOpName: 'ExpandDims',
      category: 'transformation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'axis', type: 'number' }
      ]
    },
    {
      tfOpName: 'MirrorPad',
      category: 'transformation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'padding', type: 'number[]' }
      ],
      attrs: [{ tfName: 'mode', name: 'mode', type: 'string' }]
    },
    {
      tfOpName: 'Pad',
      category: 'transformation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'padding', type: 'number[]' }
      ],
      attrs: [{ tfName: 'constant_value', name: 'constantValue', type: 'number', defaultValue: 0 }]
    },
    {
      tfOpName: 'PadV2',
      category: 'transformation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'padding', type: 'number[]' },
        { start: 2, name: 'constantValue', type: 'number', defaultValue: 0 }
      ]
    },
    {
      tfOpName: 'Reshape',
      category: 'transformation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'shape', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'Squeeze',
      category: 'transformation',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [{ tfName: 'axis', tfDeprecatedName: 'squeeze_dims', name: 'axis', type: 'number[]' }]
    },
    {
      tfOpName: 'SpaceToBatchND',
      category: 'transformation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'blockShape', type: 'number[]' },
        { start: 2, name: 'paddings', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'BatchToSpaceND',
      category: 'transformation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'blockShape', type: 'number[]' },
        { start: 2, name: 'crops', type: 'number[]' }
      ]
    },
    {
      tfOpName: 'DepthToSpace',
      category: 'transformation',
      inputs: [{ start: 0, name: 'x', type: 'tensor' }],
      attrs: [
        { tfName: 'block_size', name: 'blockSize', type: 'number' },
        { tfName: 'data_format', name: 'dataFormat', type: 'string' }
      ]
    },
    {
      tfOpName: 'BroadcastTo',
      category: 'transformation',
      inputs: [
        { start: 0, name: 'x', type: 'tensor' },
        { start: 1, name: 'shape', type: 'number[]' }
      ],
      attrs: []
    },
    {
      tfOpName: 'BroadcastArgs',
      category: 'transformation',
      inputs: [
        { start: 0, name: 's0', type: 'tensor' },
        { start: 1, name: 's1', type: 'tensor' }
      ],
      attrs: []
    }
  ],
  G2 = class {
    static get Instance() {
      return this._instance || (this._instance = new this());
    }
    constructor() {
      let e = [k2, $2, I2, O2, V2, C2, F2, B2, P2, R2, L2, U2, z2, j2, M2, q2, H2, W2, K2],
        t = [].concat(...e.map((a) => a.json));
      this.opMappers = t.reduce((a, r) => ((a[r.tfOpName] = r), a), {});
    }
    transformGraph(e, t = {}) {
      let a = e.node,
        r = [],
        n = [],
        s = [],
        p = a.reduce(
          (y, N) => (
            (y[N.name] = this.mapNode(N)),
            N.op.startsWith('Placeholder')
              ? r.push(y[N.name])
              : N.op === 'Const'
              ? n.push(y[N.name])
              : (N.input == null || N.input.length === 0) && s.push(y[N.name]),
            y
          ),
          {}
        ),
        i = [],
        d = [],
        l = {},
        m = {};
      t != null &&
        ((l = this.mapSignatureEntries(t.inputs)), (m = this.mapSignatureEntries(t.outputs)));
      let u = Object.keys(p);
      u.forEach((y) => {
        let N = p[y];
        N.inputNames.forEach((T, O) => {
          let [B, , M] = Vt(T),
            C = p[B];
          if (C.outputs != null) {
            let L = C.outputs.indexOf(M);
            if (L !== -1) {
              let z = `${B}:${L}`;
              N.inputNames[O] = z;
            }
          }
          N.inputs.push(C), C.children.push(N);
        });
      }),
        Object.keys(m).length === 0
          ? u.forEach((y) => {
              let N = p[y];
              N.children.length === 0 && d.push(N);
            })
          : Object.keys(m).forEach((y) => {
              let [N] = Vt(y),
                T = p[N];
              T != null && ((T.signatureKey = m[y]), d.push(T));
            }),
        Object.keys(l).length > 0
          ? Object.keys(l).forEach((y) => {
              let [N] = Vt(y),
                T = p[N];
              T && ((T.signatureKey = l[y]), i.push(T));
            })
          : (i = r);
      let f = {};
      e.library != null &&
        e.library.function != null &&
        (f = e.library.function.reduce(
          (y, N) => ((y[N.signature.name] = this.mapFunction(N)), y),
          {}
        ));
      let g = {
        nodes: p,
        inputs: i,
        outputs: d,
        weights: n,
        placeholders: r,
        signature: t,
        functions: f
      };
      return s.length > 0 && (g.initNodes = s), g;
    }
    mapSignatureEntries(e) {
      return Object.keys(e || {}).reduce((t, a) => ((t[e[a].name] = a), t), {});
    }
    mapNode(e) {
      let t = A2(e.op) || this.opMappers[e.op] || {};
      e.attr == null && (e.attr = {});
      let a = {
        name: e.name,
        op: e.op,
        category: t.category,
        inputNames: (e.input || []).map((r) => (r.startsWith('^') ? r.slice(1) : r)),
        inputs: [],
        children: [],
        inputParams: {},
        attrParams: {},
        rawAttrs: e.attr,
        outputs: t.outputs
      };
      return (
        t.inputs != null &&
          (a.inputParams = t.inputs.reduce(
            (r, n) => (
              (r[n.name] = { type: n.type, inputIndexStart: n.start, inputIndexEnd: n.end }), r
            ),
            {}
          )),
        t.attrs != null &&
          (a.attrParams = t.attrs.reduce((r, n) => {
            let s = n.type,
              p;
            switch (n.type) {
              case 'string':
                (p = as(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = as(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'string[]':
                (p = ls(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = ls(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'number':
                (p = ns(e.attr, n.tfName, n.defaultValue || 0)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = ns(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'number[]':
                (p = ds(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = ds(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'bool':
                (p = rs(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = rs(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'bool[]':
                (p = us(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = us(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'shape':
                (p = os(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = os(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'shape[]':
                (p = ms(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = ms(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'dtype':
                (p = ps(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = ps(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'dtype[]':
                (p = is(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = is(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'func':
                (p = Y2(e.attr, n.tfName, n.defaultValue)),
                  p === void 0 &&
                    !!n.tfDeprecatedName &&
                    (p = Y2(e.attr, n.tfDeprecatedName, n.defaultValue));
                break;
              case 'tensor':
              case 'tensors':
                break;
              default:
                throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`);
            }
            return (r[n.name] = { value: p, type: s }), r;
          }, {})),
        a
      );
    }
    mapFunction(e) {
      let t = e.nodeDef,
        a = [],
        r = [],
        n = {};
      t != null &&
        (n = t.reduce(
          (m, u) => ((m[u.name] = this.mapNode(u)), u.op === 'Const' && r.push(m[u.name]), m),
          {}
        ));
      let s = [],
        p = [];
      e.signature.inputArg.forEach((m) => {
        let [u] = Vt(m.name),
          f = {
            name: u,
            op: 'Placeholder',
            inputs: [],
            inputNames: [],
            category: 'graph',
            inputParams: {},
            attrParams: { dtype: { value: ss(m.type), type: 'dtype' } },
            children: []
          };
        (f.signatureKey = m.name), s.push(f), (n[u] = f);
      }),
        Object.keys(n).forEach((m) => {
          let u = n[m];
          u.inputNames.forEach((f, g) => {
            let [y, , N] = Vt(f),
              T = n[y];
            if (T.outputs != null) {
              let O = T.outputs.indexOf(N);
              if (O !== -1) {
                let B = `${y}:${O}`;
                u.inputNames[g] = B;
              }
            }
            u.inputs.push(T), T.children.push(u);
          });
        });
      let d = e.ret;
      e.signature.outputArg.forEach((m) => {
        let [u, f] = Vt(d[m.name]),
          g = n[u];
        g != null && ((g.defaultOutput = f), p.push(g));
      });
      let l = this.mapArgsToSignature(e);
      return { nodes: n, inputs: s, outputs: p, weights: r, placeholders: a, signature: l };
    }
    mapArgsToSignature(e) {
      return {
        methodName: e.signature.name,
        inputs: e.signature.inputArg.reduce(
          (t, a) => ((t[a.name] = this.mapArgToTensorInfo(a)), t),
          {}
        ),
        outputs: e.signature.outputArg.reduce(
          (t, a) => ((t[a.name] = this.mapArgToTensorInfo(a, e.ret)), t),
          {}
        )
      };
    }
    mapArgToTensorInfo(e, t) {
      let a = e.name;
      return t != null && (a = t[a]), { name: a, dtype: e.type };
    }
  };
function lc(e) {
  let t = fe().global;
  if (typeof t.atob != 'undefined') return t.atob(e);
  if (typeof Buffer != 'undefined') return new Buffer(e, 'base64').toString();
  throw new Error(
    'Unable to decode base64 in this environment. Missing built-in atob() or Buffer()'
  );
}
function X2(e, t) {
  let a = Array.isArray(e) ? String.fromCharCode.apply(null, e) : lc(e);
  return t ? a : a.toLowerCase();
}
function as(e, t, a, r = !1) {
  let n = e[t];
  return n != null ? X2(n.s, r) : a;
}
function rs(e, t, a) {
  let r = e[t];
  return r ? r.b : a;
}
function ns(e, t, a) {
  let r = e[t] || {},
    n = r.i != null ? r.i : r.f != null ? r.f : a;
  return typeof n == 'number' ? n : parseInt(n, 10);
}
function ss(e) {
  switch ((typeof e == 'string' && (e = ht[e]), e)) {
    case ht.DT_FLOAT:
    case ht.DT_HALF:
      return 'float32';
    case ht.DT_INT32:
    case ht.DT_INT64:
    case ht.DT_INT8:
    case ht.DT_UINT8:
      return 'int32';
    case ht.DT_BOOL:
      return 'bool';
    case ht.DT_DOUBLE:
      return 'float32';
    case ht.DT_STRING:
      return 'string';
    default:
      return null;
  }
}
function Y2(e, t, a) {
  let r = e[t];
  return r && r.func ? r.func.name : a;
}
function ps(e, t, a) {
  let r = e[t];
  return r && r.type ? ss(r.type) : a;
}
function is(e, t, a) {
  let r = e[t];
  return r && r.list && r.list.type ? r.list.type.map((n) => ss(n)) : a;
}
function J2(e) {
  if (!e.unknownRank)
    return e.dim != null
      ? e.dim.map((t) => (typeof t.size == 'number' ? t.size : parseInt(t.size, 10)))
      : [];
}
function os(e, t, a) {
  let r = e[t];
  return r && r.shape ? J2(r.shape) : a;
}
function ds(e, t, a) {
  let r = e[t];
  return r
    ? ((r.list.f && r.list.f.length ? r.list.f : r.list.i) || []).map((n) =>
        typeof n == 'number' ? n : parseInt(n, 10)
      )
    : a;
}
function ls(e, t, a, r = !1) {
  let n = e[t];
  return n && n.list && n.list.s ? n.list.s.map((s) => X2(s, r)) : a;
}
function ms(e, t, a) {
  let r = e[t];
  return r && r.list && r.list.shape ? r.list.shape.map((n) => J2(n)) : a;
}
function us(e, t, a) {
  let r = e[t];
  return r && r.list && r.list.b ? r.list.b : a;
}
var mc = class {
    constructor(e, t, a) {
      (this.node = e),
        (this.tensorMap = t),
        (this.context = a),
        (this.inputs = []),
        (this.attrs = {}),
        (this.inputs = e.inputNames.map((r) => this.getInput(r))),
        e.rawAttrs != null &&
          (this.attrs = Object.keys(e.rawAttrs).reduce(
            (r, n) => ((r[n] = this.getAttr(n)), r),
            {}
          ));
    }
    getInput(e) {
      return Ze(e, this.tensorMap, this.context);
    }
    getAttr(e, t) {
      let a = this.node.rawAttrs[e];
      if (a.tensor != null) return Ze(e, this.tensorMap, this.context);
      if (a.i != null || a.f != null) return ns(this.node.rawAttrs, e, t);
      if (a.s != null) return as(this.node.rawAttrs, e, t);
      if (a.b != null) return rs(this.node.rawAttrs, e, t);
      if (a.shape != null) return os(this.node.rawAttrs, e, t);
      if (a.type != null) return ps(this.node.rawAttrs, e, t);
      if (a.list != null) {
        if (a.list.i != null || a.list.f != null) return ds(this.node.rawAttrs, e, t);
        if (a.list.s != null) return ls(this.node.rawAttrs, e, t);
        if (a.list.shape != null) return ms(this.node.rawAttrs, e, t);
        if (a.list.b != null) return us(this.node.rawAttrs, e, t);
        if (a.list.type != null) return is(this.node.rawAttrs, e, t);
      }
      return t;
    }
  },
  uc = (e, t, a) => {
    switch (e.op) {
      case 'BiasAdd':
      case 'AddV2':
      case 'Add':
        return [ae(h('a', e, t, a), h('b', e, t, a))];
      case 'AddN':
        return [H3(h('tensors', e, t, a))];
      case 'FloorMod':
      case 'Mod':
        return [k9(h('a', e, t, a), h('b', e, t, a))];
      case 'Mul':
        return [K(h('a', e, t, a), h('b', e, t, a))];
      case 'RealDiv':
      case 'Div':
        return [ce(h('a', e, t, a), h('b', e, t, a))];
      case 'DivNoNan':
        return [gu(h('a', e, t, a), h('b', e, t, a))];
      case 'FloorDiv':
        return [Hi(h('a', e, t, a), h('b', e, t, a))];
      case 'Sub':
        return [le(h('a', e, t, a), h('b', e, t, a))];
      case 'Minimum':
        return [m2(h('a', e, t, a), h('b', e, t, a))];
      case 'Maximum':
        return [l2(h('a', e, t, a), h('b', e, t, a))];
      case 'Pow':
        return [va(h('a', e, t, a), h('b', e, t, a))];
      case 'SquaredDifference':
        return [N2(h('a', e, t, a), h('b', e, t, a))];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  cc = (e, t, a) => {
    switch (e.op) {
      case 'Abs':
      case 'ComplexAbs':
        return [it(h('x', e, t, a))];
      case 'Acos':
        return [z3(h('x', e, t, a))];
      case 'Acosh':
        return [M3(h('x', e, t, a))];
      case 'Asin':
        return [tm(h('x', e, t, a))];
      case 'Asinh':
        return [rm(h('x', e, t, a))];
      case 'Atan':
        return [sm(h('x', e, t, a))];
      case 'Atan2':
        return [im(h('x', e, t, a), h('y', e, t, a))];
      case 'Atanh':
        return [dm(h('x', e, t, a))];
      case 'Ceil':
        return [Cm(h('x', e, t, a))];
      case 'Complex':
        return [Qt(h('real', e, t, a), h('imag', e, t, a))];
      case 'Cos':
        return [Zm(h('x', e, t, a))];
      case 'Cosh':
        return [eu(h('x', e, t, a))];
      case 'Elu':
        return [Zi(h('x', e, t, a))];
      case 'Erf':
        return [Su(h('x', e, t, a))];
      case 'Exp':
        return [zt(h('x', e, t, a))];
      case 'Expm1':
        return [Pu(h('x', e, t, a))];
      case 'Floor':
        return [e2(h('x', e, t, a))];
      case 'Log':
        return [ya(h('x', e, t, a))];
      case 'Log1p':
        return [n2(h('x', e, t, a))];
      case 'Imag':
        return [or(h('x', e, t, a))];
      case 'Neg':
        return [Lt(h('x', e, t, a))];
      case 'Reciprocal':
        return [a5(h('x', e, t, a))];
      case 'Real':
        return [ha(h('x', e, t, a))];
      case 'Relu':
        return [Nr(h('x', e, t, a))];
      case 'Round':
        return [y2(h('x', e, t, a))];
      case 'Selu':
        return [h5(h('x', e, t, a))];
      case 'Sigmoid':
        return [b1(h('x', e, t, a))];
      case 'Sin':
        return [N5(h('x', e, t, a))];
      case 'Sign':
        return [w5(h('x', e, t, a))];
      case 'Sinh':
        return [S5(h('x', e, t, a))];
      case 'Softplus':
        return [s2(h('x', e, t, a))];
      case 'Sqrt':
        return [Ut(h('x', e, t, a))];
      case 'Square':
        return [Dt(h('x', e, t, a))];
      case 'Tanh':
        return [Fn(h('x', e, t, a))];
      case 'Tan':
        return [q5(h('x', e, t, a))];
      case 'ClipByValue':
        return [Xi(h('x', e, t, a), h('clipValueMin', e, t, a), h('clipValueMax', e, t, a))];
      case 'Relu6':
        return [g2(h('x', e, t, a))];
      case 'Rsqrt':
        return [u5(Ze(e.inputNames[0], t, a))];
      case 'Prod':
        return [f2(h('x', e, t, a), h('axes', e, t, a))];
      case 'LeakyRelu':
        return [r2(h('x', e, t, a), h('alpha', e, t, a))];
      case 'Prelu':
        return [h2(h('x', e, t, a), h('alpha', e, t, a))];
      case 'IsNan':
        return [Gu(Ze(e.inputNames[0], t, a))];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  };
function ft(e, t, a = '') {
  if (!(typeof e == 'number' || typeof t == 'number')) {
    Qe.assert(e.length === t.length, () => a + ` Shapes ${e} and ${t} must match`);
    for (let r = 0; r < e.length; r++) {
      let n = e[r],
        s = t[r];
      Qe.assert(n < 0 || s < 0 || n === s, () => a + ` Shapes ${e} and ${t} must match`);
    }
  }
}
function Z2(e) {
  return !(typeof e == 'number' || e.some((t) => t < 0));
}
function _a(e, t, a) {
  let r = cs(e, a),
    n = !Z2(r);
  if (n && t.length === 0)
    throw new Error(
      `Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`
    );
  if (
    (n &&
      t.forEach((s) => {
        r = cs(s.shape, r);
      }),
    !Z2(r))
  )
    throw new Error(`Non-fully-defined elementShape: ${r}`);
  return r;
}
function cs(e, t) {
  if (typeof e == 'number') return t;
  if (typeof t == 'number') return e;
  if (e.length !== t.length) throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);
  let a = [];
  for (let r = 0; r < e.length; ++r) {
    let n = e[r],
      s = t[r];
    if (n >= 0 && s >= 0 && n !== s)
      throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);
    a[r] = n >= 0 ? n : s;
  }
  return a;
}
var hc = class {
    constructor(e, t, a, r, n, s, p) {
      (this.name = e),
        (this.dtype = t),
        (this.maxSize = a),
        (this.elementShape = r),
        (this.identicalElementShapes = n),
        (this.dynamicSize = s),
        (this.clearAfterRead = p),
        (this.tensors = []),
        (this.closed_ = !1),
        (this.idTensor = ue(0)),
        Rt(this.idTensor);
    }
    get id() {
      return this.idTensor.id;
    }
    get closed() {
      return this.closed_;
    }
    clearAndClose(e) {
      this.tensors.forEach((t) => {
        (e == null || !e.has(t.tensor.id)) && t.tensor.dispose();
      }),
        (this.tensors = []),
        (this.closed_ = !0),
        this.idTensor.dispose();
    }
    size() {
      return this.tensors.length;
    }
    read(e) {
      if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
      if (e < 0 || e >= this.size())
        throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);
      let t = this.tensors[e];
      if (t.cleared)
        throw new Error(
          `TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`
        );
      return this.clearAfterRead && (t.cleared = !0), (t.read = !0), t.tensor;
    }
    readMany(e) {
      return e.map((t) => this.read(t));
    }
    write(e, t) {
      if (this.closed_) throw new Error(`TensorArray ${this.name} has already been closed.`);
      if (e < 0 || (!this.dynamicSize && e >= this.maxSize))
        throw new Error(
          `Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`
        );
      let a = this.tensors[e] || {};
      if (t.dtype !== this.dtype)
        throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);
      if (
        (this.size() === 0 &&
          (this.elementShape == null || this.elementShape.length === 0) &&
          (this.elementShape = t.shape),
        ft(
          this.elementShape,
          t.shape,
          `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`
        ),
        a.read)
      )
        throw new Error(
          `TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`
        );
      if (a.written)
        throw new Error(
          `TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`
        );
      (a.tensor = t), Rt(t), (a.written = !0), (this.tensors[e] = a);
    }
    writeMany(e, t) {
      if (e.length !== t.length)
        throw new Error(
          `TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`
        );
      e.forEach((a, r) => this.write(a, t[r]));
    }
    gather(e, t) {
      if (!!t && t !== this.dtype)
        throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);
      if (e) e = e.slice(0, this.size());
      else {
        e = [];
        for (let r = 0; r < this.size(); r++) e.push(r);
      }
      if (e.length === 0) return e1([], [0].concat(this.elementShape));
      let a = this.readMany(e);
      return ft(this.elementShape, a[0].shape, 'TensorArray shape mismatch: '), qt(a, 0);
    }
    concat(e) {
      if (!!e && e !== this.dtype)
        throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);
      if (this.size() === 0) return e1([], [0].concat(this.elementShape));
      let t = [];
      for (let r = 0; r < this.size(); r++) t.push(r);
      let a = this.readMany(t);
      return (
        ft(
          this.elementShape,
          a[0].shape,
          `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${a[0].shape})`
        ),
        We(a, 0)
      );
    }
    scatter(e, t) {
      if (t.dtype !== this.dtype)
        throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
      if (e.length !== t.shape[0])
        throw new Error(
          `Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`
        );
      let a = Math.max(...e);
      if (!this.dynamicSize && a >= this.maxSize)
        throw new Error(`Max index must be < array size (${a}  vs. ${this.maxSize})`);
      this.writeMany(e, N1(t, 0));
    }
    split(e, t) {
      if (t.dtype !== this.dtype)
        throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
      let a = 0,
        r = e.map((i) => ((a += i), a));
      if (a !== t.shape[0])
        throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${a}, and tensor's shape is: ${t.shape}`);
      if (!this.dynamicSize && e.length !== this.maxSize)
        throw new Error(
          `TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`
        );
      let n = a === 0 ? 0 : t.size / a,
        s = [];
      re(() => {
        t = U(t, [1, a, n]);
        for (let i = 0; i < e.length; ++i) {
          let d = i === 0 ? 0 : r[i - 1],
            l = [0, d, 0],
            m = [1, e[i], n];
          s[i] = U(de(t, l, m), this.elementShape);
        }
        return s;
      });
      let p = [];
      for (let i = 0; i < e.length; i++) p[i] = i;
      this.writeMany(p, s);
    }
  },
  M1 = class {
    constructor(e, t, a, r = -1) {
      (this.tensors = e),
        (this.elementShape = t),
        (this.elementDtype = a),
        e != null &&
          e.forEach((n) => {
            if (a !== n.dtype)
              throw new Error(`Invalid data types; op elements ${a}, but list elements ${n.dtype}`);
            ft(t, n.shape, 'TensorList shape mismatch: '), Rt(n);
          }),
        (this.idTensor = ue(0)),
        (this.maxNumElements = r),
        Rt(this.idTensor);
    }
    get id() {
      return this.idTensor.id;
    }
    copy() {
      return new M1([...this.tensors], this.elementShape, this.elementDtype);
    }
    clearAndClose(e) {
      this.tensors.forEach((t) => {
        (e == null || !e.has(t.id)) && t.dispose();
      }),
        (this.tensors.length = 0),
        this.idTensor.dispose();
    }
    size() {
      return this.tensors.length;
    }
    stack(e, t, a = -1) {
      if (t !== this.elementDtype)
        throw new Error(
          `Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`
        );
      if (a !== -1 && this.tensors.length !== a)
        throw new Error(
          `Operation expected a list with ${a} elements but got a list with ${this.tensors.length} elements.`
        );
      ft(e, this.elementShape, 'TensorList shape mismatch: ');
      let r = _a(this.elementShape, this.tensors, e);
      return re(() => {
        let n = this.tensors.map((s) => U(s, r));
        return qt(n, 0);
      });
    }
    popBack(e, t) {
      if (t !== this.elementDtype)
        throw new Error(
          `Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`
        );
      if (this.size() === 0) throw new Error('Trying to pop from an empty list.');
      let a = _a(this.elementShape, this.tensors, e),
        r = this.tensors.pop();
      return ft(r.shape, e, 'TensorList shape mismatch: '), U(r, a);
    }
    pushBack(e) {
      if (e.dtype !== this.elementDtype)
        throw new Error(
          `Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`
        );
      if (
        (ft(e.shape, this.elementShape, 'TensorList shape mismatch: '),
        this.maxNumElements === this.size())
      )
        throw new Error('Trying to push element into a full list.');
      Rt(e), this.tensors.push(e);
    }
    resize(e) {
      if (e < 0) throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);
      if (this.maxNumElements !== -1 && e > this.maxNumElements)
        throw new Error(
          `TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`
        );
      let t = new M1([], this.elementShape, this.elementDtype, this.maxNumElements);
      t.tensors.length = e;
      for (let a = 0; a < Math.min(this.tensors.length, e); ++a) t.tensors[a] = this.tensors[a];
      return t;
    }
    getItem(e, t, a) {
      if (a !== this.elementDtype)
        throw new Error(
          `Invalid data types; op elements ${a}, but list elements ${this.elementDtype}`
        );
      if (e < 0 || e > this.tensors.length)
        throw new Error(
          `Trying to access element ${e} in a list with ${this.tensors.length} elements.`
        );
      if (this.tensors[e] == null) throw new Error(`element at index ${e} is null.`);
      ft(this.tensors[e].shape, t, 'TensorList shape mismatch: ');
      let r = _a(this.elementShape, this.tensors, t);
      return U(this.tensors[e], r);
    }
    setItem(e, t) {
      if (t.dtype !== this.elementDtype)
        throw new Error(
          `Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`
        );
      if (e < 0 || (this.maxNumElements !== -1 && e >= this.maxNumElements))
        throw new Error(
          `Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`
        );
      ft(this.elementShape, t.shape, 'TensorList shape mismatch: '), Rt(t), (this.tensors[e] = t);
    }
    gather(e, t, a) {
      if (t !== this.elementDtype)
        throw new Error(
          `Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`
        );
      ft(this.elementShape, a, 'TensorList shape mismatch: '), (e = e.slice(0, this.size()));
      let r = _a(this.elementShape, this.tensors, a);
      return e.length === 0
        ? e1([], [0].concat(r))
        : re(() => {
            let n = e.map((s) => U(this.tensors[s], r));
            return qt(n, 0);
          });
    }
    concat(e, t) {
      if (!!e && e !== this.elementDtype)
        throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);
      ft(this.elementShape, t, 'TensorList shape mismatch: ');
      let a = _a(this.elementShape, this.tensors, t);
      return this.size() === 0
        ? e1([], [0].concat(a))
        : re(() => {
            let r = this.tensors.map((n) => U(n, a));
            return We(r, 0);
          });
    }
  };
function fc(e, t, a) {
  let r = e.dtype;
  if (e.shape.length < 1)
    throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);
  if (e.dtype !== a)
    throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${a}`);
  let n = e.shape.slice(1);
  ft(n, t, 'TensorList shape mismatch: ');
  let s = N1(e);
  return new M1(s, t, r);
}
function vc(e, t, a) {
  return new M1([], e, t, a);
}
function gc(e, t, a, r) {
  if (t.length !== e.shape[0])
    throw new Error(
      `Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`
    );
  let n = Math.max(...t);
  if (r != null && r !== -1 && n >= r)
    throw new Error(`Max index must be < array size (${n}  vs. ${r})`);
  let s = new M1([], a, e.dtype, r),
    p = N1(e, 0);
  return (
    t.forEach((i, d) => {
      s.setItem(i, p[d]);
    }),
    s
  );
}
function yc(e, t, a) {
  let r = 0,
    n = t.map((m) => ((r += m), r));
  if (r !== e.shape[0])
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${r}, and tensor's shape is: ${e.shape}`);
  let s = e.shape.slice(1),
    p = cs(s, a),
    i = r === 0 ? 0 : e.size / r,
    d = re(() => {
      let m = [];
      e = U(e, [1, r, i]);
      for (let u = 0; u < t.length; ++u) {
        let f = u === 0 ? 0 : n[u - 1],
          g = [0, f, 0],
          y = [1, t[u], i];
        m[u] = U(de(e, g, y), p);
      }
      return e.dispose(), m;
    }),
    l = new M1([], a, e.dtype, t.length);
  for (let m = 0; m < d.length; m++) l.setItem(m, d[m]);
  return l;
}
var wc = async (e, t, a) => {
  switch (e.op) {
    case 'If':
    case 'StatelessIf': {
      let r = h('thenBranch', e, t, a),
        n = h('elseBranch', e, t, a),
        s = h('cond', e, t, a),
        p = h('args', e, t, a);
      return (await s.data())[0]
        ? a.functionMap[r].executeFunctionAsync(p, a.tensorArrayMap, a.tensorListMap)
        : a.functionMap[n].executeFunctionAsync(p, a.tensorArrayMap, a.tensorListMap);
    }
    case 'While':
    case 'StatelessWhile': {
      let r = h('body', e, t, a),
        n = h('cond', e, t, a),
        s = h('args', e, t, a),
        p = await a.functionMap[n].executeFunctionAsync(s, a.tensorArrayMap, a.tensorListMap),
        i = s.map((m) => m.id),
        d = await p[0].data();
      p.forEach((m) => {
        !m.kept && i.indexOf(m.id) === -1 && m.dispose();
      });
      let l = s;
      for (; d[0]; ) {
        let m = l;
        l = await a.functionMap[r].executeFunctionAsync(l, a.tensorArrayMap, a.tensorListMap);
        let u = l.map((g) => g.id);
        m.forEach((g) => {
          !g.kept && i.indexOf(g.id) === -1 && u.indexOf(g.id) === -1 && g.dispose();
        });
        let f = await a.functionMap[n].executeFunctionAsync(l, a.tensorArrayMap, a.tensorListMap);
        (d = await f[0].data()),
          f.forEach((g) => {
            !g.kept && i.indexOf(g.id) === -1 && u.indexOf(g.id) === -1 && g.dispose();
          });
      }
      return l;
    }
    case 'LoopCond': {
      let r = h('pred', e, t, a);
      return [Ht(r)];
    }
    case 'Switch': {
      let r = h('pred', e, t, a),
        n = h('data', e, t, a);
      return n.kept || (n = Ht(n)), (await r.data())[0] ? [void 0, n] : [n, void 0];
    }
    case 'Merge': {
      let r = e.inputNames.find((n) => Ze(n, t, a) !== void 0);
      if (r) {
        let n = Ze(r, t, a);
        return [Ht(n)];
      }
      return;
    }
    case 'Enter': {
      let r = h('frameName', e, t, a),
        n = h('tensor', e, t, a);
      return a.enterFrame(r), [Ht(n)];
    }
    case 'Exit': {
      let r = h('tensor', e, t, a);
      return a.exitFrame(), [Ht(r)];
    }
    case 'NextIteration': {
      let r = h('tensor', e, t, a);
      return a.nextIteration(), [Ht(r)];
    }
    case 'TensorArrayV3': {
      let r = h('size', e, t, a),
        n = h('dtype', e, t, a),
        s = h('elementShape', e, t, a),
        p = h('dynamicSize', e, t, a),
        i = h('clearAfterRead', e, t, a),
        d = h('identicalElementShapes', e, t, a),
        l = h('name', e, t, a),
        m = new hc(l, n, r, s, d, p, i);
      return a.addTensorArray(m), [m.idTensor, ue(1)];
    }
    case 'TensorArrayWriteV3': {
      let r = h('tensorArrayId', e, t, a),
        n = h('index', e, t, a),
        s = h('tensor', e, t, a),
        p = a.getTensorArray(r.id);
      return p.write(n, s), [p.idTensor];
    }
    case 'TensorArrayReadV3': {
      let r = h('tensorArrayId', e, t, a),
        n = h('index', e, t, a);
      return [a.getTensorArray(r.id).read(n)];
    }
    case 'TensorArrayGatherV3': {
      let r = h('tensorArrayId', e, t, a),
        n = h('indices', e, t, a),
        s = h('dtype', e, t, a);
      return [a.getTensorArray(r.id).gather(n, s)];
    }
    case 'TensorArrayScatterV3': {
      let r = h('tensorArrayId', e, t, a),
        n = h('indices', e, t, a),
        s = h('tensor', e, t, a),
        p = a.getTensorArray(r.id);
      return p.scatter(n, s), [p.idTensor];
    }
    case 'TensorArrayConcatV3': {
      let r = h('tensorArrayId', e, t, a),
        n = a.getTensorArray(r.id),
        s = h('dtype', e, t, a);
      return [n.concat(s)];
    }
    case 'TensorArraySplitV3': {
      let r = h('tensorArrayId', e, t, a),
        n = h('tensor', e, t, a),
        s = h('lengths', e, t, a),
        p = a.getTensorArray(r.id);
      return p.split(s, n), [p.idTensor];
    }
    case 'TensorArraySizeV3': {
      let r = h('tensorArrayId', e, t, a),
        n = a.getTensorArray(r.id);
      return [ue(n.size(), 'int32')];
    }
    case 'TensorArrayCloseV3': {
      let r = h('tensorArrayId', e, t, a),
        n = a.getTensorArray(r.id);
      return n.clearAndClose(), [n.idTensor];
    }
    case 'TensorListSetItem': {
      let r = h('tensorListId', e, t, a),
        n = h('index', e, t, a),
        s = h('tensor', e, t, a),
        p = a.getTensorList(r.id);
      return p.setItem(n, s), [p.idTensor];
    }
    case 'TensorListGetItem': {
      let r = h('tensorListId', e, t, a),
        n = h('index', e, t, a),
        s = h('elementShape', e, t, a),
        p = h('elementDType', e, t, a);
      return [a.getTensorList(r.id).getItem(n, s, p)];
    }
    case 'TensorListScatterV2':
    case 'TensorListScatter': {
      let r = h('indices', e, t, a),
        n = h('tensor', e, t, a),
        s = h('elementShape', e, t, a),
        p = h('numElements', e, t, a),
        i = gc(n, r, s, p);
      return a.addTensorList(i), [i.idTensor];
    }
    case 'TensorListReserve':
    case 'EmptyTensorList': {
      let r = h('elementShape', e, t, a),
        n = h('elementDType', e, t, a),
        s;
      e.op === 'TensorListReserve' ? (s = 'numElements') : (s = 'maxNumElements');
      let p = h(s, e, t, a),
        i = vc(r, n, p);
      return a.addTensorList(i), [i.idTensor];
    }
    case 'TensorListGather': {
      let r = h('tensorListId', e, t, a),
        n = h('indices', e, t, a),
        s = h('elementShape', e, t, a),
        p = h('elementDType', e, t, a);
      return [a.getTensorList(r.id).gather(n, p, s)];
    }
    case 'TensorListStack': {
      let r = h('tensorListId', e, t, a),
        n = h('elementShape', e, t, a),
        s = h('elementDType', e, t, a),
        p = h('numElements', e, t, a);
      return [a.getTensorList(r.id).stack(n, s, p)];
    }
    case 'TensorListFromTensor': {
      let r = h('tensor', e, t, a),
        n = h('elementShape', e, t, a),
        s = h('elementDType', e, t, a),
        p = fc(r, n, s);
      return a.addTensorList(p), [p.idTensor];
    }
    case 'TensorListConcat':
    case 'TensorListConcatV2': {
      let r = h('tensorListId', e, t, a),
        n = a.getTensorList(r.id),
        s = h('dtype', e, t, a),
        p = h('elementShape', e, t, a);
      return [n.concat(s, p)];
    }
    case 'TensorListPushBack': {
      let r = h('tensorListId', e, t, a),
        n = h('tensor', e, t, a),
        s = a.getTensorList(r.id);
      return s.pushBack(n), [s.idTensor];
    }
    case 'TensorListPopBack': {
      let r = h('tensorListId', e, t, a),
        n = h('elementShape', e, t, a),
        s = h('elementDType', e, t, a);
      return [a.getTensorList(r.id).popBack(n, s)];
    }
    case 'TensorListSplit': {
      let r = h('tensor', e, t, a),
        n = h('elementShape', e, t, a),
        s = h('lengths', e, t, a),
        p = yc(r, s, n);
      return a.addTensorList(p), [p.idTensor];
    }
    case 'TensorListLength': {
      let r = h('tensorListId', e, t, a),
        n = a.getTensorList(r.id);
      return [ue(n.size(), 'int32')];
    }
    case 'TensorListResize': {
      let r = h('tensorListId', e, t, a),
        n = h('size', e, t, a),
        p = a.getTensorList(r.id).resize(n);
      return a.addTensorList(p), [p.idTensor];
    }
    default:
      throw TypeError(`Node type ${e.op} is not implemented`);
  }
};
function Q2(e, t, a) {
  let [r, n] = h('fusedOps', e, t, a),
    s = r === 'biasadd',
    p = !s,
    i = n === 'prelu',
    d = r === 'fusedbatchnorm',
    l = h('numArgs', e, t, a);
  if (s) {
    if (i && l !== 2)
      throw new Error(
        'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.'
      );
    if (!i && s && l !== 1)
      throw new Error(
        'FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.'
      );
  }
  if (d) throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');
  let m = h('strides', e, t, a),
    u = Dr(e, t, a),
    f = h('dataFormat', e, t, a).toUpperCase(),
    g = h('dilations', e, t, a),
    [y, N] = h('args', e, t, a);
  p && ((N = y), (y = void 0));
  let T = h('leakyreluAlpha', e, t, a);
  return {
    stride: m,
    pad: u,
    dataFormat: f,
    dilations: g,
    biasArg: y,
    preluArg: N,
    activationFunc: n,
    leakyreluAlpha: T
  };
}
var bc = (e, t, a) => {
    switch (e.op) {
      case 'Conv1D': {
        let r = h('stride', e, t, a),
          n = h('pad', e, t, a),
          s = h('dataFormat', e, t, a).toUpperCase(),
          p = h('dilation', e, t, a);
        return [jm(h('x', e, t, a), h('filter', e, t, a), r, n, s, p)];
      }
      case 'Conv2D': {
        let r = h('strides', e, t, a),
          n = Dr(e, t, a),
          s = h('dataFormat', e, t, a).toUpperCase(),
          p = h('dilations', e, t, a);
        return [hr(h('x', e, t, a), h('filter', e, t, a), [r[1], r[2]], n, s, [p[1], p[2]])];
      }
      case '_FusedConv2D': {
        let {
          stride: r,
          pad: n,
          dataFormat: s,
          dilations: p,
          biasArg: i,
          preluArg: d,
          activationFunc: l,
          leakyreluAlpha: m
        } = Q2(e, t, a);
        return [
          _r.conv2d({
            x: h('x', e, t, a),
            filter: h('filter', e, t, a),
            strides: [r[1], r[2]],
            pad: n,
            dataFormat: s,
            dilations: [p[1], p[2]],
            bias: i,
            activation: l,
            preluActivationWeights: d,
            leakyreluAlpha: m
          })
        ];
      }
      case 'FusedDepthwiseConv2dNative': {
        let {
          stride: r,
          pad: n,
          dataFormat: s,
          dilations: p,
          biasArg: i,
          preluArg: d,
          activationFunc: l,
          leakyreluAlpha: m
        } = Q2(e, t, a);
        return [
          _r.depthwiseConv2d({
            x: h('x', e, t, a),
            filter: h('filter', e, t, a),
            strides: [r[1], r[2]],
            pad: n,
            dataFormat: s,
            dilations: [p[1], p[2]],
            bias: i,
            activation: l,
            preluActivationWeights: d,
            leakyreluAlpha: m
          })
        ];
      }
      case 'Conv2DBackpropInput':
      case 'Conv2dTranspose': {
        let r = h('outputShape', e, t, a),
          n = h('strides', e, t, a),
          s = Dr(e, t, a);
        return [Hm(h('x', e, t, a), h('filter', e, t, a), r, [n[1], n[2]], s)];
      }
      case 'DepthwiseConv2dNative':
      case 'DepthwiseConv2d': {
        let r = h('strides', e, t, a),
          n = Dr(e, t, a),
          s = h('dilations', e, t, a),
          p = h('dataFormat', e, t, a).toUpperCase();
        return [Bn(h('input', e, t, a), h('filter', e, t, a), [r[1], r[2]], n, p, [s[1], s[2]])];
      }
      case 'Conv3D': {
        let r = h('strides', e, t, a),
          n = h('pad', e, t, a),
          s = h('dataFormat', e, t, a).toUpperCase(),
          p = h('dilations', e, t, a);
        return [
          Km(h('x', e, t, a), h('filter', e, t, a), [r[1], r[2], r[3]], n, s, [p[1], p[2], p[3]])
        ];
      }
      case 'AvgPool': {
        let r = h('strides', e, t, a),
          n = h('pad', e, t, a),
          s = h('kernelSize', e, t, a);
        return [Wi(h('x', e, t, a), [s[1], s[2]], [r[1], r[2]], n)];
      }
      case 'MaxPool': {
        let r = h('strides', e, t, a),
          n = h('pad', e, t, a),
          s = h('kernelSize', e, t, a);
        return [d2(h('x', e, t, a), [s[1], s[2]], [r[1], r[2]], n)];
      }
      case 'MaxPoolWithArgmax': {
        let r = h('strides', e, t, a),
          n = h('pad', e, t, a),
          s = h('kernelSize', e, t, a),
          p = h('includeBatchInIndex', e, t, a),
          { result: i, indexes: d } = _9(h('x', e, t, a), [s[1], s[2]], [r[1], r[2]], n, p);
        return [i, d];
      }
      case 'AvgPool3D': {
        let r = h('strides', e, t, a),
          n = h('pad', e, t, a),
          s = h('kernelSize', e, t, a);
        return [gm(h('x', e, t, a), [s[1], s[2], s[3]], [r[1], r[2], r[3]], n)];
      }
      case 'MaxPool3D': {
        let r = h('strides', e, t, a),
          n = h('pad', e, t, a),
          s = h('kernelSize', e, t, a);
        return [b9(h('x', e, t, a), [s[1], s[2], s[3]], [r[1], r[2], r[3]], n)];
      }
      case 'Dilation2D': {
        let r = h('strides', e, t, a),
          n = h('pad', e, t, a),
          s = h('dilations', e, t, a),
          p = r[1],
          i = r[2],
          d = s[1],
          l = s[2];
        return [uu(h('x', e, t, a), h('filter', e, t, a), [p, i], n, [d, l], 'NHWC')];
      }
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Nc = (e, t, a) => {
    switch (e.op) {
      case 'Fill': {
        let r = h('shape', e, t, a),
          n = h('dtype', e, t, a),
          s = h('value', e, t, a);
        return [vr(r, s, n)];
      }
      case 'LinSpace': {
        let r = h('start', e, t, a),
          n = h('stop', e, t, a),
          s = h('num', e, t, a);
        return [Qu(r, n, s)];
      }
      case 'Multinomial': {
        let r = h('logits', e, t, a),
          n = h('numSamples', e, t, a),
          s = h('seed', e, t, a);
        return [V9(r, n, s)];
      }
      case 'OneHot': {
        let r = h('indices', e, t, a),
          n = h('depth', e, t, a),
          s = h('onValue', e, t, a),
          p = h('offValue', e, t, a);
        return [In(r, n, s, p)];
      }
      case 'Ones':
        return [Un(h('shape', e, t, a), h('dtype', e, t, a))];
      case 'OnesLike':
        return [B9(h('x', e, t, a))];
      case 'RandomUniform':
        return [
          v2(h('shape', e, t, a), h('minval', e, t, a), h('maxval', e, t, a), h('dtype', e, t, a))
        ];
      case 'Range': {
        let r = h('start', e, t, a),
          n = h('stop', e, t, a),
          s = h('step', e, t, a);
        return [ba(r, n, s, h('dtype', e, t, a))];
      }
      case 'TruncatedNormal': {
        let r = h('shape', e, t, a),
          n = h('mean', e, t, a),
          s = h('stdDev', e, t, a),
          p = h('seed', e, t, a);
        return [G5(r, n, s, h('dtype', e, t, a), p)];
      }
      case 'Zeros':
        return [U1(h('shape', e, t, a), h('dtype', e, t, a))];
      case 'ZerosLike':
        return [ot(h('x', e, t, a))];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  };
function hs(e, t, a) {
  let r = h('boxes', e, t, a),
    n = h('scores', e, t, a),
    s = h('maxOutputSize', e, t, a),
    p = h('iouThreshold', e, t, a),
    i = h('scoreThreshold', e, t, a),
    d = h('softNmsSigma', e, t, a);
  return {
    boxes: r,
    scores: n,
    maxOutputSize: s,
    iouThreshold: p,
    scoreThreshold: i,
    softNmsSigma: d
  };
}
var _c = async (e, t, a) => {
    switch (e.op) {
      case 'NonMaxSuppressionV5': {
        let {
            boxes: r,
            scores: n,
            maxOutputSize: s,
            iouThreshold: p,
            scoreThreshold: i,
            softNmsSigma: d
          } = hs(e, t, a),
          l = await Ot.nonMaxSuppressionWithScoreAsync(r, n, s, p, i, d);
        return [l.selectedIndices, l.selectedScores];
      }
      case 'NonMaxSuppressionV4': {
        let {
            boxes: r,
            scores: n,
            maxOutputSize: s,
            iouThreshold: p,
            scoreThreshold: i
          } = hs(e, t, a),
          d = h('padToMaxOutputSize', e, t, a),
          l = await Ot.nonMaxSuppressionPaddedAsync(r, n, s, p, i, d);
        return [l.selectedIndices, l.validOutputs];
      }
      case 'NonMaxSuppressionV3':
      case 'NonMaxSuppressionV2': {
        let {
          boxes: r,
          scores: n,
          maxOutputSize: s,
          iouThreshold: p,
          scoreThreshold: i
        } = hs(e, t, a);
        return [await Ot.nonMaxSuppressionAsync(r, n, s, p, i)];
      }
      case 'Where': {
        let r = we(h('condition', e, t, a), 'bool'),
          n = [await t8(r)];
        return r.dispose(), n;
      }
      case 'ListDiff':
        return g5(h('x', e, t, a), h('y', e, t, a));
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Sc = (e, t, a) => {
    switch (e.op) {
      case 'LowerBound': {
        let r = h('sortedSequence', e, t, a),
          n = h('values', e, t, a);
        return [g9(r, n)];
      }
      case 'TopKV2': {
        let r = h('x', e, t, a),
          n = h('k', e, t, a),
          s = h('sorted', e, t, a),
          p = W5(r, n, s);
        return [p.values, p.indices];
      }
      case 'UpperBound': {
        let r = h('sortedSequence', e, t, a),
          n = h('values', e, t, a);
        return [Z5(r, n)];
      }
      case 'Unique': {
        let r = h('x', e, t, a),
          n = _2(r);
        return [n.values, n.indices];
      }
      case 'UniqueV2': {
        let r = h('x', e, t, a),
          n = h('axis', e, t, a),
          s = _2(r, n);
        return [s.values, s.indices];
      }
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Tc = (e, t, a) => {
    switch (e.op) {
      case 'Const':
        return t[e.name];
      case 'PlaceholderWithDefault':
        let r = h('default', e, t, a);
        return [Ze(e.name, t, a) || r];
      case 'Placeholder':
        return [Ze(e.name, t, a)];
      case 'Identity':
      case 'StopGradient':
      case 'FakeQuantWithMinMaxVars': {
        let l = h('x', e, t, a);
        return [Ht(l)];
      }
      case 'IdentityN':
        return h('x', e, t, a).map((l) => Ht(l));
      case 'Snapshot':
        let n = h('x', e, t, a);
        return [Ht(n)];
      case 'Shape':
        return [Ye(h('x', e, t, a).shape, 'int32')];
      case 'ShapeN':
        return h('x', e, t, a).map((l) => Ye(l.shape));
      case 'Size':
        return [ue(h('x', e, t, a).size, 'int32')];
      case 'Rank':
        return [ue(h('x', e, t, a).rank, 'int32')];
      case 'NoOp':
        return [ue(1)];
      case 'Print':
        let s = h('x', e, t, a),
          p = h('data', e, t, a),
          i = h('message', e, t, a),
          d = h('summarize', e, t, a);
        console.warn(
          'The graph has a tf.print() operation,usually used for debugging, which slows down performance.'
        ),
          console.log(i);
        for (let l = 0; l < p.length; l++)
          console.log(Array.prototype.slice.call(p[l].dataSync()).slice(0, d));
        return [s];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Ec = class {
    constructor(e, t) {
      (this.keyDType = e),
        (this.valueDType = t),
        (this.handle = ue(0)),
        (this.tensorMap = new Map()),
        Rt(this.handle);
    }
    get id() {
      return this.handle.id;
    }
    clearAndClose() {
      this.tensorMap.forEach((e) => e.dispose()), this.tensorMap.clear(), this.handle.dispose();
    }
    size() {
      return this.tensorMap.size;
    }
    tensorSize() {
      return ue(this.size(), 'int32');
    }
    async import(e, t) {
      this.checkKeyAndValueTensor(e, t);
      let a = await e.data();
      return (
        this.tensorMap.forEach((r) => r.dispose()),
        this.tensorMap.clear(),
        re(() => {
          let r = N1(t),
            n = a.length,
            s = r.length;
          Qe.assert(
            n === s,
            () =>
              `The number of elements doesn't match, keys has ${n} elements, the values has ${s} elements.`
          );
          for (let p = 0; p < n; p++) {
            let i = a[p],
              d = r[p];
            Rt(d), this.tensorMap.set(i, d);
          }
          return this.handle;
        })
      );
    }
    async find(e, t) {
      this.checkKeyAndValueTensor(e, t);
      let a = await e.data();
      return re(() => {
        let r = [];
        for (let n = 0; n < a.length; n++) {
          let s = a[n],
            p = this.findWithDefault(s, t);
          r.push(p);
        }
        return qt(r);
      });
    }
    findWithDefault(e, t) {
      let a = this.tensorMap.get(e);
      return a ?? t;
    }
    checkKeyAndValueTensor(e, t) {
      if (e.dtype !== this.keyDType)
        throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);
      if (t.dtype !== this.valueDType)
        throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`);
    }
  },
  Dc = async (e, t, a, r) => {
    switch (e.op) {
      case 'HashTable':
      case 'HashTableV2': {
        let n = h('keyDType', e, t, a),
          s = h('valueDType', e, t, a),
          p = new Ec(n, s);
        return r.addHashTable(e.name, p), [p.handle];
      }
      case 'LookupTableImport':
      case 'LookupTableImportV2': {
        let n = h('tableHandle', e, t, a, r),
          s = h('keys', e, t, a),
          p = h('values', e, t, a);
        return [await r.getHashTableById(n.id).import(s, p)];
      }
      case 'LookupTableFind':
      case 'LookupTableFindV2': {
        let n = h('tableHandle', e, t, a, r),
          s = h('keys', e, t, a),
          p = h('defaultValue', e, t, a);
        return [await r.getHashTableById(n.id).find(s, p)];
      }
      case 'LookupTableSize':
      case 'LookupTableSizeV2': {
        let n = h('tableHandle', e, t, a, r);
        return [r.getHashTableById(n.id).tensorSize()];
      }
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  xc = (e, t, a) => {
    switch (e.op) {
      case 'ResizeBilinear': {
        let r = h('images', e, t, a),
          n = h('size', e, t, a),
          s = h('alignCorners', e, t, a),
          p = h('halfPixelCenters', e, t, a);
        return [Ot.resizeBilinear(r, [n[0], n[1]], s, p)];
      }
      case 'ResizeNearestNeighbor': {
        let r = h('images', e, t, a),
          n = h('size', e, t, a),
          s = h('alignCorners', e, t, a),
          p = h('halfPixelCenters', e, t, a);
        return [Ot.resizeNearestNeighbor(r, [n[0], n[1]], s, p)];
      }
      case 'CropAndResize': {
        let r = h('image', e, t, a),
          n = h('boxes', e, t, a),
          s = h('boxInd', e, t, a),
          p = h('cropSize', e, t, a),
          i = h('method', e, t, a),
          d = h('extrapolationValue', e, t, a);
        return [Ot.cropAndResize(r, n, s, p, i, d)];
      }
      case 'ImageProjectiveTransformV3': {
        let r = h('images', e, t, a),
          n = h('transforms', e, t, a),
          s = h('outputShape', e, t, a),
          p = h('fillValue', e, t, a),
          i = h('interpolation', e, t, a),
          d = h('fillMode', e, t, a);
        return [Ot.transform(r, n, i.toLowerCase(), d.toLowerCase(), p, s)];
      }
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Ac = (e, t, a) => {
    switch (e.op) {
      case 'Equal':
        return [Ji(h('a', e, t, a), h('b', e, t, a))];
      case 'NotEqual':
        return [u2(h('a', e, t, a), h('b', e, t, a))];
      case 'Greater':
        return [gr(h('a', e, t, a), h('b', e, t, a))];
      case 'GreaterEqual':
        return [a2(h('a', e, t, a), h('b', e, t, a))];
      case 'Less':
        return [Ju(h('a', e, t, a), h('b', e, t, a))];
      case 'LessEqual':
        return [Ln(h('a', e, t, a), h('b', e, t, a))];
      case 'LogicalAnd':
        return [yr(h('a', e, t, a), h('b', e, t, a))];
      case 'LogicalNot':
        return [p2(h('a', e, t, a))];
      case 'LogicalOr':
        return [i2(h('a', e, t, a), h('b', e, t, a))];
      case 'Select':
      case 'SelectV2':
        return [R1(h('condition', e, t, a), h('a', e, t, a), h('b', e, t, a))];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  kc = (e, t, a) => {
    switch (e.op) {
      case 'BatchMatMul':
      case 'BatchMatMulV2':
      case 'MatMul':
        return [
          Te(h('a', e, t, a), h('b', e, t, a), h('transposeA', e, t, a), h('transposeB', e, t, a))
        ];
      case 'Einsum':
        return [bu(h('equation', e, t, a), ...h('tensors', e, t, a))];
      case 'Transpose':
        return [dr(h('x', e, t, a), h('perm', e, t, a))];
      case '_FusedMatMul':
        let [r, n] = h('fusedOps', e, t, a),
          s = r === 'biasadd',
          p = n === 'prelu',
          i = h('numArgs', e, t, a),
          d = h('leakyreluAlpha', e, t, a);
        if (s) {
          if (p && i !== 2)
            throw new Error(
              'Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.'
            );
          if (!p && i !== 1)
            throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');
        }
        let [l, m] = h('args', e, t, a);
        return [
          _r.matMul({
            a: h('a', e, t, a),
            b: h('b', e, t, a),
            transposeA: h('transposeA', e, t, a),
            transposeB: h('transposeB', e, t, a),
            bias: l,
            activation: n,
            preluActivationWeights: m,
            leakyreluAlpha: d
          })
        ];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  $c = (e, t, a) => {
    switch (e.op) {
      case 'EuclideanNorm':
        return [Vu(h('x', e, t, a), h('axis', e, t, a), h('keepDims', e, t, a))];
      case 'FusedBatchNorm':
      case 'FusedBatchNormV2':
        return [
          fa(
            h('x', e, t, a),
            h('mean', e, t, a),
            h('variance', e, t, a),
            h('offset', e, t, a),
            h('scale', e, t, a),
            h('epsilon', e, t, a)
          )
        ];
      case 'FusedBatchNormV3':
        return [
          fa(
            h('x', e, t, a),
            h('mean', e, t, a),
            h('variance', e, t, a),
            h('offset', e, t, a),
            h('scale', e, t, a),
            h('epsilon', e, t, a)
          )
        ];
      case 'LRN':
        return [
          t9(
            h('x', e, t, a),
            h('radius', e, t, a),
            h('bias', e, t, a),
            h('alpha', e, t, a),
            h('beta', e, t, a)
          )
        ];
      case 'Softmax':
        return [k5(h('x', e, t, a))];
      case 'LogSoftmax':
        return [d9(h('x', e, t, a))];
      case 'SparseToDense':
        return [
          S2(
            h('sparseIndices', e, t, a),
            h('outputShape', e, t, a),
            h('sparseValues', e, t, a),
            h('defaultValue', e, t, a)
          )
        ];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Ic = (e, t, a) => {
    switch (e.op) {
      case 'Max': {
        let p = h('axis', e, t, a),
          i = h('keepDims', e, t, a);
        return [L1(h('x', e, t, a), p, i)];
      }
      case 'Mean': {
        let p = h('axis', e, t, a),
          i = h('keepDims', e, t, a);
        return [br(h('x', e, t, a), p, i)];
      }
      case 'Min': {
        let p = h('axis', e, t, a),
          i = h('keepDims', e, t, a);
        return [Pn(h('x', e, t, a), p, i)];
      }
      case 'Sum': {
        let p = h('axis', e, t, a),
          i = h('keepDims', e, t, a);
        return [Ee(h('x', e, t, a), p, i)];
      }
      case 'All': {
        let p = h('axis', e, t, a),
          i = h('keepDims', e, t, a);
        return [K3(h('x', e, t, a), p, i)];
      }
      case 'Any': {
        let p = h('axis', e, t, a),
          i = h('keepDims', e, t, a);
        return [X3(h('x', e, t, a), p, i)];
      }
      case 'ArgMax': {
        let p = h('axis', e, t, a);
        return [J3(h('x', e, t, a), p)];
      }
      case 'ArgMin': {
        let p = h('axis', e, t, a);
        return [Q3(h('x', e, t, a), p)];
      }
      case 'Prod': {
        let p = h('axis', e, t, a),
          i = h('keepDims', e, t, a);
        return [f2(h('x', e, t, a), p, i)];
      }
      case 'Cumprod': {
        let p = h('axis', e, t, a),
          i = h('exclusive', e, t, a),
          d = h('reverse', e, t, a);
        return [au(h('x', e, t, a), p, i, d)];
      }
      case 'Cumsum': {
        let p = h('axis', e, t, a),
          i = h('exclusive', e, t, a),
          d = h('reverse', e, t, a);
        return [nu(h('x', e, t, a), p, i, d)];
      }
      case 'Bincount':
        let r = h('x', e, t, a),
          n = h('weights', e, t, a),
          s = h('size', e, t, a);
        return [Gi(r, n, s)];
      case 'DenseBincount': {
        let p = h('x', e, t, a),
          i = h('weights', e, t, a),
          d = h('size', e, t, a),
          l = h('binaryOutput', e, t, a);
        return [pu(p, i, d, l)];
      }
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Oc = (e, t, a) => {
    switch (e.op) {
      case 'ConcatV2':
      case 'Concat': {
        let r = h('n', e, t, a),
          n = h('axis', e, t, a),
          s = h('tensors', e, t, a);
        return (s = s.slice(0, r)), [We(s, n)];
      }
      case 'Gather': {
        let r = h('x', e, t, a),
          n = h('indices', e, t, a);
        return [t2(r, we(n, 'int32'), 0)];
      }
      case 'GatherV2': {
        let r = h('axis', e, t, a),
          n = h('batchDims', e, t, a),
          s = h('x', e, t, a),
          p = h('indices', e, t, a);
        return [t2(s, we(p, 'int32'), r, n)];
      }
      case 'Reverse': {
        let r = h('dims', e, t, a),
          n = [];
        for (let p = 0; p < r.length; p++) r[p] && n.push(p);
        let s = h('x', e, t, a);
        return [n1(s, n)];
      }
      case 'ReverseV2': {
        let r = h('axis', e, t, a),
          n = h('x', e, t, a);
        return [n1(n, r)];
      }
      case 'Slice': {
        let r = h('begin', e, t, a),
          n = h('size', e, t, a);
        return [de(h('x', e, t, a), r, n)];
      }
      case 'StridedSlice': {
        let r = h('begin', e, t, a),
          n = h('end', e, t, a),
          s = h('strides', e, t, a),
          p = h('beginMask', e, t, a),
          i = h('endMask', e, t, a),
          d = h('ellipsisMask', e, t, a),
          l = h('newAxisMask', e, t, a),
          m = h('shrinkAxisMask', e, t, a),
          u = h('x', e, t, a);
        return [j5(u, r, n, s, p, i, d, l, m)];
      }
      case 'Pack':
        return re(() => {
          let r = h('axis', e, t, a),
            n = h('tensors', e, t, a),
            s = n[0].shape,
            p = je(n[0]).shape,
            i = n.map((d) => {
              let l = Qe.arraysEqual(d.shape, s);
              if (!l && !Qe.arraysEqual(je(d).shape, p))
                throw new Error('the input tensors shape does not match');
              return l ? d : U(d, s);
            });
          return [qt(i, r)];
        });
      case 'Unpack': {
        let r = h('axis', e, t, a),
          n = h('tensor', e, t, a);
        return N1(n, r);
      }
      case 'Tile': {
        let r = h('reps', e, t, a);
        return [ga(h('x', e, t, a), r)];
      }
      case 'Split':
      case 'SplitV': {
        let r = h('axis', e, t, a),
          n = h('numOrSizeSplits', e, t, a),
          s = h('x', e, t, a);
        return Na(s, n, r);
      }
      case 'ScatterNd': {
        let r = h('indices', e, t, a),
          n = h('values', e, t, a),
          s = h('shape', e, t, a);
        return [n8(r, n, s)];
      }
      case 'GatherNd': {
        let r = h('x', e, t, a),
          n = h('indices', e, t, a);
        return [o8(r, n)];
      }
      case 'SparseToDense': {
        let r = h('sparseIndices', e, t, a),
          n = h('outputShape', e, t, a),
          s = h('sparseValues', e, t, a),
          p = h('defaultValue', e, t, a);
        return [S2(r, s, n, s.dtype === p.dtype ? p : we(p, s.dtype))];
      }
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Vc = (e, t, a) => {
    switch (e.op) {
      case 'SparseFillEmptyRows': {
        let {
          outputIndices: r,
          outputValues: n,
          emptyRowIndicator: s,
          reverseIndexMap: p
        } = Sr.sparseFillEmptyRows(
          h('indices', e, t, a),
          h('values', e, t, a),
          h('denseShape', e, t, a),
          h('defaultValue', e, t, a)
        );
        return [r, n, s, p];
      }
      case 'SparseReshape': {
        let { outputIndices: r, outputShape: n } = Sr.sparseReshape(
          h('inputIndices', e, t, a),
          h('inputShape', e, t, a),
          h('newShape', e, t, a)
        );
        return [r, n];
      }
      case 'SparseSegmentMean':
        return [
          Sr.sparseSegmentMean(h('data', e, t, a), h('indices', e, t, a), h('segmentIds', e, t, a))
        ];
      case 'SparseSegmentSum':
        return [
          Sr.sparseSegmentSum(h('data', e, t, a), h('indices', e, t, a), h('segmentIds', e, t, a))
        ];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Cc = (e, t, a) => {
    switch (e.op) {
      case 'FFT':
        return [w2(h('x', e, t, a))];
      case 'IFFT':
        return [Mn(h('x', e, t, a))];
      case 'RFFT':
        return [b2(h('x', e, t, a))];
      case 'IRFFT':
        return [V5(h('x', e, t, a))];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Fc = (e, t, a) => {
    switch (e.op) {
      case 'StringNGrams': {
        let { nGrams: r, nGramsSplits: n } = Xn.stringNGrams(
          h('data', e, t, a),
          h('dataSplits', e, t, a),
          h('separator', e, t, a),
          h('nGramWidths', e, t, a),
          h('leftPad', e, t, a),
          h('rightPad', e, t, a),
          h('padWidth', e, t, a),
          h('preserveShortSequences', e, t, a)
        );
        return [r, n];
      }
      case 'StringSplit': {
        let {
          indices: r,
          values: n,
          shape: s
        } = Xn.stringSplit(h('input', e, t, a), h('delimiter', e, t, a), h('skipEmpty', e, t, a));
        return [r, n, s];
      }
      case 'StringToHashBucketFast':
        return [Xn.stringToHashBucketFast(h('input', e, t, a), h('numBuckets', e, t, a))];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  },
  Bc = (e, t, a) => {
    switch (e.op) {
      case 'Cast':
        return [we(h('x', e, t, a), h('dtype', e, t, a))];
      case 'ExpandDims': {
        let r = h('axis', e, t, a);
        return [jt(h('x', e, t, a), r)];
      }
      case 'Squeeze': {
        let r = h('axis', e, t, a);
        return [je(h('x', e, t, a), r)];
      }
      case 'Reshape':
        return [U(h('x', e, t, a), h('shape', e, t, a))];
      case 'MirrorPad':
        return [x9(h('x', e, t, a), h('padding', e, t, a), h('mode', e, t, a))];
      case 'PadV2':
      case 'Pad':
        return [wa(h('x', e, t, a), h('padding', e, t, a), h('constantValue', e, t, a))];
      case 'SpaceToBatchND': {
        let r = h('blockShape', e, t, a),
          n = h('paddings', e, t, a);
        return [c2(h('x', e, t, a), r, n)];
      }
      case 'BatchToSpaceND': {
        let r = h('blockShape', e, t, a),
          n = h('crops', e, t, a);
        return [Ki(h('x', e, t, a), r, n)];
      }
      case 'DepthToSpace': {
        let r = h('blockSize', e, t, a),
          n = h('dataFormat', e, t, a).toUpperCase();
        return [ou(h('x', e, t, a), r, n)];
      }
      case 'BroadcastTo':
        return [cr(h('x', e, t, a), h('shape', e, t, a))];
      case 'BroadcastArgs':
        return [Im(h('s0', e, t, a), h('s1', e, t, a))];
      default:
        throw TypeError(`Node type ${e.op} is not implemented`);
    }
  };
function eo(e, t, a, r) {
  let n = ((s, p, i) => {
    switch (s.category) {
      case 'arithmetic':
        return re(() => uc(s, p, i));
      case 'basic_math':
        return re(() => cc(s, p, i));
      case 'control':
        return wc(s, p, i);
      case 'convolution':
        return re(() => bc(s, p, i));
      case 'creation':
        return re(() => Nc(s, p, i));
      case 'dynamic':
        return _c(s, p, i);
      case 'evaluation':
        return re(() => Sc(s, p, i));
      case 'image':
        return re(() => xc(s, p, i));
      case 'graph':
        return re(() => Tc(s, p, i));
      case 'logical':
        return re(() => Ac(s, p, i));
      case 'matrices':
        return re(() => kc(s, p, i));
      case 'normalization':
        return re(() => $c(s, p, i));
      case 'reduction':
        return re(() => Ic(s, p, i));
      case 'slice_join':
        return re(() => Oc(s, p, i));
      case 'sparse':
        return re(() => Vc(s, p, i));
      case 'spectral':
        return re(() => Cc(s, p, i));
      case 'string':
        return re(() => Fc(s, p, i));
      case 'transformation':
        return re(() => Bc(s, p, i));
      case 'hash_table':
        return Dc(s, p, i, r);
      case 'custom':
        let d = A2(s.op);
        if (d && d.customExecutor) return d.customExecutor(new mc(s, p, i));
        throw TypeError(`Custom op ${s.op} is not registered.`);
      default:
        throw TypeError(
          `Unknown op '${s.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`
        );
    }
  })(e, t, a);
  return Qe.isPromise(n) ? n.then((s) => [].concat(s)) : [].concat(n);
}
var to = class {
  constructor(e = {}, t = {}, a = {}, r = {}) {
    (this.weightMap = e),
      (this.tensorArrayMap = t),
      (this.tensorListMap = a),
      (this.functionMap = r),
      (this.rootContext = { id: 0, frameName: '', iterationId: 0 }),
      (this.contexts = [this.rootContext]),
      (this.lastId = 0),
      this.generateCurrentContextIds();
  }
  newFrame(e, t) {
    return { id: e, frameName: t, iterationId: 0 };
  }
  set currentContext(e) {
    this.contexts !== e && ((this.contexts = e), this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  get currentContextId() {
    return this._currentContextIds[0];
  }
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    let e = [];
    for (let t = 0; t < this.contexts.length - 1; t++) {
      let a = this.contexts.slice(0, this.contexts.length - t);
      e.push(this.contextIdforContexts(a));
    }
    e.push(''), (this._currentContextIds = e);
  }
  contextIdforContexts(e) {
    return e
      ? e
          .map((t) => (t.id === 0 && t.iterationId === 0 ? '' : `${t.frameName}-${t.iterationId}`))
          .join('/')
      : '';
  }
  enterFrame(e) {
    this.contexts &&
      (this.lastId++,
      (this.contexts = this.contexts.slice()),
      this.contexts.push(this.newFrame(this.lastId, e)),
      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  exitFrame() {
    if (this.contexts && this.contexts.length > 1)
      (this.contexts = this.contexts.slice()),
        this.contexts.splice(-1),
        this.currentContextIds.shift();
    else throw new Error('Cannot exit frame, the context is empty');
  }
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      (this.contexts = this.contexts.slice()), this.lastId++;
      let e = Object.assign({}, this.contexts[this.contexts.length - 1]);
      (e.iterationId += 1),
        (e.id = this.lastId),
        this.contexts.splice(-1, 1, e),
        this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else throw new Error('Cannot increase frame iteration, the context is empty');
  }
  getWeight(e) {
    return this.weightMap[e];
  }
  addTensorArray(e) {
    this.tensorArrayMap[e.id] = e;
  }
  getTensorArray(e) {
    return this.tensorArrayMap[e];
  }
  addTensorList(e) {
    this.tensorListMap[e.id] = e;
  }
  getTensorList(e) {
    return this.tensorListMap[e];
  }
  dispose(e) {
    for (let t in this.tensorArrayMap) this.tensorArrayMap[t].clearAndClose(e);
    for (let t in this.tensorListMap) this.tensorListMap[t].clearAndClose(e);
  }
};
function ao(e, t, a, r) {
  let n = new Set(),
    s = [],
    p = null,
    i = null,
    d = new Set(),
    l = Object.keys(e).map((f) => rt(f)[0]),
    m = [];
  r != null && (m = r.map((f) => rt(f.name)[0]));
  let u = [...t];
  for (; u.length > 0; ) {
    let f = u.pop();
    if (
      ((ro(f) || zc(f) || jc(f)) &&
        p == null &&
        ((p = f), (i = p.children.map((g) => g.name).filter((g) => n.has(g)))),
      n.add(f.name),
      a[f.name] == null && l.indexOf(f.name) === -1 && m.indexOf(f.name) === -1)
    ) {
      if (f.inputs.length === 0) {
        s.push(f.name);
        continue;
      }
      f.inputs.forEach((g) => {
        d.has(g.name) || (d.add(g.name), u.push(g));
      });
    }
  }
  return { inputs: e, outputs: t, usedNodes: n, missingInputs: s, dynamicNode: p, syncInputs: i };
}
function Pc(e, t, a) {
  let { usedNodes: r, inputs: n } = a,
    s = [],
    p = Object.keys(n)
      .map((m) => rt(m)[0])
      .map((m) => e.nodes[m]),
    i = e.initNodes;
  p.forEach((m) => {
    r.has(m.name) && s.push(m);
  }),
    e.weights.forEach((m) => {
      r.has(m.name) && s.push(m);
    }),
    i != null &&
      i.forEach((m) => {
        r.has(m.name) && s.push(m);
      });
  let d = new Set(),
    l = [];
  for (; s.length > 0; ) {
    let m = s.pop();
    d.add(m.name),
      t[m.name] || l.push(m),
      m.children.forEach((u) => {
        !d.has(u.name) && r.has(u.name) && u.inputs.every((f) => d.has(f.name)) && s.push(u);
      });
  }
  return l;
}
var Rc = [
    'Switch',
    'Merge',
    'Enter',
    'Exit',
    'NextIteration',
    'StatelessIf',
    'StatelessWhile',
    'if',
    'While'
  ],
  Lc = ['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'],
  Uc = [
    'HashTable',
    'HashTableV2',
    'LookupTableImport',
    'LookupTableImportV2',
    'LookupTableFind',
    'LookupTableFindV2',
    'LookupTableSize',
    'LookupTableSizeV2'
  ];
function ro(e) {
  return Rc.indexOf(e.op) >= 0;
}
function zc(e) {
  return Lc.indexOf(e.op) >= 0;
}
function jc(e) {
  return Uc.indexOf(e.op) >= 0;
}
var fs = class {
    constructor(e, t) {
      (this.graph = e),
        (this.parent = t),
        (this.compiledMap = new Map()),
        (this._weightMap = {}),
        (this.SEPERATOR = ','),
        (this._functions = {}),
        (this._functionExecutorMap = {}),
        (this.intermediateTensors = {}),
        (this.keepTensorForDebug = !1),
        (this._outputs = e.outputs),
        (this._inputs = e.inputs),
        (this._initNodes = e.initNodes),
        (this._signature = e.signature),
        (this._functions = e.functions),
        e.functions != null &&
          Object.keys(e.functions).forEach((a) => {
            this._functionExecutorMap[a] = new fs(e.functions[a], this);
          });
    }
    get weightIds() {
      return this.parent ? this.parent.weightIds : this._weightIds;
    }
    get functionExecutorMap() {
      return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
    }
    get weightMap() {
      return this.parent ? this.parent.weightMap : this._weightMap;
    }
    set weightMap(e) {
      let t = Object.keys(e).map((a) => e[a].map((r) => r.id));
      (this._weightIds = [].concat(...t)), (this._weightMap = e);
    }
    set resourceManager(e) {
      this._resourceManager = e;
    }
    get inputs() {
      return this._inputs.map((e) => ({
        name: e.name,
        shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
        dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0
      }));
    }
    get outputs() {
      return this._outputs.map((e) => ({
        name: e.name,
        shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
        dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0
      }));
    }
    get inputNodes() {
      return this._inputs.map((e) => e.signatureKey || e.name);
    }
    get outputNodes() {
      return this._outputs.map((e) => {
        let t = e.signatureKey || e.name;
        return e.defaultOutput ? `${t}:${e.defaultOutput}` : t;
      });
    }
    get functions() {
      return Object.keys(this._functions).reduce(
        (e, t) => ((e[t] = this._functions[t].signature), e),
        {}
      );
    }
    getCompilationKey(e, t) {
      let a = e.map((n) => n.name).sort(),
        r = t.map((n) => n.name).sort();
      return a.join(this.SEPERATOR) + '--' + r.join(this.SEPERATOR);
    }
    compile(e, t) {
      let a = ao(e, t, this.weightMap, this._initNodes),
        { missingInputs: r, dynamicNode: n, syncInputs: s } = a;
      if (n != null)
        throw new Error(
          `This execution contains the node '${n.name}', which has the dynamic op '${n.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`
        );
      if (r.length > 0) {
        let p = t.map((d) => d.name),
          i = Object.keys(e);
        throw new Error(
          `Cannot compute the outputs [${p}] from the provided inputs [${i}]. Missing the following inputs: [${r}]`
        );
      }
      return Pc(this.graph, this.weightMap, a);
    }
    execute(e, t) {
      e = this.mapInputs(e);
      let a = Object.keys(e).sort();
      this.checkInputs(e),
        this.checkInputShapeAndType(e),
        (t = this.mapOutputs(t)),
        this.checkOutputs(t);
      let r = a.map((m) => this.graph.nodes[rt(m)[0]]),
        n = t.map((m) => rt(m)[0]),
        s = n.map((m) => this.graph.nodes[m]);
      this.resetIntermediateTensors(), s.length === 0 && (s = this._outputs);
      let p = this.getCompilationKey(r, s),
        i = this.compiledMap.get(p);
      i == null && ((i = this.compile(e, s)), this.compiledMap.set(p, i));
      let d = {},
        l = {};
      return re(() => {
        let m = new to(this.weightMap, d, l, this.functionExecutorMap),
          u = Object.assign({}, this.weightMap);
        Object.keys(e).forEach((y) => {
          let [N, T] = rt(y),
            O = [];
          (O[T] = e[y]), (u[N] = O);
        });
        let f = this.getFrozenTensorIds(u),
          g = {};
        for (let y = 0; y < i.length; y++) {
          let N = i[y];
          if (!u[N.name]) {
            let T = eo(N, u, m, this._resourceManager);
            if (Qe.isPromise(T))
              throw new Error(
                `The execution of the op '${N.op}' returned a promise. Please use model.executeAsync() instead.`
              );
            (u[N.name] = T), this.checkTensorForDisposal(N.name, N, u, m, f, n, g);
          }
        }
        return this.parent == null && m.dispose(f), t.map((y) => Ze(y, u, m));
      });
    }
    getFrozenTensorIds(e) {
      let t = [].concat.apply(
        [],
        Object.keys(e)
          .map((a) => e[a])
          .map((a) => a.map((r) => r.id))
      );
      return new Set(t);
    }
    checkTensorForDisposal(e, t, a, r, n, s, p) {
      t.category === 'control' ||
        s.indexOf(e) !== -1 ||
        (a[e].forEach((i) => {
          i != null && (p[i.id] = (p[i.id] || 0) + t.children.length);
        }),
        t.inputs.forEach((i) => {
          if (i.category !== 'control') {
            let d = q7(i.name, a, r);
            d != null &&
              d.forEach((l) => {
                if (l && !l.kept && !n.has(l.id)) {
                  let m = p[l.id];
                  if (m === 1) {
                    if (!this.keepTensorForDebug) l.dispose();
                    else {
                      let [u, f] = Vt(t.name, r);
                      this.intermediateTensors[u]
                        ? (this.intermediateTensors[u][f] = l)
                        : ((this.intermediateTensors[u] = []),
                          (this.intermediateTensors[u][f] = l));
                    }
                    delete p[l.id];
                  } else m != null && p[l.id]--;
                }
              });
          }
        }));
    }
    async executeAsync(e, t) {
      return this._executeAsync(e, t);
    }
    disposeIntermediateTensors() {
      !this.intermediateTensors ||
        (Object.keys(this.intermediateTensors).forEach((e) =>
          this.intermediateTensors[e].forEach((t) => t.dispose())
        ),
        this.disposeTensorsMap());
    }
    disposeTensorsMap() {
      !this.tensorsMap ||
        Object.keys(this.tensorsMap).forEach((e) => {
          this.tensorsMap[e].forEach((a) => {
            a && !a.kept && !a.isDisposed && !this.keepIds.has(a.id) && a.dispose();
          });
        });
    }
    getIntermediateTensors() {
      return this.tensorsMap;
    }
    resetIntermediateTensors() {
      for (let e in this.intermediateTensors)
        this.intermediateTensors[e].forEach((t) => t.dispose()), delete this.intermediateTensors[e];
    }
    async _executeAsync(e, t, a = !1, r = {}, n = {}) {
      a ||
        ((e = this.mapInputs(e)),
        this.checkInputs(e),
        this.checkInputShapeAndType(e),
        (t = this.mapOutputs(t)),
        this.checkOutputs(t));
      try {
        this.keepTensorForDebug = fe().getBool('KEEP_INTERMEDIATE_TENSORS');
      } catch (l) {
        console.warn(l.message);
      }
      this.resetIntermediateTensors();
      let s = new to(this.weightMap, r, n, this.functionExecutorMap);
      this.tensorsMap = await this.executeWithControlFlow(e, s, t, a);
      let p = t.map((l) => Ze(l, this.tensorsMap, s)),
        i = p.map((l) => l.id),
        d = Object.keys(e).map((l) => e[l].id);
      return (
        (this.keepIds = new Set([...i, ...d, ...this.weightIds])),
        this.keepTensorForDebug || this.disposeTensorsMap(),
        this.parent == null && s.dispose(this.keepIds),
        p
      );
    }
    async executeFunctionAsync(e, t, a) {
      let r = e.reduce((n, s, p) => ((n[this.inputs[p].name] = s), n), {});
      return this._executeAsync(r, this.outputNodes, !0, t, a);
    }
    async executeWithControlFlow(e, t, a, r) {
      let n = Object.keys(e),
        s = n.map((B) => this.graph.nodes[rt(B)[0]]),
        p = a.map((B) => rt(B)[0]),
        i = p.map((B) => this.graph.nodes[B]);
      i.length === 0 && (i = this._outputs);
      let {
          usedNodes: d,
          missingInputs: l,
          dynamicNode: m,
          syncInputs: u
        } = ao(e, i, this.weightMap, this._initNodes),
        f = [...s, ...this.graph.weights, ...(this._initNodes || [])].map((B) => ({
          node: B,
          contexts: t.currentContext
        })),
        g = Object.assign({}, this.weightMap);
      Object.keys(e).forEach((B) => {
        let [M, C] = rt(B),
          L = [];
        (L[C] = e[B]), (g[M] = L);
      });
      let y = {},
        N = this.getFrozenTensorIds(g),
        T = {};
      for (; f.length > 0; ) {
        let B = this.processStack(s, f, t, g, T, N, p, y, d);
        await Promise.all(B);
      }
      m == null &&
        !r &&
        console.warn(
          'This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.'
        );
      let O = i.filter((B) => !ro(B) && !Ze(B.name, g, t)).map((B) => B.name);
      if (O.length > 0) {
        let B = '';
        throw (
          (m != null &&
            (B = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${u}]`),
          new Error(
            `Cannot compute the outputs [${O}] from the provided inputs [${n}]. Consider providing the following inputs: [${l}]. ${B}`
          ))
        );
      }
      return g;
    }
    processStack(e, t, a, r, n, s, p, i, d) {
      let l = [];
      for (; t.length > 0; ) {
        let m = t.pop();
        a.currentContext = m.contexts;
        let u = '';
        if (
          (m.node.op === 'Enter' && h('isConstant', m.node, r, a) && ([u] = Vt(m.node.name, a)),
          r[m.node.name] == null)
        ) {
          let f = eo(m.node, r, a, this._resourceManager);
          u || ([u] = Vt(m.node.name, a));
          let g = a.currentContext;
          Qe.isPromise(f)
            ? l.push(
                f.then(
                  (y) => (
                    (r[u] = y),
                    (a.currentContext = g),
                    this.checkTensorForDisposal(u, m.node, r, a, s, p, i),
                    this.processChildNodes(m.node, t, a, r, n, d),
                    y
                  )
                )
              )
            : ((r[u] = f),
              this.checkTensorForDisposal(u, m.node, r, a, s, p, i),
              this.processChildNodes(m.node, t, a, r, n, d));
        } else this.processChildNodes(m.node, t, a, r, n, d);
      }
      return l;
    }
    processChildNodes(e, t, a, r, n, s) {
      e.children.forEach((p) => {
        let [i] = Vt(p.name, a);
        n[i] ||
          !s.has(p.name) ||
          (p.op === 'Merge'
            ? p.inputNames.some((d) => !!Ze(d, r, a)) &&
              ((n[i] = !0), t.push({ contexts: a.currentContext, node: p }))
            : p.inputNames.every((d) => !!Ze(d, r, a)) &&
              ((n[i] = !0), t.push({ contexts: a.currentContext, node: p })));
      });
    }
    dispose() {
      Object.keys(this.weightMap).forEach((e) => this.weightMap[e].forEach((t) => t.dispose()));
    }
    checkInputShapeAndType(e) {
      Object.keys(e).forEach((t) => {
        let a = e[t],
          [r] = rt(t),
          n = this.graph.nodes[r];
        if (n.attrParams.shape && n.attrParams.shape.value) {
          let s = n.attrParams.shape.value,
            p = s.length === a.shape.length && a.shape.every((i, d) => s[d] === -1 || s[d] === i);
          Qe.assert(
            p,
            () =>
              `The shape of dict['${n.name}'] provided in model.execute(dict) must be [${s}], but was [${a.shape}]`
          );
        }
        n.attrParams.dtype &&
          n.attrParams.dtype.value &&
          Qe.assert(
            a.dtype === n.attrParams.dtype.value,
            () =>
              `The dtype of dict['${n.name}'] provided in model.execute(dict) must be ${n.attrParams.dtype.value}, but was ${a.dtype}`
          );
      });
    }
    mapInputs(e) {
      let t = {};
      for (let a in e)
        if (
          this._signature != null &&
          this._signature.inputs != null &&
          this._signature.inputs[a] != null
        ) {
          let r = this._signature.inputs[a];
          t[r.name] = e[a];
        } else t[a] = e[a];
      return t;
    }
    checkInputs(e) {
      let t = Object.keys(e).filter((a) => {
        let [r] = rt(a);
        return this.graph.nodes[r] == null;
      });
      if (t.length > 0)
        throw new Error(
          `The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`
        );
    }
    mapOutputs(e) {
      return e.map(
        (t) =>
          this._signature != null &&
          this._signature.outputs != null &&
          this._signature.outputs[t] != null
            ? this._signature.outputs[t].name
            : t,
        {}
      );
    }
    checkOutputs(e) {
      e.forEach((t) => {
        let [a] = rt(t);
        if (!this.graph.nodes[a]) throw new Error(`The output '${t}' is not found in the graph`);
      });
    }
  },
  Mc = class {
    constructor(e = {}, t = {}) {
      (this.hashTableNameToHandle = e), (this.hashTableMap = t);
    }
    addHashTable(e, t) {
      (this.hashTableNameToHandle[e] = t.handle), (this.hashTableMap[t.id] = t);
    }
    getHashTableHandleByName(e) {
      return this.hashTableNameToHandle[e];
    }
    getHashTableById(e) {
      return this.hashTableMap[e];
    }
    dispose() {
      for (let e in this.hashTableMap)
        this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e];
      for (let e in this.hashTableNameToHandle)
        this.hashTableNameToHandle[e].dispose(), delete this.hashTableNameToHandle[e];
    }
  },
  qc = '?tfjs-format=file',
  Hc = 'model.json',
  Wc = class {
    constructor(e, t = {}) {
      (this.modelUrl = e),
        (this.loadOptions = t),
        (this.version = 'n/a'),
        t == null && (this.loadOptions = {}),
        (this.resourceManager = new Mc());
    }
    get modelVersion() {
      return this.version;
    }
    get inputNodes() {
      return this.executor.inputNodes;
    }
    get outputNodes() {
      return this.executor.outputNodes;
    }
    get inputs() {
      return this.executor.inputs;
    }
    get outputs() {
      return this.executor.outputs;
    }
    get weights() {
      return this.executor.weightMap;
    }
    get metadata() {
      return this.artifacts.userDefinedMetadata;
    }
    get modelSignature() {
      return this.signature;
    }
    findIOHandler() {
      let e = this.modelUrl;
      if (e.load != null) this.handler = e;
      else if (this.loadOptions.requestInit != null)
        this.handler = F1.browserHTTPRequest(e, this.loadOptions);
      else {
        let t = F1.getLoadHandlers(e, this.loadOptions);
        if (t.length === 0) t.push(F1.browserHTTPRequest(e, this.loadOptions));
        else if (t.length > 1)
          throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);
        this.handler = t[0];
      }
    }
    load() {
      if ((this.findIOHandler(), this.handler.load == null))
        throw new Error(
          'Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.'
        );
      let e = this.handler.load();
      return Qe.isPromise(e) ? e.then((t) => this.loadSync(t)) : this.loadSync(e);
    }
    loadSync(e) {
      this.artifacts = e;
      let t = this.artifacts.modelTopology,
        a;
      this.artifacts.userDefinedMetadata != null &&
      this.artifacts.userDefinedMetadata.signature != null
        ? (a = this.artifacts.userDefinedMetadata.signature)
        : (a = this.artifacts.signature),
        (this.signature = a),
        (this.version = `${t.versions.producer}.${t.versions.minConsumer}`);
      let r = F1.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
      if (
        ((this.executor = new fs(G2.Instance.transformGraph(t, this.signature))),
        (this.executor.weightMap = this.convertTensorMapToTensorsMap(r)),
        (this.executor.resourceManager = this.resourceManager),
        e.modelInitializer != null && e.modelInitializer.node != null)
      ) {
        let n = G2.Instance.transformGraph(e.modelInitializer);
        (this.initializer = new fs(n)),
          (this.initializer.weightMap = this.executor.weightMap),
          (this.initializer.resourceManager = this.resourceManager),
          this.initializer.executeAsync({}, []);
      }
      return !0;
    }
    async save(e, t) {
      if (typeof e == 'string') {
        let a = F1.getSaveHandlers(e);
        if (a.length === 0) throw new Error(`Cannot find any save handlers for URL '${e}'`);
        if (a.length > 1)
          throw new Error(`Found more than one (${a.length}) save handlers for URL '${e}'`);
        e = a[0];
      }
      if (e.save == null)
        throw new Error(
          'GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.'
        );
      return e.save(this.artifacts);
    }
    predict(e, t) {
      return this.execute(e, this.outputNodes);
    }
    normalizeInputs(e) {
      if (!(e instanceof He) && !Array.isArray(e)) return e;
      if (((e = Array.isArray(e) ? e : [e]), e.length !== this.inputNodes.length))
        throw new Error(
          `Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`
        );
      return this.inputNodes.reduce((t, a, r) => ((t[a] = e[r]), t), {});
    }
    normalizeOutputs(e) {
      return (e = e || this.outputNodes), Array.isArray(e) ? e : [e];
    }
    execute(e, t) {
      (e = this.normalizeInputs(e)), (t = this.normalizeOutputs(t));
      let a = this.executor.execute(e, t);
      return a.length > 1 ? a : a[0];
    }
    async executeAsync(e, t) {
      (e = this.normalizeInputs(e)), (t = this.normalizeOutputs(t));
      let a = await this.executor.executeAsync(e, t);
      return a.length > 1 ? a : a[0];
    }
    getIntermediateTensors() {
      return this.executor.getIntermediateTensors();
    }
    disposeIntermediateTensors() {
      this.executor.disposeIntermediateTensors();
    }
    convertTensorMapToTensorsMap(e) {
      return Object.keys(e).reduce((t, a) => ((t[a] = [e[a]]), t), {});
    }
    dispose() {
      this.executor.dispose(),
        this.initializer && this.initializer.dispose(),
        this.resourceManager.dispose();
    }
  };
async function Kc(e, t = {}) {
  if (e == null)
    throw new Error(
      'modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model'
    );
  t == null && (t = {}), t.fromTFHub && typeof e == 'string' && (e = Gc(e));
  let a = new Wc(e, t);
  return await a.load(), a;
}
function Gc(e) {
  return e.endsWith('/') || (e = e + '/'), `${e}${Hc}${qc}`;
}
var p1 = function () {
  return (
    (p1 =
      Object.assign ||
      function (e) {
        for (var t, a = 1, r = arguments.length; a < r; a++)
          for (var n in (t = arguments[a]))
            Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
        return e;
      }),
    p1.apply(this, arguments)
  );
};
function Wt(e, t, a, r) {
  return new (a || (a = Promise))(function (n, s) {
    function p(l) {
      try {
        d(r.next(l));
      } catch (m) {
        s(m);
      }
    }
    function i(l) {
      try {
        d(r.throw(l));
      } catch (m) {
        s(m);
      }
    }
    function d(l) {
      var m;
      l.done
        ? n(l.value)
        : ((m = l.value),
          m instanceof a
            ? m
            : new a(function (u) {
                u(m);
              })).then(p, i);
    }
    d((r = r.apply(e, t || [])).next());
  });
}
function Kt(e, t) {
  var a,
    r,
    n,
    s,
    p = {
      label: 0,
      sent: function () {
        if (1 & n[0]) throw n[1];
        return n[1];
      },
      trys: [],
      ops: []
    };
  return (
    (s = { next: i(0), throw: i(1), return: i(2) }),
    typeof Symbol == 'function' &&
      (s[Symbol.iterator] = function () {
        return this;
      }),
    s
  );
  function i(d) {
    return function (l) {
      return (function (m) {
        if (a) throw new TypeError('Generator is already executing.');
        for (; p; )
          try {
            if (
              ((a = 1),
              r &&
                (n =
                  2 & m[0]
                    ? r.return
                    : m[0]
                    ? r.throw || ((n = r.return) && n.call(r), 0)
                    : r.next) &&
                !(n = n.call(r, m[1])).done)
            )
              return n;
            switch (((r = 0), n && (m = [2 & m[0], n.value]), m[0])) {
              case 0:
              case 1:
                n = m;
                break;
              case 4:
                return p.label++, { value: m[1], done: !1 };
              case 5:
                p.label++, (r = m[1]), (m = [0]);
                continue;
              case 7:
                (m = p.ops.pop()), p.trys.pop();
                continue;
              default:
                if (
                  ((n = p.trys),
                  !((n = n.length > 0 && n[n.length - 1]) || (m[0] !== 6 && m[0] !== 2)))
                ) {
                  p = 0;
                  continue;
                }
                if (m[0] === 3 && (!n || (m[1] > n[0] && m[1] < n[3]))) {
                  p.label = m[1];
                  break;
                }
                if (m[0] === 6 && p.label < n[1]) {
                  (p.label = n[1]), (n = m);
                  break;
                }
                if (n && p.label < n[2]) {
                  (p.label = n[2]), p.ops.push(m);
                  break;
                }
                n[2] && p.ops.pop(), p.trys.pop();
                continue;
            }
            m = t.call(e, p);
          } catch (u) {
            (m = [6, u]), (r = 0);
          } finally {
            a = n = 0;
          }
        if (5 & m[0]) throw m[1];
        return { value: m[0] ? m[1] : void 0, done: !0 };
      })([d, l]);
    };
  }
}
var no = ['rightEye', 'leftEye', 'noseTip', 'mouthCenter', 'rightEarTragion', 'leftEarTragion'],
  vs = { modelType: 'short', runtime: 'mediapipe', maxFaces: 1 },
  Xc = (function () {
    function e(t) {
      var a = this;
      (this.width = 0),
        (this.height = 0),
        (this.selfieMode = !1),
        (this.faceDetectorSolution = new Id.FaceDetection({
          locateFile: function (r, n) {
            return t.solutionPath ? t.solutionPath.replace(/\/+$/, '') + '/' + r : n + '/' + r;
          }
        })),
        this.faceDetectorSolution.setOptions({ selfieMode: this.selfieMode, model: t.modelType }),
        this.faceDetectorSolution.onResults(function (r) {
          if (
            ((a.height = r.image.height),
            (a.width = r.image.width),
            (a.faces = []),
            r.detections !== null)
          )
            for (var n = 0, s = r.detections; n < s.length; n++) {
              var p = s[n];
              a.faces.push(
                a.normalizedToAbsolute(
                  p.landmarks,
                  ((i = p.boundingBox),
                  (d = void 0),
                  (l = void 0),
                  (m = void 0),
                  (d = i.xCenter - i.width / 2),
                  (l = d + i.width),
                  (m = i.yCenter - i.height / 2),
                  {
                    xMin: d,
                    xMax: l,
                    yMin: m,
                    yMax: m + i.height,
                    width: i.width,
                    height: i.height
                  })
                )
              );
            }
          var i, d, l, m;
        });
    }
    return (
      (e.prototype.normalizedToAbsolute = function (t, a) {
        var r = this;
        return {
          keypoints: t.map(function (n, s) {
            return { x: n.x * r.width, y: n.y * r.height, name: no[s] };
          }),
          box: {
            xMin: a.xMin * this.width,
            yMin: a.yMin * this.height,
            xMax: a.xMax * this.width,
            yMax: a.yMax * this.height,
            width: a.width * this.width,
            height: a.height * this.height
          }
        };
      }),
      (e.prototype.estimateFaces = function (t, a) {
        return Wt(this, void 0, void 0, function () {
          var r, n;
          return Kt(this, function (s) {
            switch (s.label) {
              case 0:
                return (
                  a &&
                    a.flipHorizontal &&
                    a.flipHorizontal !== this.selfieMode &&
                    ((this.selfieMode = a.flipHorizontal),
                    this.faceDetectorSolution.setOptions({ selfieMode: this.selfieMode })),
                  t instanceof He ? ((n = ImageData.bind), [4, On.toPixels(t)]) : [3, 2]
                );
              case 1:
                return (
                  (r = new (n.apply(ImageData, [void 0, s.sent(), t.shape[1], t.shape[0]]))()),
                  [3, 3]
                );
              case 2:
                (r = t), (s.label = 3);
              case 3:
                return (t = r), [4, this.faceDetectorSolution.send({ image: t })];
              case 4:
                return s.sent(), [2, this.faces];
            }
          });
        });
      }),
      (e.prototype.dispose = function () {
        this.faceDetectorSolution.close();
      }),
      (e.prototype.reset = function () {
        this.faceDetectorSolution.reset(),
          (this.width = 0),
          (this.height = 0),
          (this.faces = null),
          (this.selfieMode = !1);
      }),
      (e.prototype.initialize = function () {
        return this.faceDetectorSolution.initialize();
      }),
      e
    );
  })();
function Yc(e) {
  return Wt(this, void 0, void 0, function () {
    var t, a;
    return Kt(this, function (r) {
      switch (r.label) {
        case 0:
          return (
            (t = (function (n) {
              if (n == null) return p1({}, vs);
              var s = p1({}, n);
              return (
                (s.runtime = 'mediapipe'),
                s.modelType == null && (s.modelType = vs.modelType),
                s.maxFaces == null && (s.maxFaces = vs.maxFaces),
                s
              );
            })(e)),
            [4, (a = new Xc(t)).initialize()]
          );
        case 1:
          return r.sent(), [2, a];
      }
    });
  });
}
function Jc(e, t, a, r) {
  var n = e.width,
    s = e.height,
    p = r ? -1 : 1,
    i = Math.cos(e.rotation),
    d = Math.sin(e.rotation),
    l = e.xCenter,
    m = e.yCenter,
    u = 1 / t,
    f = 1 / a,
    g = new Array(16);
  return (
    (g[0] = n * i * p * u),
    (g[1] = -s * d * u),
    (g[2] = 0),
    (g[3] = (-0.5 * n * i * p + 0.5 * s * d + l) * u),
    (g[4] = n * d * p * f),
    (g[5] = s * i * f),
    (g[6] = 0),
    (g[7] = (-0.5 * s * i - 0.5 * n * d * p + m) * f),
    (g[8] = 0),
    (g[9] = 0),
    (g[10] = n * u),
    (g[11] = 0),
    (g[12] = 0),
    (g[13] = 0),
    (g[14] = 0),
    (g[15] = 1),
    (function (y) {
      if (y.length !== 16) throw new Error('Array length must be 16 but got ' + y.length);
      return [
        [y[0], y[1], y[2], y[3]],
        [y[4], y[5], y[6], y[7]],
        [y[8], y[9], y[10], y[11]],
        [y[12], y[13], y[14], y[15]]
      ];
    })(g)
  );
}
function so(e) {
  return e instanceof He
    ? { height: e.shape[0], width: e.shape[1] }
    : { height: e.height, width: e.width };
}
function po(e) {
  return e instanceof He ? e : On.fromPixels(e);
}
function gs(e, t) {
  Qe.assert(e.width !== 0, function () {
    return t + ' width cannot be 0.';
  }),
    Qe.assert(e.height !== 0, function () {
      return t + ' height cannot be 0.';
    });
}
function Zc(e, t) {
  var a = (function (r, n, s, p) {
    var i = n - r,
      d = p - s;
    if (i === 0) throw new Error('Original min and max are both ' + r + ', range cannot be 0.');
    var l = d / i;
    return { scale: l, offset: s - r * l };
  })(0, 255, t[0], t[1]);
  return re(function () {
    return ae(K(e, a.scale), a.offset);
  });
}
function Qc(e, t, a) {
  var r = t.outputTensorSize,
    n = t.keepAspectRatio,
    s = t.borderMode,
    p = t.outputTensorFloatRange,
    i = so(e),
    d = (function (f, g) {
      return g
        ? {
            xCenter: g.xCenter * f.width,
            yCenter: g.yCenter * f.height,
            width: g.width * f.width,
            height: g.height * f.height,
            rotation: g.rotation
          }
        : {
            xCenter: 0.5 * f.width,
            yCenter: 0.5 * f.height,
            width: f.width,
            height: f.height,
            rotation: 0
          };
    })(i, a),
    l = (function (f, g, y) {
      if ((y === void 0 && (y = !1), !y)) return { top: 0, left: 0, right: 0, bottom: 0 };
      var N = g.height,
        T = g.width;
      gs(g, 'targetSize'), gs(f, 'roi');
      var O,
        B,
        M = N / T,
        C = f.height / f.width,
        L = 0,
        z = 0;
      return (
        M > C
          ? ((O = f.width), (B = f.width * M), (z = (1 - C / M) / 2))
          : ((O = f.height / M), (B = f.height), (L = (1 - M / C) / 2)),
        (f.width = O),
        (f.height = B),
        { top: z, left: L, right: L, bottom: z }
      );
    })(d, r, n),
    m = Jc(d, i.width, i.height, !1),
    u = re(function () {
      var f = po(e),
        g = z1(
          (function (T, O, B) {
            return (
              gs(B, 'inputResolution'),
              [
                (1 / B.width) * T[0][0] * O.width,
                (1 / B.height) * T[0][1] * O.width,
                T[0][3] * O.width,
                (1 / B.width) * T[1][0] * O.height,
                (1 / B.height) * T[1][1] * O.height,
                T[1][3] * O.height,
                0,
                0
              ]
            );
          })(m, i, r),
          [1, 8]
        ),
        y = s === 'zero' ? 'constant' : 'nearest',
        N = Ot.transform(jt(we(f, 'float32')), g, 'bilinear', y, 0, [r.height, r.width]);
      return p != null ? Zc(N, p) : N;
    });
  return { imageTensor: u, padding: l, transformationMatrix: m };
}
function io(e) {
  e.reduceBoxesInLowestLayer == null && (e.reduceBoxesInLowestLayer = !1),
    e.interpolatedScaleAspectRatio == null && (e.interpolatedScaleAspectRatio = 1),
    e.fixedAnchorSize == null && (e.fixedAnchorSize = !1);
  for (var t = [], a = 0; a < e.numLayers; ) {
    for (
      var r = [], n = [], s = [], p = [], i = a;
      i < e.strides.length && e.strides[i] === e.strides[a];

    ) {
      var d = oo(e.minScale, e.maxScale, i, e.strides.length);
      if (i === 0 && e.reduceBoxesInLowestLayer)
        s.push(1), s.push(2), s.push(0.5), p.push(0.1), p.push(d), p.push(d);
      else {
        for (var l = 0; l < e.aspectRatios.length; ++l) s.push(e.aspectRatios[l]), p.push(d);
        if (e.interpolatedScaleAspectRatio > 0) {
          var m =
            i === e.strides.length - 1 ? 1 : oo(e.minScale, e.maxScale, i + 1, e.strides.length);
          p.push(Math.sqrt(d * m)), s.push(e.interpolatedScaleAspectRatio);
        }
      }
      i++;
    }
    for (var u = 0; u < s.length; ++u) {
      var f = Math.sqrt(s[u]);
      r.push(p[u] / f), n.push(p[u] * f);
    }
    var g = 0,
      y = 0;
    if (e.featureMapHeight.length > 0) (g = e.featureMapHeight[a]), (y = e.featureMapWidth[a]);
    else {
      var N = e.strides[a];
      (g = Math.ceil(e.inputSizeHeight / N)), (y = Math.ceil(e.inputSizeWidth / N));
    }
    for (var T = 0; T < g; ++T)
      for (var O = 0; O < y; ++O)
        for (var B = 0; B < r.length; ++B) {
          var M = {
            xCenter: (O + e.anchorOffsetX) / y,
            yCenter: (T + e.anchorOffsetY) / g,
            width: 0,
            height: 0
          };
          e.fixedAnchorSize
            ? ((M.width = 1), (M.height = 1))
            : ((M.width = n[B]), (M.height = r[B])),
            t.push(M);
        }
    a = i;
  }
  return t;
}
function oo(e, t, a, r) {
  return r === 1 ? 0.5 * (e + t) : e + ((t - e) * a) / (r - 1);
}
function lo(e, t) {
  var a = t[0],
    r = t[1];
  return [a * e[0] + r * e[1] + e[3], a * e[4] + r * e[5] + e[7]];
}
function eh(e) {
  return re(function () {
    var t = (function (n) {
        return re(function () {
          return [de(n, [0, 0, 0], [1, -1, 1]), de(n, [0, 0, 1], [1, -1, -1])];
        });
      })(e),
      a = t[0],
      r = t[1];
    return { boxes: je(r), logits: je(a) };
  });
}
function th(e, t, a, r) {
  return Wt(this, void 0, void 0, function () {
    var n, s, p, i, d;
    return Kt(this, function (l) {
      switch (l.label) {
        case 0:
          return (
            e.sort(function (m, u) {
              return Math.max.apply(Math, u.score) - Math.max.apply(Math, m.score);
            }),
            (n = z1(
              e.map(function (m) {
                return [
                  m.locationData.relativeBoundingBox.yMin,
                  m.locationData.relativeBoundingBox.xMin,
                  m.locationData.relativeBoundingBox.yMax,
                  m.locationData.relativeBoundingBox.xMax
                ];
              })
            )),
            (s = Ye(
              e.map(function (m) {
                return m.score[0];
              })
            )),
            [4, Ot.nonMaxSuppressionAsync(n, s, t, a)]
          );
        case 1:
          return [4, (p = l.sent()).array()];
        case 2:
          return (
            (i = l.sent()),
            (d = e.filter(function (m, u) {
              return i.indexOf(u) > -1;
            })),
            Ue([n, s, p]),
            [2, d]
          );
      }
    });
  });
}
function ah(e, t, a) {
  return Wt(this, void 0, void 0, function () {
    var r, n, s, p, i;
    return Kt(this, function (d) {
      switch (d.label) {
        case 0:
          return (
            (r = e[0]),
            (n = e[1]),
            (s = (function (l, m, u) {
              return re(function () {
                var f, g, y, N;
                u.reverseOutputOrder
                  ? ((g = je(de(l, [0, u.boxCoordOffset + 0], [-1, 1]))),
                    (f = je(de(l, [0, u.boxCoordOffset + 1], [-1, 1]))),
                    (N = je(de(l, [0, u.boxCoordOffset + 2], [-1, 1]))),
                    (y = je(de(l, [0, u.boxCoordOffset + 3], [-1, 1]))))
                  : ((f = je(de(l, [0, u.boxCoordOffset + 0], [-1, 1]))),
                    (g = je(de(l, [0, u.boxCoordOffset + 1], [-1, 1]))),
                    (y = je(de(l, [0, u.boxCoordOffset + 2], [-1, 1]))),
                    (N = je(de(l, [0, u.boxCoordOffset + 3], [-1, 1])))),
                  (g = ae(K(ce(g, u.xScale), m.w), m.x)),
                  (f = ae(K(ce(f, u.yScale), m.h), m.y)),
                  u.applyExponentialOnBoxSize
                    ? ((y = K(zt(ce(y, u.hScale)), m.h)), (N = K(zt(ce(N, u.wScale)), m.w)))
                    : ((y = K(ce(y, u.hScale), m.h)), (N = K(ce(N, u.wScale), m.h)));
                var T = le(f, ce(y, 2)),
                  O = le(g, ce(N, 2)),
                  B = ae(f, ce(y, 2)),
                  M = ae(g, ce(N, 2)),
                  C = We(
                    [
                      U(T, [u.numBoxes, 1]),
                      U(O, [u.numBoxes, 1]),
                      U(B, [u.numBoxes, 1]),
                      U(M, [u.numBoxes, 1])
                    ],
                    1
                  );
                if (u.numKeypoints)
                  for (var L = 0; L < u.numKeypoints; ++L) {
                    var z = u.keypointCoordOffset + L * u.numValuesPerKeypoint,
                      X = void 0,
                      Y = void 0;
                    u.reverseOutputOrder
                      ? ((X = je(de(l, [0, z], [-1, 1]))), (Y = je(de(l, [0, z + 1], [-1, 1]))))
                      : ((Y = je(de(l, [0, z], [-1, 1]))), (X = je(de(l, [0, z + 1], [-1, 1]))));
                    var J = ae(K(ce(X, u.xScale), m.w), m.x),
                      Z = ae(K(ce(Y, u.yScale), m.h), m.y);
                    C = We([C, U(J, [u.numBoxes, 1]), U(Z, [u.numBoxes, 1])], 1);
                  }
                return C;
              });
            })(n, t, a)),
            (p = re(function () {
              var l = r;
              return a.sigmoidScore
                ? (a.scoreClippingThresh != null &&
                    (l = Xi(r, -a.scoreClippingThresh, a.scoreClippingThresh)),
                  (l = b1(l)))
                : l;
            })),
            [4, rh(s, p, a)]
          );
        case 1:
          return (i = d.sent()), Ue([s, p]), [2, i];
      }
    });
  });
}
function rh(e, t, a) {
  return Wt(this, void 0, void 0, function () {
    var r, n, s, p, i, d, l, m, u, f, g, y;
    return Kt(this, function (N) {
      switch (N.label) {
        case 0:
          return (r = []), [4, e.data()];
        case 1:
          return (n = N.sent()), [4, t.data()];
        case 2:
          for (s = N.sent(), p = 0; p < a.numBoxes; ++p)
            if (
              !(
                (a.minScoreThresh != null && s[p] < a.minScoreThresh) ||
                ((i = p * a.numCoords),
                (d = nh(n[i + 0], n[i + 1], n[i + 2], n[i + 3], s[p], a.flipVertically, p)),
                (l = d.locationData.relativeBoundingBox).width < 0 || l.height < 0)
              )
            ) {
              if (a.numKeypoints > 0)
                for (
                  (m = d.locationData).relativeKeypoints = [],
                    u = a.numKeypoints * a.numValuesPerKeypoint,
                    f = 0;
                  f < u;
                  f += a.numValuesPerKeypoint
                )
                  (g = i + a.keypointCoordOffset + f),
                    (y = { x: n[g + 0], y: a.flipVertically ? 1 - n[g + 1] : n[g + 1] }),
                    m.relativeKeypoints.push(y);
              r.push(d);
            }
          return [2, r];
      }
    });
  });
}
function nh(e, t, a, r, n, s, p) {
  return {
    score: [n],
    ind: p,
    locationData: {
      relativeBoundingBox: {
        xMin: t,
        yMin: s ? 1 - a : e,
        xMax: r,
        yMax: s ? 1 - e : a,
        width: r - t,
        height: a - e
      }
    }
  };
}
var sh = {
    reduceBoxesInLowestLayer: !1,
    interpolatedScaleAspectRatio: 1,
    featureMapHeight: [],
    featureMapWidth: [],
    numLayers: 4,
    minScale: 0.1484375,
    maxScale: 0.75,
    inputSizeHeight: 128,
    inputSizeWidth: 128,
    anchorOffsetX: 0.5,
    anchorOffsetY: 0.5,
    strides: [8, 16, 16, 16],
    aspectRatios: [1],
    fixedAnchorSize: !0
  },
  ph = {
    reduceBoxesInLowestLayer: !1,
    interpolatedScaleAspectRatio: 0,
    featureMapHeight: [],
    featureMapWidth: [],
    numLayers: 1,
    minScale: 0.1484375,
    maxScale: 0.75,
    inputSizeHeight: 192,
    inputSizeWidth: 192,
    anchorOffsetX: 0.5,
    anchorOffsetY: 0.5,
    strides: [4],
    aspectRatios: [1],
    fixedAnchorSize: !0
  },
  ys = {
    runtime: 'tfjs',
    modelType: 'short',
    maxFaces: 1,
    detectorModelUrl: 'https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1'
  },
  ih = {
    applyExponentialOnBoxSize: !1,
    flipVertically: !1,
    ignoreClasses: [],
    numClasses: 1,
    numBoxes: 896,
    numCoords: 16,
    boxCoordOffset: 0,
    keypointCoordOffset: 4,
    numKeypoints: 6,
    numValuesPerKeypoint: 2,
    sigmoidScore: !0,
    scoreClippingThresh: 100,
    reverseOutputOrder: !0,
    xScale: 128,
    yScale: 128,
    hScale: 128,
    wScale: 128,
    minScoreThresh: 0.5
  },
  oh = {
    applyExponentialOnBoxSize: !1,
    flipVertically: !1,
    ignoreClasses: [],
    numClasses: 1,
    numBoxes: 2304,
    numCoords: 16,
    boxCoordOffset: 0,
    keypointCoordOffset: 4,
    numKeypoints: 6,
    numValuesPerKeypoint: 2,
    sigmoidScore: !0,
    scoreClippingThresh: 100,
    reverseOutputOrder: !0,
    xScale: 192,
    yScale: 192,
    hScale: 192,
    wScale: 192,
    minScoreThresh: 0.6
  },
  dh = 0.3,
  lh = {
    outputTensorSize: { width: 128, height: 128 },
    keepAspectRatio: !0,
    outputTensorFloatRange: [-1, 1],
    borderMode: 'zero'
  },
  mh = {
    outputTensorSize: { width: 192, height: 192 },
    keepAspectRatio: !0,
    outputTensorFloatRange: [-1, 1],
    borderMode: 'zero'
  },
  ws,
  uh = (function () {
    function e(t, a, r) {
      (this.detectorModel = a),
        (this.maxFaces = r),
        t === 'full'
          ? ((this.imageToTensorConfig = mh),
            (this.tensorsToDetectionConfig = oh),
            (this.anchors = io(ph)))
          : ((this.imageToTensorConfig = lh),
            (this.tensorsToDetectionConfig = ih),
            (this.anchors = io(sh)));
      var n = Ye(
          this.anchors.map(function (d) {
            return d.width;
          })
        ),
        s = Ye(
          this.anchors.map(function (d) {
            return d.height;
          })
        ),
        p = Ye(
          this.anchors.map(function (d) {
            return d.xCenter;
          })
        ),
        i = Ye(
          this.anchors.map(function (d) {
            return d.yCenter;
          })
        );
      this.anchorTensor = { x: p, y: i, w: n, h: s };
    }
    return (
      (e.prototype.dispose = function () {
        this.detectorModel.dispose(),
          Ue([this.anchorTensor.x, this.anchorTensor.y, this.anchorTensor.w, this.anchorTensor.h]);
      }),
      (e.prototype.reset = function () {}),
      (e.prototype.detectFaces = function (t, a) {
        return (
          a === void 0 && (a = !1),
          Wt(this, void 0, void 0, function () {
            var r, n, s, p, i, d, l, m, u, f, g;
            return Kt(this, function (y) {
              switch (y.label) {
                case 0:
                  return t == null
                    ? (this.reset(), [2, []])
                    : ((r = re(function () {
                        var N = we(po(t), 'float32');
                        return a && (N = je(Ot.flipLeftRight(jt(N, 0)), [0])), N;
                      })),
                      (n = Qc(r, this.imageToTensorConfig)),
                      (s = n.imageTensor),
                      (p = n.transformationMatrix),
                      (i = this.detectorModel.execute(s, 'Identity:0')),
                      (d = eh(i)),
                      (l = d.boxes),
                      [
                        4,
                        ah([(m = d.logits), l], this.anchorTensor, this.tensorsToDetectionConfig)
                      ]);
                case 1:
                  return (u = y.sent()).length === 0
                    ? (Ue([r, s, i, m, l]), [2, u])
                    : [4, th(u, this.maxFaces, dh)];
                case 2:
                  return (
                    (f = y.sent()),
                    (g = (function (N, T) {
                      N === void 0 && (N = []);
                      var O,
                        B = ((O = T), [].concat.apply([], O));
                      return (
                        N.forEach(function (M) {
                          var C = M.locationData;
                          C.relativeKeypoints.forEach(function (Z) {
                            var F = lo(B, [Z.x, Z.y]),
                              R = F[0],
                              _ = F[1];
                            (Z.x = R), (Z.y = _);
                          });
                          var L = C.relativeBoundingBox,
                            z = Number.MAX_VALUE,
                            X = Number.MAX_VALUE,
                            Y = Number.MIN_VALUE,
                            J = Number.MIN_VALUE;
                          [
                            [L.xMin, L.yMin],
                            [L.xMin + L.width, L.yMin],
                            [L.xMin + L.width, L.yMin + L.height],
                            [L.xMin, L.yMin + L.height]
                          ].forEach(function (Z) {
                            var F = lo(B, Z),
                              R = F[0],
                              _ = F[1];
                            (z = Math.min(z, R)),
                              (Y = Math.max(Y, R)),
                              (X = Math.min(X, _)),
                              (J = Math.max(J, _));
                          }),
                            (C.relativeBoundingBox = {
                              xMin: z,
                              xMax: Y,
                              yMin: X,
                              yMax: J,
                              width: Y - z,
                              height: J - X
                            });
                        }),
                        N
                      );
                    })(f, p)),
                    Ue([r, s, i, m, l]),
                    [2, g]
                  );
              }
            });
          })
        );
      }),
      (e.prototype.estimateFaces = function (t, a) {
        return Wt(this, void 0, void 0, function () {
          var r, n;
          return Kt(this, function (s) {
            return (
              (r = so(t)),
              (n = !!a && a.flipHorizontal),
              [
                2,
                this.detectFaces(t, n).then(function (p) {
                  return p.map(function (i) {
                    for (
                      var d = i.locationData.relativeKeypoints.map(function (y, N) {
                          return p1(p1({}, y), {
                            x: y.x * r.width,
                            y: y.y * r.height,
                            name: no[N]
                          });
                        }),
                        l = i.locationData.relativeBoundingBox,
                        m = 0,
                        u = ['width', 'xMax', 'xMin'];
                      m < u.length;
                      m++
                    )
                      l[u[m]] *= r.width;
                    for (var f = 0, g = ['height', 'yMax', 'yMin']; f < g.length; f++)
                      l[g[f]] *= r.height;
                    return { keypoints: d, box: l };
                  });
                })
              ]
            );
          });
        });
      }),
      e
    );
  })();
function ch(e) {
  return Wt(this, void 0, void 0, function () {
    var t, a, r;
    return Kt(this, function (n) {
      switch (n.label) {
        case 0:
          return (
            (t = (function (s) {
              if (s == null) return p1({}, ys);
              var p = p1({}, s);
              return (
                p.modelType == null && (p.modelType = ys.modelType),
                p.maxFaces == null && (p.maxFaces = ys.maxFaces),
                p.detectorModelUrl == null &&
                  (p.modelType === 'full'
                    ? (p.detectorModelUrl =
                        'https://tfhub.dev/mediapipe/tfjs-model/face_detection/full/1')
                    : (p.detectorModelUrl =
                        'https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1')),
                p
              );
            })(e)),
            (a =
              typeof t.detectorModelUrl == 'string' &&
              t.detectorModelUrl.indexOf('https://tfhub.dev') > -1),
            [4, Kc(t.detectorModelUrl, { fromTFHub: a })]
          );
        case 1:
          return (r = n.sent()), [2, new uh(t.modelType, r, t.maxFaces)];
      }
    });
  });
}
function wf(e, t) {
  return Wt(this, void 0, void 0, function () {
    var a, r;
    return Kt(this, function (n) {
      if (e === ws.MediaPipeFaceDetector) {
        if (((r = void 0), (a = t) != null)) {
          if (a.runtime === 'tfjs') return [2, ch(a)];
          if (a.runtime === 'mediapipe') return [2, Yc(a)];
          r = a.runtime;
        }
        throw new Error(
          "Expect modelConfig.runtime to be either 'tfjs' or 'mediapipe', but got " + r
        );
      }
      throw new Error(e + ' is not a supported model name.');
    });
  });
}
(function (e) {
  e.MediaPipeFaceDetector = 'MediaPipeFaceDetector';
})(ws || (ws = {}));
export {
  Xc as MediaPipeFaceDetectorMediaPipe,
  uh as MediaPipeFaceDetectorTfjs,
  ws as SupportedModels,
  wf as createDetector
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/** @license See the LICENSE file. */
